<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>foobuzz</title>
	<link href="http://foobuzz.github.io" rel="alternate"></link>
	<link href="http://foobuzz.github.io/feed" rel="self"></link>
	<updated>2016-10-27T22:00:00Z</updated>
	<id>urn:uuid:f38f868c-f9e6-4401-8119-e4ef9777aee6</id>
	
		<entry>
			<title>Image orientation in the web</title>
			<link href="http://foobuzz.github.io/exif-web"/>
			<id>urn:uuid:9be99faf-759d-5c3d-b842-e370985ac242</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-10-27T22:00:00Z</updated>
			<summary type="html">

&lt;p&gt;I&#39;m building a web gallery made for self-hosting. When I tested the first prototype of my gallery with my personal pictures, I immediately noticed that something was wrong with all the pictures in portrait format: their orientation was wrong. It was odd, because any other mean of watching the pictures, such as my camera and my image viewer on Linux, rendered the correct orientation.&lt;/p&gt;
&lt;p&gt;The reason the images were wrongly orientated is because my camera uses Exif data in order to encode the actual orientation of the image. Exif (Exchangeable image file format) is a collection of metadata such as GPS location, date and time, etc, about the picture that was taken, that is contained in the file, alongside the actual image data. The image is always stored in &lt;em&gt;landscape&lt;/em&gt; mode, and the orientation is solely encoded in the Exif data.&lt;/p&gt;
&lt;p&gt;This is not new nor bizarre. In the old days, camera did not know whether a picture was taken in landscape orientation or in portrait orientation (or upside-down) and people had to manually rotate their images on their computer. Then came cameras with orientation detection, which were able to tell how they were orientated while taking the picture. However, instead of actually rotating the image (that is, the content), such cameras simply indicated the orientation via the Exif orientation tag. All modern cameras do that, and most modern software knows how to read Exif data in order to display the proper orientation. Except browsers.&lt;/p&gt;
&lt;p&gt;Actually, browsers know too. If you directly open an image in a modern browser, the orientation is correct. It&#39;s only when the image is &lt;em&gt;embedded&lt;/em&gt; in a web page (via &lt;code&gt;img&lt;/code&gt;) that the orientation might be wrong. Fortunately, there is a way to tell the browser to use Exif data to display the correct orientation, thanks to the CSS &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation&#34;&gt;&lt;code&gt;image-orientation&lt;/code&gt;&lt;/a&gt; property:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;nt&#34;&gt;image-orientation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;from-image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;/* Use EXIF data from the image */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, as of today, this is still an experimental standard, and it only works in Firefox. &lt;a href=&#34;http://caniuse.com/#search=image-orientation&#34;&gt;No joke&lt;/a&gt;. iOS Safari is a special case, as it doesn&#39;t support the property, but doesn&#39;t need to as it honors Exif by default. Overall, &lt;strong&gt;there is currently no reliable pure HTML/CSS solution to properly orientate pictures in a web page according to Exif data.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if we accept the lack of support for &lt;code&gt;image-orientation&lt;/code&gt;, its specification itself is bizarre. By default, Exif orientation is ignored. Shouldn&#39;t &lt;code&gt;from-image&lt;/code&gt; be the default? To understand the current state of specification and of support, I&#39;ve searched and read the Firefox bug tracker, the Chromium bug tracker and the W3C mailing list. More precisely, I&#39;ve found the following threads quite interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=298619&#34;&gt;Bug 298619&lt;/a&gt; on Bugzilla: &lt;em&gt;(exif) should consider using exif orientation flag when displaying JPEG images&lt;/em&gt;, reported in June 2005&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=56845&#34;&gt;Issue 56845&lt;/a&gt; in the Chromium bug tracker: &lt;em&gt;EXIF orientation is ignored&lt;/em&gt;, reported in September 2010&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.w3.org/Archives/Public/www-style/2011Dec/0001.html&#34;&gt;This thread&lt;/a&gt; in the W3C mailing list: &lt;em&gt;[css3-images] honoring EXIF orientation from images&lt;/em&gt;, started in November 2011&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason Firefox bug report is so well ahead of Chromium&#39;s one is because the Chromium project started in 2008 while Firefox had already a solid community in 2005. In fact when the Chromium bug was reported in 2010, Firefox hadn&#39;t made much progress on the bug since the third answer to the bug was posted in 2009 and was just trying to attract more attention to it.&lt;/p&gt;
&lt;p&gt;Three main points can be extracted from these discussions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nobody had planned to implement the standard.&lt;/strong&gt; As can be seen in the mailing list above, the W3C started worrying about Exif in 2011, after browsers started worrying about it for very practical reasons. Browsers had no plan to implement the standard. They flat-out ignored it until Exif became mainstream enough in order to cause &#34;bugs&#34;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The alert was raised by smartphones and email.&lt;/strong&gt; The Exif-related bugs started to appear in emails because of photos sent directly out of smartphones. The iPhone started using the Exif standard quite early on, and people started sharing pictures by email directly with their phone. Since the &#34;default&#34; way people hold their phone is vertical, it means that many pictures exchanged by mail suddenly depended on Exif. For this reason, the Bugzilla bug tracker mostly worried about Thunderbird while the Chromium bug tracker mostly worried about Gmail.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everybody feared breaking the web.&lt;/strong&gt; A straightforward support for Exif orientation by default was considered out of question by all parties (browsers and W3C) because they thought it would break the web. The idea is the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Someone took a picture. The picture carries Exif data. Photographer opened the picture with a software application that doesn&#39;t understand Exif data and saw the picture badly oriented. Photographer manually rotated the picture so that it looked good. Picture is now inconsistent with Exif data. If the browser suddenly starts honoring Exif data by default, picture is badly oriented again.&lt;/p&gt;
&lt;p&gt;As you can see, the scenario is based on the idea that the web contains a lot of pictures whose actual orientation is &lt;em&gt;inconsistent&lt;/em&gt; with their Exif orientation. In such case, a support for Exif orientation can break sites that worked very well until the support was installed. However, there was no data to support such claim. Some people in the threads pointed out that the web might actually not contain so many such pictures and that &lt;em&gt;not supporting Exif orientation might be causing more breakage than supporting it&lt;/em&gt;, but this opinion was mostly ignored.&lt;/p&gt;
&lt;p&gt;As the fear of breaking the web related only to images embedded in pages, most browsers implemented partial support for Exif orientation: it worked when a picture was directly opened as a file, but not when it was displayed using &lt;code&gt;img&lt;/code&gt;. The answer from the W3C to this compatibility problem was to allow developers to opt-in to Exif orientation via &lt;code&gt;image-orientation: from-image;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With hindsight, it seems that many contributors in those threads weren&#39;t aware of how widespread the support for Exif was among cameras and among other types of photo viewers. As I said, they basically waited for the standard to become mainstream enough to cause bugs, and even then some of them were still questioning the relevancy of the standard.&lt;/p&gt;
&lt;p&gt;I&#39;ve honestly no idea whether supporting Exif by default would cause more damage on the web than the damage the lack of support is currently causing, but the fact is that today, browsers can cause bad surprises to web developers and seem to be quite late on the Exif game. Apparently Apple didn&#39;t wonder much about legacy when they honored Exif by default on their iPhones apps, maybe browsers should follow the lead.&lt;/p&gt;
&lt;p&gt;As of today, the only way for a site such as my photo gallery project to store and display pictures properly is to rotate the picture according to the Exif orientation tag upon acquiring it (server-side), get rid of the tag, and then display the picture without any additional CSS. The web is basically living in denial of the Exif orientation standard, while every other piece of software is dealing with it.&lt;/p&gt;</summary>
			
				<category term="html"></category>
			
				<category term="css"></category>
			
				<category term="exif"></category>
			
				<category term="web"></category>
			
		</entry>
	
		<entry>
			<title>Displaying colors in the terminal</title>
			<link href="http://foobuzz.github.io/termicolor"/>
			<id>urn:uuid:eeab19e0-b5fc-5561-a019-58a60f77f8fd</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-07-03T15:09:44Z</updated>
			<summary type="html">

&lt;p&gt;The next version of &lt;a href=&#34;https://github.com/foobuzz/todo/&#34;&gt;my terminal-based ToDo application&lt;/a&gt; will include colors. This article is a synthesis of what I learned from implementing this feature.&lt;/p&gt;
&lt;p&gt;In the terminal, color is coded via escape codes. Colors are just a specific feature of many existing &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI escape codes&lt;/a&gt; that enable various actions and formatting for the terminal. An ANSI escape code is a sequence of ASCII characters in the following form:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;ESC[n1;n2;...L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;ESC&lt;/code&gt; is the ESCape ASCII character (#27), &lt;code&gt;L&lt;/code&gt; is a letter indicating what kind of formatting to turn on, and &lt;code&gt;n1&lt;/code&gt;, &lt;code&gt;n2&lt;/code&gt;,... are parameters for the given action/formatting. For example, the letter &lt;code&gt;A&lt;/code&gt; (resp. &lt;code&gt;B&lt;/code&gt;) is the code for moving the cursor up (resp. down), and its only parameter indicates how many cells the cursor should be moved. To get a demo, you can open a terminal and type:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;echo -e &#34;\e[5B&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The prompt for your next command should appear down the first one with a few spare lines. The &lt;code&gt;-e&lt;/code&gt; flag allow the interpretation of backslash escape, the &lt;code&gt;\e&lt;/code&gt; escape corresponding to the ESC character. The quotes are necessary for the whole ANSI escape code to be interpreted.&lt;/p&gt;
&lt;p&gt;All graphical-related codes come with the letter &lt;code&gt;m&lt;/code&gt;, with the parameter(s) indicating what kind of formatting to apply. Since such escape code turns &#34;on&#34; the associated formatting for all text following, there&#39;s the special parameter &lt;code&gt;0&lt;/code&gt; (escape code &lt;code&gt;ESC[0m&lt;/code&gt;) which resets everything back to normal. Bash also resets everything when a command has terminated, so if you test escape codes with &lt;code&gt;echo&lt;/code&gt; as in the previous example, you probably won&#39;t have to use the reset escape code manually.&lt;/p&gt;
&lt;p&gt;I wish the first example I could give would be parameter &lt;code&gt;5&lt;/code&gt; which enables blinking, but apparently it&#39;s not supported anymore by most terminals :-( (much like the HTML &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; element isn&#39;t supported anymore by browsers. Maybe &lt;code&gt;ESC[5m&lt;/code&gt; was &lt;a href=&#34;http://www.montulli.org/theoriginofthe%3Cblink%3Etag&#34;&gt;implemented by an engineer being drunk&lt;/a&gt; too.)&lt;/p&gt;
&lt;p&gt;So, I&#39;ll directly get to colors. There&#39;s 9 different parameters reserved for foreground colors (color of the text). Parameters 30 through 37 encode the 8 primary colors: black, red, green, yellow, blue, magenta, cyan, white. So, for a green hello world, you would type:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;echo -e &#34;\e[32mHello, world!&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These colors correspond to the colors you obtain when you &#34;turn on&#34; the components of the RGB coordinates. For example, black is (0, 0, 0), red is (R, 0, 0), magenta is (R, 0, B), etc. Since there are 3 components there are 2^3 = 8 primary colors. For some reason escape codes [30-37] render dark flavors of the colors. For example, red is only RGB(205, 0, 0)&lt;sup&gt;[1]&lt;/sup&gt;. Yellow is the most obvious one, you can try it yourself:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;echo -e &#34;\e[33mSupposed to be yellow!&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns out that if you mix colors with bold (parameter number 1), colors are pushed to their full intensity:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;echo -e &#34;\e[1;33mActually yellow!&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then there&#39;s the parameter number 38. This one awaits other parameters after itself. Either one, either three. In the case of three additional parameters, those parameters indicates the RGB coordinates of the color. So-called &#34;true colors&#34; are only supported by some advanced terminal emulators, but not by xterm&lt;sup&gt;[2]&lt;/sup&gt;. You can try it out with yellow again:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;echo -e &#34;\e[38;0;255;255mActually yellow!&#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the case of only one additional parameter, this parameter should be a number between 0 and 255 (included) corresponding to a color in the 256-colors palette. Now, what is &#34;the 256-colors palette&#34;. Well, while &lt;a href=&#34;https://en.wikipedia.org/wiki/8-bit_color&#34;&gt;there isn&#39;t one unique standard&lt;/a&gt; to store colors in only one byte, &lt;a href=&#34;https://en.wikipedia.org/wiki/Xterm&#34;&gt;xterm&lt;/a&gt; comes with its specific palette which you can find &lt;a href=&#34;http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html&#34;&gt;here&lt;/a&gt;. It seems that 256 colors are supported quite widely.&lt;/p&gt;
&lt;p&gt;This is how this palette work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Codes in the range [0;7] are the 8 primary colors in dark mode (same as produced by the parameters 30 through 37 previously seen)&lt;/li&gt;
&lt;li&gt;Codes in the range [8;15] are the bright version of the 8 primary colors (same as produced by parameters 30 through 37 mixed with bold)&lt;/li&gt;
&lt;li&gt;Codes in the range [16;231] are all the other colorful colors (isn&#39;t that a nice term to designate non gray-level colors). Code 16 is (0, 0, 0) and then coordinates are incremented with regular steps. The first step is a 95 increment, then there are 4 other steps which are 40 increment. So it goes this way:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codehilite&#34;&gt;
&lt;pre&gt;
&lt;code&gt;
    16  (0, 0, 0)
    17  (0, 0, 95)
    18  (0, 0, 135)
    19  (0, 0, 175)
    20  (0, 0, 215)
    21  (0, 0, 255)
    22  (0, 95, 0)
    23  (0, 95, 95)
    24  (0, 95, 135)
    ...
    231 (255, 255, 255)
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Codes in [232;255] are gray levels (R = G = B). It starts at (8, 8, 8) and increments by steps of 10, arriving at (238, 238, 238) after 23 steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, there&#39;s parameter number 39 that sets the foreground color to its default. It can be used as a foreground-color-specific reset.&lt;/p&gt;
&lt;p&gt;Parameters 40 through 49 define the same behavior, but for background color.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&#34;&gt;RGB values for the 8 primary colors in different environments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://gist.github.com/XVilka/8346728#now-supporting-truecolour&#34;&gt;List of terminal emulators supporting true colors&lt;/a&gt;&lt;/p&gt;</summary>
			
				<category term="linux"></category>
			
		</entry>
	
		<entry>
			<title>equitext</title>
			<link href="http://foobuzz.github.io/equitext-blog"/>
			<id>urn:uuid:02d649fa-76fe-5dd9-b6b1-b7f870efcd96</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-03-28T15:42:32Z</updated>
			<summary type="html">

&lt;p&gt;I&#39;ve never been satisfied with the vulnerability of substitution ciphers being the frequencies of characters in texts. My main concern is that it depends on the statistics of the language the message is written in. While languages such as English or French (and most natural languages I guess) sure have distinctive frequency distributions, we can imagine a language where letters appear approximately the same amount of time in written texts. In such case, a frequency analysis isn&#39;t feasible, at least on single letters.&lt;/p&gt;
&lt;p&gt;While I&#39;m no expert in cryptography, I think that this wouldn&#39;t mean that a substitution cipher isn&#39;t broken and I believe plenty of other attacks would still be possible. Brute force, to begin with. The 26 letters of the alphabet offer 26! possible substitution keys. That&#39;s 12 orders of magnitude less than 2^128 yet 128 bit keys are considered weak by today&#39;s standards.&lt;/p&gt;
&lt;p&gt;Anyway, out of curiosity I cogitated about a method that would take a text and somehow transform it in order to produce another text in which every character appears the same amount of time. I ended up with a text-to-text encoding for which I&#39;ve written an implementation in Python in a module called &lt;em&gt;equitext&lt;/em&gt;. Here&#39;s a demo:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;equitext&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#34;A histogram is a graphical representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable (quantitative variable) and was first introduced by Karl Pearson.&#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;histogram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.145&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.09&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===============================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.063&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.059&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.059&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===========================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.054&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.05&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.032&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.032&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.027&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.027&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===========&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.023&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=========&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.018&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=========&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.018&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;======&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.014&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;======&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.014&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;======&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.014&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;====&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.009&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;====&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.009&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;====&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.009&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&#39; ImobKAfgh)levscPwtp.(ydarnqui mrqolb(fevItu.npgiwyasAdch)KP sdc.pqrAnmihtaovfuKegw)lbIP(y huynbqo(iswlfIr.eP)gmtAapvKcd oKyahgsmwe)ntfuIip.PlrvqAd(bc (tawq.vAcplugI)mfsndyoirbPeKh( aeifnrPvtdhqwImgpylu.cb)AKos(.PwtsIboufmipKeAahv gn)yqldrc grPKIvil(dyA)s.hcpuqtbmaeofwn oKs(c)AgP.uhevIlqarmtpwnfydbi vwmhKqlrbf()ietopysPc.IudngAa&#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;histogram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&#39;A histogram is a graphical representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable (quantitative variable) and was first introduced by Karl Pearson.&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The encoded text is about 1.44 more lengthly than the original, although this depends on the size of the alphabet of the original text, that is, the number of unique characters it contains. 1.44 is the number for a message containing only letters of the alphabet. I explain this in the next part.&lt;/p&gt;
&lt;p&gt;Two weeks ago I published &lt;a href=&#34;https://www.reddit.com/r/codes/comments/4af4uc/try_this/&#34;&gt;an encrypted message&lt;/a&gt; on Reddit on the /r/codes subreddit. The message has been first encoded using equitext then encrypted by a substitution whose key is a permutation of the text&#39;s alphabet chosen at random. The post haven&#39;t get much attention, but someone nevertheless figured out interesting properties.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;In a first time we&#39;ll assume that the text to encode is only made of letters of the alphabet, although the encoding works with any Unicode string.&lt;/p&gt;
&lt;p&gt;The text is splitted in chunks of 18 letters (magic number explained in a few lines). Let C be a given chunk. C is one of the many possible combinations of 18 letters. We can define an index on such &lt;em&gt;combinations&lt;/em&gt;. For example, &#39;aaa...a&#39; would be combination number 0, &#39;aaa...b&#39; would be combination number 1, and so on, all the way up to &#39;zzz...z&#39; which would be combination number 26^18-1. Having such an index, we can say that C is chunk number N.&lt;/p&gt;
&lt;p&gt;Meanwhile, we can also define an index on &lt;em&gt;permutations&lt;/em&gt; of the alphabet. For example, the regular &#39;abcde...yz&#39; would be permutation number 0, then &#39;abcde...zy&#39; would be permutation number 1, and so on, all the way up to &#39;zyxw...ba&#39; which would be permutation number 26!-1. Having such an index, we can take its Nth element, where N is the combination index of chunk C. We have then encoded a chunk to a permutation. We are sure that there are at least N permutations because 26^18 &amp;lt;= 26! Actually 18 is the greatest n such that 26^n &amp;lt;= 26!&lt;/p&gt;
&lt;p&gt;The encoded text being a sequence of permutations of the alphabet, every letter has the same number of occurrences in it. That&#39;s all.&lt;/p&gt;
&lt;p&gt;Since each chunk of 18 letters is encoded to a permutation (26 letters), the text grows by a factor 26/18 = 1.44&lt;/p&gt;
&lt;h2&gt;Efficient indexing&lt;/h2&gt;
&lt;p&gt;Finding the index of a given chunk is equivalent to a conversion from base 26 to base 10 where the number in base 26 is represented using letters of the alphabet. Encoding in one direction to the other is a straightforward base-to-base conversion.&lt;/p&gt;
&lt;p&gt;Finding the permutation corresponding to a given index is a bit more involved. It&#39;s done using something called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lehmer_code&#34;&gt;Lehmer code&lt;/a&gt;. In the following paragraphs I try to give a friendly explanation of how it works. I begin by explaining how to find the index of a given permutation, then explain how to find the permutation of a given index.&lt;/p&gt;
&lt;p&gt;There are 26! permutations. We can partition the set of permutations in 26 subsets. The first subset contains all permutations begining with &#39;a&#39;, the second one contains all permutations begining with &#39;b&#39;, and so on. It&#39;s trivial that all these subsets have the same size of 26! / 26 = 25! We can then decide that permutations belonging to the first set (the &#34;a...&#34; set) all have their index between 0 and 25!. The permutations belonging to the &#34;b...&#34; set all have their index between 25! and 2×25!, and so on, all the way up to the &#34;z...&#34; set whose permutations all have their index between 25×25! and 26!. Note that in these bounds given as examples, the upper bound is exclusive.&lt;/p&gt;
&lt;p&gt;Once we&#39;ve identified to what set a permutation belongs to, we perform the same process inside this set, except that we&#39;ve removed the previous letter from the available letters. For example, inside the &#34;b...&#34; set, there would be the &#34;ba...&#34; set, with indexes between 25! and 25!+24!, then the &#34;bc...&#34; set with indexes between 25!+24! and 25!+2×24! (&lt;em&gt;note that we&#39;ve jumped from a to c since b is already consumed&lt;/em&gt;). We iterate over the letters of the permutation and go to the right subset at each iteration according to the letter we read. The final set is associated to only one possible index, which is the index of the permutation.&lt;/p&gt;
&lt;p&gt;As you can see, finding the index of a given permutation is actually a simple computation. Let&#39;s dumb things down even more by considering that there are only three letters &#39;a&#39;, &#39;b&#39; and &#39;c&#39; in the [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] order and we want the index of the &#39;bca&#39; permutation. This index is:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1*2! + 1*1! + 0*0! = 2 + 1 + 0 = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;We take the ordinal of &#39;b&#39; in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] which is 1. We get the first term &lt;code&gt;1*2!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We take the ordinal of &#39;c&#39; in [&#39;a&#39;, &#39;c&#39;] (&lt;em&gt;we&#39;ve removed &#39;b&#39; from the list&lt;/em&gt;) which is 1. We get the second term &lt;code&gt;1*1!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We take the ordinal of &#39;a&#39; in [&#39;a&#39;] (&lt;em&gt;we&#39;ve removed &#39;c&#39; from the list&lt;/em&gt;) which is 0. We get the final term &lt;code&gt;0*0!&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The factorial number system&lt;/h2&gt;
&lt;p&gt;What&#39;s interesting here is that we have the decomposition of &lt;strong&gt;3&lt;/strong&gt; in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Factorial_number_system&#34;&gt;factorial number system&lt;/a&gt;. The factorial number system is a system to write numbers where digits are coefficients of increasing factorial numbers instead of increasing powers. 3 is written 110 in &#34;factorial base&#34; because 3 = 1×2! + 1×1! + 0×0!&lt;/p&gt;
&lt;p&gt;So how do you find the &#34;factorial base&#34; digits of an integer given in decimal base? Because that&#39;s gonna help us convert an integer to a permutation. Well, let&#39;s take 42. It&#39;s 13000 in factorial base. That&#39;s:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1*4! + 3*3! + 0*2! + 0*1! + 0*0!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&#39;s write that explicitly:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1*4*3*2*1 + 3*3*2*1 + 0*2*1 + 0*1 + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can factor 1 from the first 4 terms:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1 * (1*4*3*2 + 3*3*2 + 0*2 + 0) + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the inner-most group, we can factor 2 on the first 3 terms:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1 * (2 * (1*4*3 + 3*3 + 0) + 0) + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside th inner-most group, we can factor 3 on the first 2 terms:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1 * (2 * (3 * (1*4 + 3) + 0) + 0) + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember that this number is 42. From the way we&#39;ve written it, it is now easy to understand how you can get its factoradic digits: if you divide 42 by 1 you end up with a remainder of 0 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;2 * (3 * (1*4 + 3) + 0) + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you divide this by 2, you end up with a remainder of 0 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;3 * (1*4 + 3) + 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you divide this by 3, you end up with a remainder of 0 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1*4 + 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you divide this by 4, you end up with a remainder of 3 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you devide this by 5, you end up with a remainder of 1 and a quotient of 0.&lt;/p&gt;
&lt;p&gt;You stop there, and look at the remainders that you&#39;ve accumulated: 0, 0, 0, 3 and 1. That&#39;s 3100 in reverse.&lt;/p&gt;
&lt;p&gt;A convertion to &#34;base factorial&#34; is very similar to a convertion to a regular base: you recursively divide the quotient by the base until you reach 0 and the digits in the destination base are the remainders in reverse order. Instead that here, instead of &#34;dividing by the base&#34;, you divide by increasing integers: divide by 1, then by 2, then by 3 and so forth.&lt;/p&gt;
&lt;p&gt;Once we have the digits of an index in the factorial number system, it&#39;s easy to get its corresponding permutation. For example, let&#39;s take 3 (110) again with the [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] alphabet. You pop the letter with ordinal 1 from the alphabet: &#39;b&#39;. The alphabet is now [&#39;a&#39;, &#39;c&#39;]. You pop the letter with ordinal 1 from the alphabet: &#39;c&#39;. The alphabet is now [&#39;a&#39;]. You pop the letter with ordinal 0: &#39;a&#39;. The permutation is indeed &#39;bca&#39;.&lt;/p&gt;
&lt;h2&gt;Generalization&lt;/h2&gt;
&lt;p&gt;Equitext is trivially extended to any alphabet. The alphabet specific to the text (that is, the set of characters that the text uses) is extracted from the text thanks to a preliminary pass. It is then ordered using the Unicode code point of each of its characters. The length of chunks of text to be encoded to permutations is deduced from the size N of the alphabet. It&#39;s the greatest n such that N^n &amp;lt;= N!&lt;/p&gt;
&lt;p&gt;The text might require to be padded in order for its length to be divisible by the length of a chunk. The text is padded by repeting the character of the alphabet whose ordinal indicates the length of the pad. The length of the pad can&#39;t be greater than the size of the alphabet because as a pad it has a lesser length than a chunk which itself has a lesser length than the size of the alphabet (otherwise N^n would be greater than N!), so we&#39;ll always have enough characters in the alphabet to encode the length of the pad using only one character.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To install equitext (requires Python 3): &lt;code&gt;pip3 install equitext&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code: &lt;a href=&#34;https://github.com/foobuzz/equitext&#34;&gt;https://github.com/foobuzz/equitext&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message encrypted with a simple substitution that has been preliminary encoded with equitext: &lt;a href=&#34;https://www.reddit.com/r/codes/comments/4af4uc/try_this/&#34;&gt;https://www.reddit.com/r/codes/comments/4af4uc/try_this/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
			
				<category term="math"></category>
			
				<category term="python"></category>
			
		</entry>
	
		<entry>
			<title>Big Bang</title>
			<link href="http://foobuzz.github.io/bigbang"/>
			<id>urn:uuid:ac5e48d2-191d-5842-86ef-9bd950c7832a</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-02-27T12:20:03Z</updated>
			<summary type="html">

&lt;p&gt;&lt;img alt=&#34;Cover of the book&#34; src=&#34;http://i.imgur.com/ZgzbZ8x.jpg&#34; style=&#34;width:140px;float:left;margin-right:15px;&#34;&gt;
I&#39;ve read &lt;em&gt;Big Bang&lt;/em&gt; by Simon Singh. It&#39;s a big piece of literature, about 460 pages written in a tiny font, and I was quite impressed when it was given to me at Christmas, since I&#39;m not a big book reader. However, it was so interesting that I had no trouble finishing it. The author does a wonderful job at telling the long story that leads to the Big Bang theory as it is today (as it was in 2004, actually, the year the book was released).&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;At some moments he doesn&#39;t hesitate to venture into the technical side of things yet he keeps it simple and accessible to anyone with basic middle school education. The way the story is written and its details suggest that the author has been studying a massive amount of documentation for the writing, and the bibliography at the end of the book is a proof of that.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Big Bang&lt;/em&gt; confirms my feeling that a historical depiction of how something was built is the best way to understand how it works. One of the first class that I took in my engineering school was about the working of a CPU. The professor based his course on how processors were built, historically. He started with the basic, early proof-of-concepts, and then explained how components were gradually added, and for what purpose. Of my three years of school, this was definitively the most interesting course. Such a chronological structure leads to a great understanding of the matter and also makes the overall course way more interesting than a raw description.&lt;/p&gt;
&lt;figure&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/G8cbIWMv0rI&#34; width=&#34;420&#34;&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;strong&gt;Carl Sagan explains how Eratosthenes deduced the circumference of the Earth. This is the kind of explanations and stories the book contains, this one in particular is given at the beginning of the book.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;The book does the same thing with the Big Bang, this theory that I knew about but never managed to understand even superficially (I mean, other than &#34;there was some sort of explosion and since then the Universe is expanding&#34;). It explains why the idea emerged in the first place, what were the alternative theories, what observations favored the Big Bang theory rather than another one, etc. It&#39;s a novel and as such, it never forgets to draw up portraits of the scientists involved in the process, the concrete experiments that they were doing, as well as little anecdotes scattered here and there. I loved the little cliffhangers that the author leaves at the end of chapters, giving a hint on how someone is going to discover some amazing thing in the next chapter. This makes it look like a thriller.&lt;/p&gt;
&lt;p&gt;When reading &lt;em&gt;Big Bang&lt;/em&gt; I realized how science makes sense, and how people criticizing it in favor of alternative beliefs just lack knowledge. Things like the Big Bang (before reading the book) or quantum mechanics are so obscure for someone like me who only has a training on classical mechanics that the only way I would think them true is by having confidence in science. And while I always had 100% confidence in it (&lt;em&gt;it works, bitches&lt;/em&gt;), there&#39;s no such thing as an understanding of why it&#39;s justified. And that&#39;s what this book brings. It brings an explanation of how much sense scientific theories make, how solid they are. The usage of the word &lt;em&gt;theory&lt;/em&gt; doesn&#39;t mean that scientists have made an enigmatic bet that their hypothesis might somewhat be true. It means that even when observing how well their hypothesis works, they stay wise and careful in front of the peculiarities of Nature.&lt;/p&gt;
&lt;p&gt;Nevertheless, the book gives a less idealistic vision of scientists that I imagined. I always pictured scientists as perfectly partial and unbiased people, and forgot that they were humans too. &lt;em&gt;Big Bang&lt;/em&gt; shows how scientists can be seduced by a theory not only because of how faithful it is to reality but also because of its beauty or how it corresponds to their &#34;intuition&#34; of how Nature behave (or, worse, how it &lt;em&gt;should&lt;/em&gt; behave). While the simplicity of a theory is really important, which, in a sense, makes the beauty matter not irrelevant, the book shows that some scientists are prone to kill the simplicity of a theory by applying patches to it to make it both compatible with observation and their personal beliefs of how it should work.&lt;/p&gt;
&lt;p&gt;The best example is probably Ptolemy which added epicycles to the orbits of planets so that they could continue to orbit around the Earth and the epicycle thing would explain their visible retrogradations in the sky. Another shocking example is when the dynamic aspect of the Universe was a consequence of Einstein&#39;s general relativity, but Einstein liked a static Universe better, so he added some constant (the cosmological constant) in the equations to make it static. Friedman and Lemaître chose to really study the consequences of the original, patch-less theory, and ended up elaborating the first version of the Big Bang theory.&lt;/p&gt;
&lt;figure&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EYPapE-3FRw&#34; width=&#34;420&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;strong&gt;The great Richard Feynman explains how science works&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The problem is that once you&#39;ve made your point and defended it, it&#39;s hard to change your mind. The more you defend your theory, the harder it is to admit that you were wrong all this time. And it&#39;s really sad when someone seems to no longer base his or her opinion on the more recent data, but on the fact that they&#39;re just too deeply engaged to their view at this point. To a certain extend, the book gave me the impression that this phenomenon had a significant impact on the battle between the defenders of the Big Bang theory and the defenders of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Steady_State_theory&#34;&gt;Steady State theory&lt;/a&gt;. The latter was a new theory that emerged after the Big Bang theory and modeled a static universe instead of an expanding one. It was way more elaborated that the cosmological constant patch. At some point in History, it even explained observations that the Big Bang didn&#39;t.&lt;/p&gt;
&lt;p&gt;At some point in the book, it feels like defenders of each theory are no longer defending their side because it best describes reality, but because they want to be right in front of the other side. Some of their arguments were no longer reasonable but different kinds of sophism instead. Actually, the kind-of-childish term &#34;Big Bang&#34; was first used by Fred Hoyle (defender of the Steady State theory) in order to make fool of the theory which involved some kind of big explosion. Defenders of the Big Bang though it was a nice term, so they adopted it. What takes the cake is that the same Hoyle was the co-author of a paper which explained how heavy elements are created inside stars*, which, at the time, was a better argument for the Big Bang than for the Steady State. The man definitely didn&#39;t know how to defend its theory properly, but fortunately that&#39;s for the good of knowledge.&lt;/p&gt;
&lt;p&gt;*The whole team was: Margaret Burbidge, Geoffrey Burbidge, William Fowler, and Fred Hoyle. Hence the nickname of their monumental paper: &lt;a href=&#34;https://en.wikipedia.org/wiki/B2FH_paper&#34;&gt;B2FH&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img alt=&#34;The first six primary mirror segments being prepped for final cryogenic acceptance testing.&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/James_Webb_Primary_Mirror.jpg/1024px-James_Webb_Primary_Mirror.jpg&#34;/&gt;
&lt;figcaption&gt;&lt;strong&gt;The only thing more badass than this picture is its caption &lt;a href=&#34;https://en.wikipedia.org/wiki/James_Webb_Space_Telescope&#34;&gt;on Wikipedia&lt;/a&gt;: &lt;i&gt;The first six primary mirror segments being prepped for final cryogenic acceptance testing.&lt;/i&gt;&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, if there is one thing that I should remember from this book, it&#39;s that &lt;em&gt;telescopes&lt;/em&gt; are the ultimate referees when it comes to know the Universe. It&#39;s like Feynman said in the video: you can develop the theory you want, to can marketize the theory as you want, you can think of all the arguments you want, you can wish and hope what you want. At the end of day, someone&#39;s going to build a telescope bigger than ever, and its observations will decide of the future of your theory without mercy.&lt;/p&gt;
&lt;p&gt;I&#39;m really looking forward to the launch of the James-Webb Space Telescope in 2018. Those things are knowledge fuel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: 10/10 would read again&lt;/strong&gt;&lt;/p&gt;</summary>
			
				<category term="books"></category>
			
		</entry>
	
		<entry>
			<title>The music I listen to</title>
			<link href="http://foobuzz.github.io/foobar2000"/>
			<id>urn:uuid:1e8cbdbe-becb-5641-b034-725f6ed44f0e</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-01-18T22:36:44Z</updated>
			<summary type="html">

&lt;p&gt;When I switched to Linux last summer, the only software non compatible with Linux that I couldn&#39;t do without was &lt;a href=&#34;https://www.foobar2000.org/&#34;&gt;foobar2000&lt;/a&gt;. I make it work using Wine. There are several reasons I consider this audio player and library manager to be superior to many others. To begin, its GUI is highly customizable via the so-called &#34;Layout Editing Mode&#34;. There are a fair number of useful widgets that you can choose from and place on the screen, using a system of vertical and horizontal splits that you can add recursively. &lt;/p&gt;
&lt;p&gt;Another good feature are the &#34;Global Hotkeys&#34;, which make it possible to map keyboard shortcuts to various commands (pause, next song, change volume, switch the playlist order from random to default, etc), and these shortcuts work even if the player hasn&#39;t the focus. It&#39;s particularly useful when playing video games while listening to music.&lt;/p&gt;
&lt;p&gt;Finally, plugins can be installed, some of which are powerful. My favorite is &#34;Playback Statistics&#34; which keeps track of the time a song has been added to the library, the first time and last time it has been played, and its play count.&lt;/p&gt;
&lt;p&gt;Using this plugin, I like to compute my own little charts and see statistics about the music I listen to. However, exporting the data to a programmatically exploitable format wasn&#39;t as easy as I thought.&lt;/p&gt;
&lt;h2&gt;The ID mystery&lt;/h2&gt;
&lt;p&gt;Playback Statistics (PS) has a feature that allow one to &#34;export data&#34; (resp. &#34;import data&#34;). The intent of this feature is to make it possible to share statistics across different foobar2000 installations. The exported file is an XML file containing one node per song in the library with an attribute for each piece of data. Here&#39;s an example of a node corresponding to one song:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Entry&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;ID=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;eef3112353c1512d&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Count=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;5&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;FirstPlayed=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;130818970132330604&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;LastPlayed=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;130913311506349590&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Added=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;130739450382613924&#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The timestamps for the last three attributes are in the Microsoft &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284%28v=vs.85%29.aspx&#34;&gt;FILETIME format&lt;/a&gt;. It&#39;s the number of 100-nanoseconds since January 1 1601. &lt;a href=&#34;https://blogs.msdn.microsoft.com/oldnewthing/20090306-00/?p=18913/&#34;&gt;Don&#39;t ask me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that the song is identified by an ID and nobody knows how it&#39;s computed from the song. The &lt;a href=&#34;http://wiki.hydrogenaud.io/index.php?title=Foobar2000:Components/Playback_Statistics_v3.x_%28foo_playcount%29&#34;&gt;PS documentation&lt;/a&gt; implies that the ID is computed from the following song&#39;s metadata: artist, title, album, disc number, track number. However, from &lt;a href=&#34;https://github.com/tfriedel/foobar2000-export/issues/1&#34;&gt;GitHub&lt;/a&gt; to &lt;a href=&#34;https://hydrogenaud.io/index.php/topic,103977.msg853596.html#msg853596&#34;&gt;Hydrogen Audio&lt;/a&gt;, nobody succeeded in guessing how the ID is computed from a song.&lt;/p&gt;
&lt;p&gt;I tried to break the mysterious hash myself without success. I did two successive exports separated by a specific song&#39;s listening session. In the two XML files, I spotted the only element that had a PlayCount increment and deduced that it was the song I&#39;d listened to. Note that the order of the songs aren&#39;t always the same, so I couldn&#39;t perform a simple diff and had to actually parse the XML to spot the difference. Having linked one song to its ID, I then tried to brute-force the ID. I tried all the combinations of the metadata said to be used in the documentation, with various separators between the fields, then encoded with various character encodings, then hashed with the most famous hash functions. At the heart of this 4 for-loops imbrication, I finally tested if the mysterious ID was a substring of the obtained hash. This resulted in zero match. I figured that the author could have used a more complicated hashing process. He could even have used a custom salt somewhere in the process. This was hopeless.&lt;/p&gt;
&lt;p&gt;The next logical step was probably either to contact the plugin&#39;s author or to try to decompile the plugin&#39;s dll. But this is when I stumbled upon this &lt;a href=&#34;https://www.hydrogenaud.io/forums/index.php?showtopic=97456&#34;&gt;Hydrogen Audio thread&lt;/a&gt; where a method to link each song of the library to its ID was exposed. This method relies on another plugin, &#34;Text Tools&#34;. This plugin enables the user to export text information about the songs in the library, accessing the songs&#39; metadata. Foobar2000 exposes metadata in the form of variables surrounded by the &lt;code&gt;%&lt;/code&gt; symbol. For example, &lt;code&gt;%title%&lt;/code&gt; gives the song&#39;s title. Fair enough, the PS plugin exposes its own variables (play count, first played, etc) using this format. For example, &lt;code&gt;%play_count%&lt;/code&gt; gives the song&#39;s play count. Wonderful! Using only Text Tools I was then able to export all relevant information about the library!&lt;/p&gt;
&lt;h2&gt;The Music Diary&lt;/h2&gt;
&lt;p&gt;On the Figure 1 (you can right-click on it and click to &#34;Show Image&#34; to see the full-size version), each point represents a tracked song from my library. A tracked song is a song that I listened to at least one time since I&#39;ve installed the Playback Statistics plugin. The plugin increments the play count of a song when the player plays at least one straight minute of it. This leads to misleadings numbers. For example, one of the track I&#39;ve listened the most to is The Fourth Movement of Beethoven&#39;s Fifth Symphony, with a Play Count (PC) of 102. However, this track is about 10 minutes long and I know that I&#39;ve mostly listened only to the last 3 minutes of it. (What an epic finale!)&lt;/p&gt;
&lt;figure&gt;
&lt;img alt=&#34;Graph representing the Play Count on the Y-axis and the first time played in the X-axis&#34; src=&#34;/assets/articles/music-diary.png&#34;/&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The X-axis represents the first time I&#39;ve listened to a song. The Y-axis represents the Play Count of the song as of the writing of this article. It&#39;s not a surprise that the left of the graph, starting a little before June 2013, is flooded with many songs. That&#39;s all the songs I was casually listening to suddenly starting being tracked by the plugin. However, you can obverse the same phenomenon one year later in June 2014, which contains a high concentration of new songs too. That&#39;s because I like to explore new music during the summer holidays. The effect lose strength in the summer of 2015, which I assume is because I was doing an internship and didn&#39;t have as much time as I had during previous summers.&lt;/p&gt;
&lt;p&gt;An interesting phenomenon takes place between September 2013 and February 2014. As you can see, I haven&#39;t discovered many songs in this period. However, the few I did I listened to them a lot of times! Well, this period was when I moved outside my parents&#39; to study in a new city and I didn&#39;t have an Internet connexion in my new apartment. I remember exploring a bit of music at my school&#39;s computers and listening to them a lot in my apartment as I didn&#39;t have much to do.&lt;/p&gt;
&lt;p&gt;I have a few ultra popular songs that I listen to massively. &lt;a href=&#34;https://www.youtube.com/watch?v=zgsDf73rm_0&#34;&gt;Breaking Through by Audiomachine&lt;/a&gt; holds the record with a stratospheric 153 PC. Songs with the highest PC tends to be older, having been listened for the first time around 2013. This makes sense, since the older a song is, the more time I have to listen to it repetitively and increment its PC. My favorite songs that I discovered recently are &lt;a href=&#34;https://www.youtube.com/watch?v=MYSVMgRr6pw&#34;&gt;Take me To Church by Hozier&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=HtPL2YhK6h0&#34;&gt;Take a Look Around by Limp Bizkit&lt;/a&gt;. The former is recent and I discovered it when it became popular worldwide. The latter dates back from 2000 and I just became fond of it when I discovered it last summer. I played it in loop while playing &lt;a href=&#34;http://www.urbanterror.info/home/&#34;&gt;&lt;em&gt;Urban Terror&lt;/em&gt;&lt;/a&gt;, which certainly contributed to its high PC.&lt;/p&gt;
&lt;p&gt;You can see vertical ribs, for example at the beginning of last December or at the beginning of March 2015. That&#39;s when I discover an album. I listen to the whole album in one go. Then I listen to each track individually according to my preferences. Each track then evolves on the album&#39;s vertical line.&lt;/p&gt;
&lt;p&gt;Finally, you can see how serious I am each year before my finals, during a little period around the end of April and the beginning of May, where I don&#39;t listen to any new song, except for &lt;a href=&#34;https://www.youtube.com/watch?v=BPbSCENrY4g&#34;&gt;Audiomachine&#39;s Millennium&lt;/a&gt; in May 2015. Indeed, I remember discovering it at the end of &lt;a href=&#34;https://www.youtube.com/watch?v=1DiMjOWlbmM&#34;&gt;this movies montage&lt;/a&gt; during a procrastinating session.&lt;/p&gt;
&lt;h2&gt;The Fluff Principle&lt;/h2&gt;
&lt;p&gt;The Fluff Principle is a term invented by &lt;a href=&#34;https://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29&#34;&gt;Paul Graham&lt;/a&gt; in a &lt;a href=&#34;http://www.paulgraham.com/hackernews.html&#34;&gt;February 2009 article&lt;/a&gt;. The Hacker News creator gives the following definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;on a user-voted news site, the links that are easiest to judge will take over unless you take specific measures to prevent it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He explains that one type of fluff is short content. It&#39;s faster to consume a joke or a picture than an in-depth article. Therefore, at equal quality, the former will gain more upvotes per unit of time than the latter.&lt;/p&gt;
&lt;p&gt;Well, the Fluff Principle also holds for my music statistics. It&#39;s faster to listen to a short song than to a long one. Therefore, at equal quality, short songs will gain more PC by unit of time than long ones. For example, my top one song, Audiomachine&#39;s Breaking Through (153 PC), is only 1:18 long. I know that I&#39;ve listened to another song, &lt;a href=&#34;https://www.youtube.com/watch?v=SNuwOYQPr-s&#34;&gt;Seven Angels by Avantasia&lt;/a&gt; a crazy amount of time, each time the whole thing. However, this song is 14:17, so it&#39;s not quite a surprise that its PC is only 31. Now if I want to know how much time I&#39;ve been listening to each song, that is, the total amount of time I was listening while the song was playing, I have to multiple the PC by the song&#39;s duration. &lt;em&gt;Breaking Through&lt;/em&gt; hits 153×(1×60+18) = 11,934 seconds. &lt;em&gt;Seven Angels&lt;/em&gt; hits 37×(14×60+17) = 31,709 seconds. Wow! I&#39;ve listened to &lt;em&gt;Seven Angels&lt;/em&gt; way more than to &lt;em&gt;Breaking Through&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Following this observation, we can define the Normalized Play Count (NPC) as the following: NPC(song) = PC(song)×Duration(song)/AD where AD is the Average Duration of a tracked song. This way, for songs which have a duration close to the average duration, their NPC will be approximately equal to their PC. The NPC plays an important role for particularly short songs, for which it diminishes their importance, and for long songs, for which it increases the importance.&lt;/p&gt;
&lt;p&gt;The table on Figure 2 shows the top 20 songs in my library sorted by their NPC, in the reverse order. This table contains several anomalies that are due to the fact that the PS plugin increments the PC of a song only when 1 minute of it is played. Anomalies are very long tracks whose duration tends to give them a high NPC when in reality I listened only to a part of them. The anomalies are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 1:&lt;/strong&gt; It&#39;s 20 minutes long, but I know I almost never listen beyond the 10 minutes mark.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 2:&lt;/strong&gt; It&#39;s 10 minutes long, but I almost always listen to its finale, that is the last 3-4 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 6:&lt;/strong&gt; Final song of the album. I usually only listen to the first 3-4 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 9:&lt;/strong&gt; I never listen to the Quasimodo Suite, which is quite lengthy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Rank&lt;/th&gt;&lt;th&gt;Artist&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;NPC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Piano Concerto No.5: Mvt. I&lt;/td&gt;&lt;td&gt;384.107&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Symphony No.5 - IV Allegro&lt;/td&gt;&lt;td&gt;320.7867&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Dvorak&lt;/td&gt;&lt;td&gt;Symphony No. 9: II. Largo&lt;/td&gt;&lt;td&gt;143.867&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Avantasia&lt;/td&gt;&lt;td&gt;The Seven Angels&lt;/td&gt;&lt;td&gt;109.836&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;&lt;td&gt;M83&lt;/td&gt;&lt;td&gt;Raconte-Moi Une Histoire&lt;/td&gt;&lt;td&gt;97.736&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Awolnation&lt;/td&gt;&lt;td&gt;Knights of Shame&lt;/td&gt;&lt;td&gt;96.200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Audiomachine&lt;/td&gt;&lt;td&gt;Rising Dawn&lt;/td&gt;&lt;td&gt;95.217&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Zack Hemsey&lt;/td&gt;&lt;td&gt;Vengeance&lt;/td&gt;&lt;td&gt;90.881&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;&lt;td&gt;Santa Esmeralda&lt;/td&gt;&lt;td&gt;The House of the Rising Sun + Quasimodo Suite&lt;/td&gt;&lt;td&gt;85.195&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;&lt;td&gt;Limp Bizkit&lt;/td&gt;&lt;td&gt;Take a Look Around&lt;/td&gt;&lt;td&gt;83.250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;&lt;td&gt;Mahler&lt;/td&gt;&lt;td&gt;Symphony No. 1 - Mvt. IV&lt;/td&gt;&lt;td&gt;81.503&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Symphony No.5 - II Adante con moto&lt;/td&gt;&lt;td&gt;80.673&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;&lt;td&gt;Macklemore &amp;amp; Ryan Lewis&lt;/td&gt;&lt;td&gt;Wing$&lt;/td&gt;&lt;td&gt;80.525&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;&lt;td&gt;Hozier&lt;/td&gt;&lt;td&gt;Take Me to Church&lt;/td&gt;&lt;td&gt;79.947&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;&lt;td&gt;Hans Zimmer&lt;/td&gt;&lt;td&gt;Mombasa&lt;/td&gt;&lt;td&gt;78.914&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;&lt;td&gt;Edwyn Collins&lt;/td&gt;&lt;td&gt;A Girl Like You&lt;/td&gt;&lt;td&gt;78.295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Moonlight Sonata - Third Movement&lt;/td&gt;&lt;td&gt;78.282&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Piano Concerto No.5: Mvt. II&lt;/td&gt;&lt;td&gt;75.685&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;&lt;td&gt;M83&lt;/td&gt;&lt;td&gt;Wait&lt;/td&gt;&lt;td&gt;73.653&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Piano Concerto No.5: Mvt. III&lt;/td&gt;&lt;td&gt;72.167&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 2&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Well, I sure like Beethoven.&lt;/p&gt;</summary>
			
				<category term="software"></category>
			
				<category term="python"></category>
			
				<category term="data"></category>
			
		</entry>
	
		<entry>
			<title>The np problem, Reddit edition</title>
			<link href="http://foobuzz.github.io/reddit-np"/>
			<id>urn:uuid:3f739db6-2d48-52ab-bcd9-5486b3019903</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2015-12-04T23:00:00Z</updated>
			<summary type="html">

&lt;p&gt;Have you ever been redirected to a so-called read-only version of Reddit? That&#39;s a thing. For example, check out &lt;a href=&#34;https://np.reddit.com/r/books&#34;&gt;np.reddit.com/r/books&lt;/a&gt;. No voting arrows, no button to comment even when logged in, and a little message at the top of the subreddit: &#34;You have been linked to a read-only version of this subreddit. Please respect the community by not voting.&#34; All because the little &lt;code&gt;np&lt;/code&gt; (&#34;No Participation&#34;) subdomain was used. Now if you try the same thing with /r/askreddit: &lt;a href=&#34;np.reddit.com/r/askreddit&#34;&gt;np.reddit.com/r/askreddit&lt;/a&gt;, everything is absolutely normal, no difference with the regular Reddit. Quite strange, isn&#39;t it. It doesn&#39;t stop there. For example, &lt;a href=&#34;https://sf.reddit.com/r/teenagers/&#34;&gt;sf.reddit.com/r/teenagers&lt;/a&gt; displays only the self-post of the subreddit, because of the &lt;code&gt;sf&lt;/code&gt; (SelF-posts) subdomain. But that only works for /r/teenagers. So, what the well?&lt;/p&gt;
&lt;h2&gt;How Reddit subdomains work&lt;/h2&gt;
&lt;p&gt;One good thing about reddit is that it&#39;s open-source. So one can inspect &lt;a href=&#34;https://github.com/reddit/reddit/blob/master/r2/r2/config/middleware.py#L201-L239&#34;&gt;the code related to subdomains handling&lt;/a&gt; to understand how it works. I did read the code, and this is what I discovered.&lt;/p&gt;
&lt;p&gt;Reddit accepts subdomains that indicates the language with which the site should be displayed. What&#39;s interesting is that Reddit doesn&#39;t have a predefined list of strings that are accepted as a language subdomain, but uses a regular expression instead: &lt;code&gt;\A\w\w(-\w\w)?\Z&lt;/code&gt;. So, basically, any sequence of two alphanumerical characters, optionally followed by a dash and another such sequence is accepted. For example, &lt;code&gt;zz&lt;/code&gt; or &lt;code&gt;an-42&lt;/code&gt; are valid language subdomains, even though they correspond to no language code in the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1 specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What does Reddit do with such code? Well, for some real languages such as French (&lt;code&gt;fr&lt;/code&gt;) or Japanese (&lt;code&gt;ja&lt;/code&gt;), the web interface is actually translated into the language. For the more esoteric codes that I invented in the paragraph above, it does nothing to the interface. However, for any given code, it performs one thing: in the HTML of the web page, it sets the value of the &lt;code&gt;lang&lt;/code&gt; attribute of the &lt;code&gt;html&lt;/code&gt; root tag to the code provided. So, when you browse to &lt;a href=&#34;https://an-42.reddit.com/&#34;&gt;an-42.reddit.com&lt;/a&gt;, the HTML source of the page starts with:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;http://www.w3.org/1999/xhtml&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;an-42&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xml:lang=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;an-42&#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Using and abusing CSS&lt;/h2&gt;
&lt;p&gt;On Reddit, despite doing the hard and benevolent work of maintaining subreddits, moderators have only access to quite rudimentary tools. Actually the improvement of moderator tools is always brought to the table when the admins risk themselves into asking the community for feedback. This issue was critical when last summer reddit let go the employee in charge of the relations between the moderators of /r/IamA and the celebrities doing interviews, all without warning the moderators, generating a &lt;a href=&#34;http://www.dailydot.com/news/reddit-revolt-blackout-2015-ama-victoria/&#34;&gt;massive reddit-wide drama&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, it&#39;s a matter of fact that there are no moderator tools to customize the user experience depending on the subdomain used, nor tools to add custom modules or text areas anywhere in the subreddit page. However, the moderators have access to one thing: they can edit the CSS stylesheet used to render the subreddit. And that&#39;s the key to everything. CSS is like editing in film-making; no matter what material you have, you can transform it into whatever you want. CSS is power.&lt;/p&gt;
&lt;p&gt;The basic idea is that if you prefix some CSS rules with the &lt;code&gt;body:lang(np)&lt;/code&gt; selector, the rule will only apply to pages whose &lt;code&gt;html&lt;/code&gt; tag have their &lt;code&gt;lang&lt;/code&gt; attribute set to &lt;code&gt;np&lt;/code&gt;. So, as a Reddit moderator, you can effectively define rules for specific subdomains. You can then use the power of CSS to fully customize the page for this subdomain. You can, especially, make things disappear using the &lt;code&gt;display: none&lt;/code&gt; property:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;usertext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sidebox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;commentingAs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;markdownEditor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;return reply(this)&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;],&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helplink&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;important&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, you can make new things appear using the &lt;code&gt;content&lt;/code&gt; CSS property coupled with the &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; selector:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;siteTable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;before&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;You have been linked to a read-only version of this subreddit. Please respect the community by not voting.&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;800&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F6E69F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;305&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;solid&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;small&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A drawback of adding content using this method is that the inserted text is not selectable. This can be frustrating from a user-experience point of view.&lt;/p&gt;
&lt;p&gt;The code snippets provided above come from the actual stylesheet provided by the /r/NoParticipation subreddit, which is dedicated to instruct moderators on how to &#34;install&#34; the &#34;No Participation mode&#34; on their own subreddits. In the next part, I explain how such a subreddit was born and why moderators would want to add a &#34;No Participation mode&#34; to their subreddit.&lt;/p&gt;
&lt;h2&gt;Combating cross-subreddit contamination with the No Participation mode&lt;/h2&gt;
&lt;p&gt;There are such things known as the &lt;em&gt;meta&lt;/em&gt; subreddits. On such subreddits, users share links and comment about what happen on Reddit. For example, /r/BestOf is for comments which are awesome in some way and which constitutes the &#34;best of&#34; Reddit. /r/ThreadKillers is for comments which answer a question or a request in such a comprehensive way that any additional comment from other users is not necessary. /r/DepthHub is for comments which answer a question in depth. /r/SubredditDrama is for following flame-wars going on Reddit.&lt;/p&gt;
&lt;p&gt;The subreddits these meta-subreddits link to sometimes are little subreddits or even &lt;em&gt;niche&lt;/em&gt; subreddits, for example dedicated to specific hobbies. The problem is that meta-subreddits&#39; users, instead of just being spectators of what&#39;s happening on Reddit, would sometimes go on and enter the show, voting on comments of the thread linked, posting comments themselves and so on. On top of disrupting the normal flow of upvotes and downvotes and disrespect the explicit and implicit submission guidelines of the subreddits they were showing up in, users would sometimes perform &lt;em&gt;vote brigading&lt;/em&gt;, that is, massively downvoting a opinion they disagree with so that it would be buried in the abyss of the comments and become invisible.&lt;/p&gt;
&lt;p&gt;To combat this problem, redditor /u/KortoloB had an idea. He figured out the technical elements explained in the previous part and wrote a &#34;no participation&#34; stylesheet dedicated to the &lt;code&gt;np&lt;/code&gt; subdomain. This is the stylesheet which contain the snippets presented in the previous part. He created the subreddit &lt;a href=&#34;https://www.reddit.com/r/noparticipation&#34;&gt;/r/NoParticipation&lt;/a&gt; to host and support his idea. He abstracted the technical working of the stylesheet into what he calls the &lt;em&gt;No Participation mode&lt;/em&gt; and wrote instruction on how to install the No Participation mode on one&#39;s subreddit (basically instructing to copy and paste the stylesheet).&lt;/p&gt;
&lt;p&gt;To make /u/KortoloB&#39;s idea work reddit-wide, there were two additional conditions: that regular subreddits install the No Participation Mode, and that the meta subreddits&#39; submissions point to the No Participation mode of other subreddits. I don&#39;t know the exact time-line of events, but as of today, the NP mode is deployed on a lot of subreddits and the system works pretty well. &lt;a href=&#34;https://www.reddit.com/r/NoParticipation/wiki/userlist&#34;&gt;This page&lt;/a&gt; lists all the subreddits that have No Participation installed, as well as meta-subreddits that instruct users to only post links pointing to the NP version of a subreddit, some of them requiring it (i.e. removing posts that don&#39;t respect the rule).&lt;/p&gt;
&lt;h2&gt;Reaction of the community and of the reddit staff&lt;/h2&gt;
&lt;p&gt;My impression as a regular redditor is that the No Participation thing caused and is still causing a lot of confusion in the Reddit community.&lt;/p&gt;
&lt;p&gt;Most redditors know that moderators tools a quite limited and seeing voting arrows disappearing depending on the subdomain in the URL gives them the impression that the No Participation mode must be some kind of official Reddit feature. Furthermore, to even more discourage users to participate in the No Participation mode, some moderators launched the rumor that removing the &lt;code&gt;np&lt;/code&gt; subdomain and reloading the page to participate would result in them being banned. However, moderators have no way to detect such behavior and admins have nothing to do with the No Participation mode. Technically, you don&#39;t even have to reload the page to participate, but just to disable the styles defined by the moderators. Since Reddit delivers the moderator stylesheet as a separate CSS file upon a client request, it&#39;s fairly easy with any browser&#39;s development tools to disable only the moderators styles.&lt;/p&gt;
&lt;p&gt;When confused users would ask in several threads what the hell the No Participation mode was, some would answer by only giving a few bullet points about what this mode changed, in a tone that would validate the false idea that it&#39;s an official reddit feature. Some other would accurately explain that it&#39;s nothing more than a hack from the moderators that exploit the &lt;code&gt;np&lt;/code&gt; language subdomain. Some would let think that moderators have a direct tool to customize a subreddit depending on the language, not clarifying that elements of the page are still there but just hidden. Fortunately, some other would accurately explain that it&#39;s a CSS hack.&lt;/p&gt;
&lt;p&gt;A rumor that became popular is that the &lt;code&gt;np&lt;/code&gt; language subdomain is for the Nepalese version of Reddit. In fact, the Nepalese language code is &lt;code&gt;ne&lt;/code&gt;, not &lt;code&gt;np&lt;/code&gt; (the &lt;em&gt;location&lt;/em&gt; code of Nepal is &lt;code&gt;NP&lt;/code&gt;, but Reddit&#39;s subdomain are not made for locations code). Furthermore, as explained in the first part of this article, Reddit accept any combination of two letters as the language subdomain. &lt;code&gt;np&lt;/code&gt; corresponds to no language according to the ISO standard.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://www.reddit.com/r/blog/comments/2c63wg/how_reddit_works&#34;&gt;2014 thread&lt;/a&gt; about the Reddit official blogpost &lt;em&gt;How reddit works&lt;/em&gt;, when a user asked about the No Participation mode, the admin /u/cupcake1713 &lt;a href=&#34;https://www.reddit.com/r/blog/comments/2c63wg/how_reddit_works/cjcbsda?context=1&#34;&gt;clarified&lt;/a&gt; that it wasn&#39;t actually something from the Reddit staff and called it a &#34;crappy CSS hack&#34; (and stroke the &#34;crappy&#34; out later, probably by remorse after No Participation creator answered to her comment and said being a little bit affected that his idea was denigrated so much by the admins). She also pointed out that the admins realized quite recently (relatively to the date of her comment) that the NP stylesheet was hiding the &#34;report&#34; button on submissions (a button to report abuse), that this was a &#34;huge problem&#34; and that if the staff would have spotted this problem sooner they would have stop the spread of this thing. The no participation stylesheet is since fixed and doesn&#39;t hide the report button.&lt;/p&gt;
&lt;p&gt;Since then, other subreddits have customized other subdomains for other purposes (cf. &lt;code&gt;sf&lt;/code&gt; on /r/teenagers for showing only self-posts). Last summer, admins said that they&#39;ll deploy better moderation tools by 2016. My bet is that it won&#39;t include any non-participation related stuff. It&#39;s too easy to override and it probably wouldn&#39;t scale well. I just want moderators to be able to add custom text boxes in the page without CSS so that the text is selectable. There&#39;s something deeply wrong with non-selectable text.&lt;/p&gt;</summary>
			
				<category term="reddit"></category>
			
		</entry>
	
		<entry>
			<title>Datetime in Python</title>
			<link href="http://foobuzz.github.io/datetime-python"/>
			<id>urn:uuid:230550b3-4c8e-5f32-8c51-fd3701edf457</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2015-11-25T23:00:00Z</updated>
			<summary type="html">

&lt;p&gt;Last Friday I spent two hours fighting with the datetime class from Python&#39;s datetime module. I originally thought that a datetime object represented a single point in time, which is not always the case. I sum up with a few bullets points what I learned about this module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In its simplest form, a datetime object is just a date and a time as you would write it down on a piece of paper. It&#39;s a year, a month, a day, and, optionally, an hour, a minute, a second and some microseconds (the &#39;time&#39; part of &#39;datetime&#39;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, in this simplest form, a datetime object does not represent a given point in time because it depends on the timezone in which you consider your date and time. It&#39;s up to interpretation. Such datetime objects are called &lt;em&gt;naive&lt;/em&gt;. You can make a datetime object &lt;em&gt;aware&lt;/em&gt; by giving to it the timezone that should be used to interpret this date and time. An &lt;em&gt;aware&lt;/em&gt; datetime object does represent a given point in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The optionnal timezone carried by a datetime object is given by the &lt;code&gt;tzinfo&lt;/code&gt; attribute, whose value is of type &lt;code&gt;tzinfo&lt;/code&gt;. The tzinfo class is an abstract base class, meaning you can&#39;t directly instanciate a tzinfo object. You must instanciate a subclass of tzinfo, such as &lt;code&gt;timezone&lt;/code&gt;. But to construct a timezone object, you must give it a &lt;code&gt;timedelta&lt;/code&gt; object. The timedelta class represents a difference between two datetimes. When used to construct a timezone, it indicates the offset in relation to UTC. For example, &lt;code&gt;timezone(timedelta(hours=2))&lt;/code&gt; is a valid tzinfo object which represents the timezone UTC+2. &lt;code&gt;timezone.utc&lt;/code&gt; is a shortcut for &lt;code&gt;timezone(timedelta(0))&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most methods which return a datetime object return a &lt;em&gt;naive&lt;/em&gt; object. The method &lt;code&gt;now&lt;/code&gt; returns the local and naive date and time; the method &lt;code&gt;utcnow&lt;/code&gt; returns the UTC naive date and time. Since Python 3.2, the &lt;code&gt;strptime&lt;/code&gt; method can produce an aware datetime object from a string. The string must contain the timezone in the &lt;code&gt;+HHMM&lt;/code&gt; or &lt;code&gt;-HHMM&lt;/code&gt; format (for example &lt;code&gt;+0200&lt;/code&gt; for UTC+2), and the placeholder to use is &lt;code&gt;%z&lt;/code&gt; to capture the timezone part.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practical example&lt;/h2&gt;
&lt;p&gt;Let&#39;s say you&#39;ve acquired such a string representating a date and a time: &lt;code&gt;Mon Nov 23 20:06:13 CET 2015&lt;/code&gt;. It&#39;s actually the default output&#39;s format of the &lt;code&gt;date&lt;/code&gt; command in bash. Let&#39;s say you want to write a Python script that tells you the exact time difference between the moment the script is executed and the date and time represented by this string.&lt;/p&gt;
&lt;p&gt;We&#39;re in bad luck here because Python won&#39;t be able to tell us to what timezone &lt;code&gt;CET&lt;/code&gt; corresponds to. Remember, it can only parse timezones if they&#39;re in the form &lt;code&gt;+HHMM&lt;/code&gt;. So we need to do some basic research. It turns out that CET stands for Central European Time and is UTC+1.&lt;/p&gt;
&lt;p&gt;Now that we have such knowledge, a solution is to replace &lt;code&gt;CET&lt;/code&gt; by &lt;code&gt;+0100&lt;/code&gt; in the string then let Python produces an aware datetime object.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;DATETIME_STRING&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#39;Mon Nov 23 20:06:13 CET 2015&#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DATETIME_STRING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#39;CET&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#39;+0100&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strptime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&#39;%a %b &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; %H:%M:%S %z %Y&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we need the current time. There are two functions to get the current time: &lt;code&gt;now&lt;/code&gt; or &lt;code&gt;utcnow&lt;/code&gt;. The problem with &lt;code&gt;now&lt;/code&gt; is that it returns the current local time. So we would need to figure out what is the local timezone, which isn&#39;t straightforward (more on that later). &lt;code&gt;utcnow&lt;/code&gt; returns the UTC time, so we know the timezone by definition. Note that even if we know the timezone, &lt;code&gt;utcnow&lt;/code&gt; still returns a &lt;em&gt;naive&lt;/em&gt; object, so we&#39;ll have to manually set the timezone to UTC:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcnow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tzinfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Getting an aware datetime object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now subtract the two datetime objects to obtain a timedelta object, which has the fancy &lt;code&gt;seconds&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dt&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Prints the timespan in seconds between dt and now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Getting the local timezone&lt;/h2&gt;
&lt;p&gt;In the last part, another strategy would have been to use the &lt;code&gt;now&lt;/code&gt; to obtain the local time and then set the local timezone to the datetime object obtained. But getting the local timezone isn&#39;t easy. I haven&#39;t found any function in the documentation doing that, and posts on the subject on StackOverflow advice using the &lt;code&gt;tzlocal&lt;/code&gt; module, which isn&#39;t present in the standard library.&lt;/p&gt;
&lt;p&gt;It&#39;s still possible with the vanilla datetime module.&lt;/p&gt;
&lt;p&gt;First, a solution that would work sometimes:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcnow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;local_timezone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we get the timezone as the difference between &lt;code&gt;now&lt;/code&gt; and &lt;code&gt;utcnow&lt;/code&gt;. But since the two functions are not executed at the exact same time, the difference doesn&#39;t produce a timedelta object with a whole number of minutes, which is the condition for a timedelta to be used to construct a timezone. We get a whole number of minutes by rounding the number of seconds divided by 60. Then we construct a timezone thanks to a new timedelta.&lt;/p&gt;
&lt;p&gt;Now imagine that this code runs on a &lt;em&gt;very&lt;/em&gt; slow computer and more than a minute is gone between the execution of the two functions, and you&#39;ve got a corrupted timezone. So, it doesn&#39;t really work.&lt;/p&gt;
&lt;p&gt;To make it work we can use a timestamp. Python can parse POSIX timestamp into datetime objects. We can use &lt;code&gt;fromtimestamp&lt;/code&gt; to get the local datetime from a timestamp and &lt;code&gt;utcfromtimestamp&lt;/code&gt; to get the UTC datetime from the same timestamp, then substract the two, which, this time, will represent the exact same instant:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;TIMESTAMP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dt_utc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcfromtimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dt_local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dt_local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dt_utc&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;local_timezone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, to be perfectly honnest, I&#39;m still not absolutely convinced that this would work 100% of the time. Depending on the implementation of the &lt;code&gt;fromtimestamps&lt;/code&gt; methods, there may exist edge cases causing trouble some times. I don&#39;t know. At the end of the day, the true way to get the timezone is to look at the operating system&#39;s specific configuration file containing such information, which is set by the user when it installs the operating system. This is what the &lt;code&gt;tzlocal&lt;/code&gt; module does by the way. Python probably does it too when it does anything UTC.&lt;/p&gt;</summary>
			
				<category term="programming"></category>
			
				<category term="python"></category>
			
		</entry>
	
		<entry>
			<title>Why Firefox was losing track of my history</title>
			<link href="http://foobuzz.github.io/firestory"/>
			<id>urn:uuid:7643553c-80e9-58ac-9f95-27bc1b22562c</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2015-06-30T22:00:00Z</updated>
			<summary type="html">

&lt;p&gt;A few months ago I encrypted my Firefox profile. It contains my history, bookmarks and most importantly, authentification cookies that I keep for websites I find more conveniant to stay logged in. Those are things I prefer to be encrypted for obvious privacy and security reasons.&lt;/p&gt;
&lt;p&gt;The process of encrypting a Firefox profile goes as follow: first, you need to know where the profile is located in the disk. On Windows, it&#39;s a directory which sits at {User direcory}\AppData\Roaming\Mozilla\Firefox\Profiles\{the profile directory}. Then you need to use an encryption software such as TrueCrypt to put this directory in an encrypted container. Once you have this container, this is how a software like TrueCrypt works: when you open a container with it, it&#39;ll query you with the password and if you enter the correct one it&#39;ll &lt;em&gt;mount&lt;/em&gt; the container as if it was an external storage device. On Windows, this makes a new disk appear (you know like C: or D: or whatever) and all the content of the container becomes available at this disk. TrueCrypt lets you choose the letter of the disk on which you want to mount the container.&lt;/p&gt;
&lt;p&gt;In this case, the content of the container is a Firefox profile, so you have to tell Firefox how to access it once it&#39;s mounted. This can be done using the &lt;a href=&#34;https://support.mozilla.org/en-US/kb/profile-manager-create-and-remove-firefox-profiles&#34;&gt;Firefox profile manager&lt;/a&gt;. In fact Firefox let&#39;s you create an arbitrary number of profiles. A profile has a name, and a &lt;em&gt;path&lt;/em&gt; indicating where the actual profile directory is on the computer. Here, the strategy is to choose a letter by convention, which will be the letter of the drive onto which we&#39;re always going to mount the Firefox profile container. For example, we can take R:\ (I prefer letters at the end of the alphabets because Windows uses letters at the begining at the alphabet to automatically mount external devices). So we&#39;re gonna create a Firefox profile and set its path to R:\&lt;/p&gt;
&lt;p&gt;When all this set up is ready, when you want to browse Firefox, first you mount the profile container to R:\ and then you open Firefox with the corresponding profile. When you finish browsing, you close Firefox and you dismount the container. That is a dull process, so you can, like me, write some little batch script that&#39;ll make it almost transparent: it just asks me the password when I click on the Firefox icon and does the job of mounting before opening Firefox and dismounting when I close Firefox.&lt;/p&gt;
&lt;p&gt;This was not intented to be a tutorial on how to encrypt a Firefox profile, but just an introduction to the rest of this article. &lt;a href=&#34;https://nirklars.wordpress.com/2012/10/25/encrypt-firefox-thunderbird-profile-truecrypt/&#34;&gt;This is a step-by-step guide on how to encrypt a Firefox profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you create a container, you need to indicate the size of the container. Before encryption, my profile weighted around 230 MB, so I figured that 500 MB was enough for the container. Well, in fact, Firefox had a little surprise for me.&lt;/p&gt;
&lt;p&gt;A few weeks after I had set up my encrypted profile, I noticed that Firefox was losing old history. I never delete my history. It goes (went) all the way to more than six months, actually all the way to when I started my computer for the first time. I was first alerted by auto-completion fails. Having a massive history lets Firefox performs some very helpful and comprehensive auto-completion magic in the address bar; but this time it wasn&#39;t even able to auto-complete &#34;reddit.com/r/askr&#34;. What the hell was going on. Then I discovered in the Library window that there was nothing more than &#34;This month&#34;. I was &lt;em&gt;mad&lt;/em&gt;. My data had disappeared.&lt;/p&gt;
&lt;p&gt;After some googling I found out why.&lt;/p&gt;
&lt;p&gt;It turns out that by default, Firefox delete old history based on some expiration criterias. &lt;a href=&#34;https://mxr.mozilla.org/mozilla-central/source/toolkit/components/places/nsPlacesExpiration.js&#34;&gt;This is the source code&lt;/a&gt; of the program doing this slanderous job.&lt;/p&gt;
&lt;p&gt;Look at this:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;// This percentage of disk size is used to protect against calculating a too&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// large database size on disks with tiny quota or available space.&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DATABASE_TO_DISK_PERC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is not much space available on the disk, the history database can&#39;t take up more than 2% of this available space. My container has a size of 500 MB, but about 230 MB are already taken by other stuff (bookmarks, thumbnails, extensions, etc), so there&#39;s 270 MB actually available. So, the maximum size of the database was 5.4 MB. That&#39;s not much.&lt;/p&gt;
&lt;p&gt;Then there&#39;s this:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;// This is the average size in bytes of an URI entry in the database.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Magic numbers are determined through analysis of the distribution of a ratio&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// between number of unique URIs and database size among our users.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Based on these values we evaluate how many unique URIs we can handle before&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// starting expiring some.&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URIENTRY_AVG_SIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firefox computes the maximum number of URIs it can hold in the database thanks to an average URI size, whose value is set to 1.6 KB. With 5.4 MB available, it means that you can store up to 3375 URIs. I don&#39;t know about you, but for me, that&#39;s about 15 days of browsing the web.&lt;/p&gt;
&lt;p&gt;So, this is why my history was only available for 2 weeks.&lt;/p&gt;
&lt;p&gt;The solution to this problem was quite easy. Actually all this hardware calculation for the maximum number of URIs is used only if the maximum size isn&#39;t set by the user. There&#39;s no regular settings menu to set this preference, I had to go in &lt;code&gt;about:config&lt;/code&gt;. According to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_Expiration&#34;&gt;this&lt;/a&gt;, there should be 2 keys relative to the limit of URIs: &lt;code&gt;places.history.expiration.max_pages&lt;/code&gt; which can be set by the user to his convenience and &lt;code&gt;places.history.expiration.transient_current_max_pages&lt;/code&gt;, a read-only copy of the previous key destined to other components which would want to access this information. When I finally searched for the keys, only the read-only one was there (and its value was 3274, close but not equal to my estimation above, that&#39;s because I rounded the numbers). According to &lt;a href=&#34;http://www.tomshardware.co.uk/answers/id-2088014/firefox-configuration-issue.html&#34;&gt;this forum post&lt;/a&gt;, I simply could create a brand new key called &lt;code&gt;places.history.expiration.max_pages&lt;/code&gt; and do my business with it. Which I did, setting its value to one fucking million. I was glad to see that its twin key immediatly updated itself with the new value, indicating that it worked.&lt;/p&gt;</summary>
			
				<category term="software"></category>
			
				<category term="data"></category>
			
		</entry>
	
</feed>