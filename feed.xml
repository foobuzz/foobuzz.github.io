<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>foobuzz</title>
	<link href="http://foobuzz.github.io" rel="alternate"></link>
	<link href="http://foobuzz.github.io/feed" rel="self"></link>
	<updated>2020-10-12T14:13:41Z</updated>
	<id>urn:uuid:f38f868c-f9e6-4401-8119-e4ef9777aee6</id>
	
		<entry>
			<title>How Covid Spreads</title>
			<link href="http://foobuzz.github.io/covid-spread"/>
			<id>urn:uuid:2f4e3ba7-e3d5-5693-bc42-a336ce7d6d32</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2020-10-12T14:13:41Z</updated>
			<summary type="html">

&lt;p&gt;&lt;a href=&#34;https://www.theatlantic.com/health/archive/2020/09/k-overlooked-variable-driving-pandemic/616548/&#34;&gt;Very informative article&lt;/a&gt; from The Atlantic. TL;DR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The spread of the virus obeys the Pareto principle: something like 80% of the contaminations comes from 20% of the infected. In other words, if in average one infected person contaminates x other people, that x is the average between many 0s and a few big numbers. In other words, the virus spreads in clusters.&lt;/li&gt;
&lt;li&gt;Such dispersion seems to be the result of properties of &lt;em&gt;events&lt;/em&gt; rather than properties of the infected people themselves (we talk about super-spreaders when we should talk about super-spreading events). Events to avoid are described by the 3 C&#39;s: &lt;strong&gt;C&lt;/strong&gt;rowds in &lt;strong&gt;C&lt;/strong&gt;losed spaces in &lt;strong&gt;C&lt;/strong&gt;lose contact.&lt;/li&gt;
&lt;li&gt;Backward tracing is preferable to forward tracing. Forward tracing won&#39;t yield interesting findings in most cases because an infected person is unlikely to contaminate someone else. Backward tracing is crucial to identify clusters because an infected person likely belongs to a cluster.&lt;/li&gt;
&lt;li&gt;Unreliable tests are valuable, as long as they yield &lt;strong&gt;no false positives&lt;/strong&gt; (false negatives are okay). If there is a suspicion of cluster, then everyone needs to be tested cheaply and rapidly. If there is &lt;em&gt;anyone&lt;/em&gt; who got the virus, then odds are that &lt;em&gt;many other people&lt;/em&gt; got it too. So the test only needs to find a single one of them to raise the alert (some false negatives are okay). However, the test should not yield false positives (or it will raise alerts everytime).&lt;/li&gt;
&lt;li&gt;Japan understood all of this in February 2020 and contained the virus without any lockdown despite having some of the densest cities in the world.&lt;/li&gt;
&lt;li&gt;Many of the regions most critically hit by the virus around the world might simply be bad luck of having had a big cluster in this specific region.&lt;/li&gt;
&lt;/ul&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>What if the future is all that is more practical</title>
			<link href="http://foobuzz.github.io/future"/>
			<id>urn:uuid:69427c23-8fe3-5e97-8f75-dc0f0dcd5aaf</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2020-09-17T21:27:53Z</updated>
			<summary type="html">

&lt;p&gt;A common technique to try to predict the future is to think about technology. We take new technology, such as AI, self-driving cars, neurotechnology, etc, and try to understand how society will be shaped once (if ever) they become industrialized. If we feel even more bold than that, we take a mere idea of a technology (rocket-based transportation on Earth, etc) and try to understand how humans will live once it appears for real.&lt;/p&gt;
&lt;p&gt;I believe this approach is rather unproductive -- well, as if such exercise of predicting the future can be productive anyway. The first reason is that it&#39;s simply too hard to predict the future of technology. &lt;a href=&#34;https://youtu.be/X_m1mPtYzTk?t=47&#34;&gt;According to Neil DeGrasse Tyson&lt;/a&gt;, if you look at the archives of technology prediction in newspaper for the last century, predictions obviously become less and less accurate the further in the future they try to predict, and 50 years seems to be the threshold after which they are completely mistaken. So the horizon for our predictions of future technology is 50 years, give or take.&lt;/p&gt;
&lt;p&gt;The second reason it&#39;s probably a bad idea to use technology to try to predict the future of society is because it&#39;s not the way innovation works. At the 1997 Worldwide Developer Conference, &lt;a href=&#34;https://youtu.be/oeqPrUmVz-o?t=105&#34;&gt;Steve Jobs was asked&lt;/a&gt; why Apple was dropping development of &lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDoc&#34;&gt;OpenDoc&lt;/a&gt; even through OpenDoc was awesome technology. His answer was that innovation doesn&#39;t work by trying to find an application for a technology, but by trying to find the technology to solve a problem. You don&#39;t start with the technology, you start with a need.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the things I always found is that you&#39;ve gotta start with the customer experience, and work backwards to the technology. You can&#39;t start with a technology and try to figure out where you&#39;re gonna try to sell it.&lt;/p&gt;
&lt;p&gt;-- Steve Jobs, 1997&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we try to predict the future using technology as a compass, we&#39;re doing exactly the contrary Steve Jobs tells use to do here: we&#39;ve got all those funny new things like AI and self-driving cars, but we&#39;re not even sure what the hell they&#39;re good for, and we try so hard to make them fit into a model of the future so that we can make prediction about the future, but we&#39;re not even sure the future cares about that at all.&lt;/p&gt;
&lt;p&gt;Of course, sometimes technology is so crazy predictions are rightfully made about an entire class of usage for it. An example would be Nikola Tesla, who, when he was working on wireless communication, &lt;a href=&#34;https://www.truthorfiction.com/did-nikola-tesla-describe-mobile-phones-in-1926/&#34;&gt;basically predicted&lt;/a&gt; cell phones and video-conferencing in 1926, shattering the 50 years limit to an (almost) entire century. Working from home because of Covid and making heavy usage of video-conferencing, I regularly think about this quote and it simply blows my mind that someone already had that in mind 94 years ago.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When wireless is perfectly applied the whole earth will be converted into a huge brain, which in fact it is, all things being particles of a real and rhythmic whole.&lt;/p&gt;
&lt;p&gt;We shall be able to communicate with one another instantly, irrespective of distance. Not only this but through television and telephony we shall see and hear one another as perfectly as though we were face to face, despite intervening distances of thousands of miles; and the instruments through which we shall be able to do this will be amazingly simple compared with our present telephone.&lt;/p&gt;
&lt;p&gt;A man will be able to carry one in his vest pocket.&lt;/p&gt;
&lt;p&gt;-- Nikola Tesla, 1926&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, those kind of examples are highly vulnerable to &lt;a href=&#34;https://en.wikipedia.org/wiki/Survivorship_bias&#34;&gt;Survivorship bias&lt;/a&gt;. Of course we remember the predictions that were correct and forget the ones that weren&#39;t. Who knows what else Nikola Tesla predicted that wasn&#39;t as accurate as that. Assuming enough people make predictions varied enough, of course some of them will have it right. Doesn&#39;t change the fact that there existed someone 94 years ago who was convinced about a prediction he made, and he just happened to be correct. Many people playing the lottery doesn&#39;t make the winner any less remarkable. In this case, winning is not random, there is an honest reasoning.&lt;/p&gt;
&lt;p&gt;I think the reason we&#39;re making future predictions based on technology is because it&#39;s the only direction we know how to go in: it&#39;s always possible to imagine usages for a given technology, however it&#39;s often a billion-dollar problem to imagine a technology for an given idea. So, by lack of genius, we take the easy way, even thought it&#39;s doomed to be unproductive most of the time. The evolution of society is a continuous feedback loop between what is possible (technology) and what is imagined (ideas), and successful people are the ones who immediately spot when the technology becomes available for an incredible idea they have. Those who hop on any new tech are just salesmen.&lt;/p&gt;
&lt;p&gt;Our obsession of using technology as the only available marker also inhibits us from making predictions too wild, which is a mistake. If I tell you we&#39;re going to be able to teleport in the future, you&#39;re gonna object by asking me to explain how that is going to be implemented, because you&#39;re focusing on technology again. But that is ridiculous, much of what we know about technology will be obsolete in 30 years, why would a technological explanation be relevant to this discussion. This is the third law of &lt;a href=&#34;https://en.wikipedia.org/wiki/Clarke%27s_three_laws&#34;&gt;Arthur C. Clarke laws&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any sufficiently advanced technology is indistinguishable from magic.&lt;/p&gt;
&lt;p&gt;-- Arthur C. Clarke&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This law is cute, but it isn&#39;t really helpful, at least not helpful to predict the future. In fact, it pretty much states that if we&#39;re using what makes sense today to predict the future, we&#39;re gonna &lt;em&gt;at least&lt;/em&gt; miss some innovations, because some of those are simply magic from today&#39;s standard. But it doesn&#39;t tell us &lt;em&gt;which&lt;/em&gt; innovations we&#39;re missing.&lt;/p&gt;
&lt;p&gt;So, how do we make predictions? Well, the wise move is probably to simply stop making predictions. But I&#39;m not very wise. I want to try. My guess, which is rather arbitrary, but which has the quality of being very optimistic, would be this law:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anything that is more practical will eventually be implemented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This law predicts the entire future (you just have to dress a list of things that would be practical, and you decide how exhaustive you try to be), but it gives no guaranty as to &lt;em&gt;when&lt;/em&gt; the implementation will happen. Most importantly -- and that is consistent with all I&#39;ve written above -- this laws makes no assumption about what technology will be used for the implementation.&lt;/p&gt;
&lt;p&gt;As I&#39;m writing this article before noon, I&#39;m remembering my fridge is almost empty and I&#39;m gonna need to go buy some groceries, or to order a delivery. I think it would be way more practical to just open my fridge and find a perfectly good dish there. My guess is that this one will happen sooner than teleportation.&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>When do the digits of the Epoch time change?</title>
			<link href="http://foobuzz.github.io/epoch"/>
			<id>urn:uuid:c810ce2b-2879-5c57-8e66-155af9c76aca</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2020-09-12T19:29:56Z</updated>
			<summary type="html">

&lt;p&gt;&lt;strong&gt;Approximately&lt;/strong&gt;, using whole numbers of units commonly used for each time scale.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1599938520&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;||||||||||- every second&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;|||||||||- every 10 seconds&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;||||||||- every 2 minutes&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;|||||||- every 17 minutes&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;||||||- every 3 hours&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;|||||- every day&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;||||- every 12 days&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;|||- every 4 months&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;||- every 3 years &lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;|-every 32 years&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>The sane hardship it is to understand that 0.999... = 1</title>
			<link href="http://foobuzz.github.io/9999999999999999999999999999999999999999"/>
			<id>urn:uuid:0e528ef7-0923-564e-b6f3-9b77360a0368</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2020-07-25T15:38:50Z</updated>
			<summary type="html">

&lt;p&gt;One of the most important realizations that I have had about mathematics is the fact that there is no global definition of what &#34;infinity&#34; is. You can&#39;t just drop the word &#34;infinite&#34; in any context, as if one day mathematicians had a meeting to decide the meaning of &#34;infinity&#34; and made it an element of reasoning you can use with any mathematical thing.&lt;/p&gt;
&lt;p&gt;In set theory, a set is &#34;infinite&#34; if, for every natural number, the set has a subset whose cardinality is that of this natural number. In functional analysis, a function has a limit L as &lt;em&gt;x&lt;/em&gt; approaches &#34;infinity&#34; if, for any tiny ɛ, there is a point after which the function won&#39;t ever be farther from L than the distance ɛ. The term of &#34;infinity&#34; obviously comes from an intuition about the philosophical notion of infinity, but it is then defined formally using very traditional and non-mystical notions and notations, and there isn&#39;t any global notion of &#34;infinity&#34;. You can&#39;t take some random mathematical thing and ask &#34;What happens when this goes to infinity?&#34;.&lt;/p&gt;
&lt;p&gt;Now, when someone comes and says &#34;hey, do you know that 0.999 with an infinite amount of 9s after the decimal point is equal to 1?&#34;, what most people do is that they try to picture the number 0.999 with an actual infinite number of nines after the decimal point and then they try to actually reason about this monstrosity. This is an interesting intellectual exercise, but when you&#39;re doing that, you&#39;re doing philosophy, not mathematics. If you want to do mathematics, what you should be asking back is &#34;What is the definition of a number with a decimal repeating infinitely?&#34;&lt;/p&gt;
&lt;p&gt;There are multiple definitions for it, but the one that makes the most sense to me is an infinite &lt;a href=&#34;https://en.wikipedia.org/wiki/Series_(mathematics)#Convergent_series&#34;&gt;series&lt;/a&gt;. We can simply state that 0.999... can be written as 0.9 + 0.09 + 0.009 + 0.0009 + ... Formally, it would be written as follows:&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
&lt;img src=&#34;/assets/articles/09-series.svg&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;This form is very helpful, because the notion of infinite series is very well defined. It is simply the limit of the sequence of the partial sums. In other words, 0.999... is the limit of the sequence 0.9, 0.99, 0.999, 0.9999, etc. Let&#39;s call this sequence 0.(9)n for later reference. I like this definition because it reminds me of very important aspects of sequences and their limits that I learned when I was in school:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There is no such thing as an &#34;infinite term&#34; of a sequence (and some teachers won&#39;t like it if you ever dare say something like that).&lt;/li&gt;
&lt;li&gt;The limit of a sequence may very well be distinct than any of its terms.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think those two aspects are at the origin of the difficulty that there is to accept that 0.999... = 1. I think that the decimal representation with its &#34;infinite digits&#34; is misleading because it leads us to ponder the notion of an &#34;infinite term&#34; (of finite truncations) all while it is explicitly discouraged as soon as we actually consider the sequence of truncations itself. Then our minds are lost wandering in the vast pastures of infinity where it&#39;s hard to understand how a limit may not belong to the sequence itself. I think that what people really mean when they think that it&#39;s problematic that 0.999... = 1 is that the sequence of 0.(9)n &lt;em&gt;never&lt;/em&gt; reaches 1 no matter how many time you look at the next term.&lt;/p&gt;
&lt;p&gt;In other words, consider the set of all elements of the sequence: {0.9, 0.99, 0.999, 0.9999, ...}. This set is obviously infinite, and 1, the limit of the sequence, does not belong to this set. When we ponder the notion of &#34;infinity&#34; in the context of 0.9..., what we might envision is the journey through this &#34;infinite&#34; set. With this in mind, it&#39;s hard to see how 1 can have anything to do with this, since it is outside the set.&lt;/p&gt;
&lt;p&gt;But this begs the question: what is a &#34;limit&#34;? In layman terms, the limit of a sequence is a real number the sequence is ever getting closer to (without the requirement that it actually reaches it at any point). More formally, it means that for any tiny real number ɛ, there is a rank after which the sequence won&#39;t ever be farther from the limit than the distance ɛ. (This is the same definition than the one used in functional analysis I presented in the introduction.) Even without a formal proof, it seems pretty obvious than the sequence 0.9, 0.99, 0.999,... has 1 for limit. And therefore, if you actually understand the proper meaning of the notation, that 0.999... = 1.&lt;/p&gt;
&lt;p&gt;Now, since the limit of an increasing sequence also happens to be its supremum (least upper bound), this leads us to another definition, which is the one that is actually used by &lt;a href=&#34;https://en.wikipedia.org/wiki/0.999...&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The real number represented by an infinite decimal is the least upper bound of its finite truncations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this means is that if you take the sequence 0.(9)n, then the number that is written &#34;0.999...&#34; or said to have &#34;an infinite amount of 9s after the decimal point&#34; is the smallest number that is greater than all terms of the sequence. For example, 3 is greater than all the terms of the sequence, so that&#39;s a candidate. Is it the smallest such number? Well, certainly not. 2 is greater than all terms of the sequence and it is lesser than 3. Can we find smaller? Sure. 1 is greater than all terms of the sequence. Is there something even smaller? Hmm... doesn&#39;t seem so. I think 1 is the smallest. This, of course, is only intuition so far, but &lt;a href=&#34;https://en.wikipedia.org/wiki/0.999...#Formal_proof&#34;&gt;the proof&lt;/a&gt; is easy enough to follow.&lt;/p&gt;</summary>
			
				<category term="science"></category>
			
		</entry>
	
		<entry>
			<title>We're in for 2 months</title>
			<link href="http://foobuzz.github.io/covid19"/>
			<id>urn:uuid:ecaa93e1-01aa-59cb-816a-fa0f9fa23314</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2020-04-04T13:59:43Z</updated>
			<summary type="html">

&lt;p&gt;One of my activities during the lockdown here in France is trying to predict how much time will the lockdown last. The data I&#39;m using comes from &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is a plot of the rate of growth of Covid-19 in Hubei, Italy, and France, starting from the day each region has started its lockdown. The rate of growth at a given day is the number of new cases on this day, as a percentage of the number of cases from the previous day. The rate of growth is constant for an exponential evolution, and is 0 when there is no more growth. (Mathematically, it is the derivative of the function divided by the function itself.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/covid19/growth.svg&#34; style=&#34;width:100%; border: 1px solid lightgray;&#34;&gt;&lt;br&gt;
&lt;a href=&#34;https://gist.github.com/foobuzz/c5a18dd8c983b128ee788fe7747a031b#file-growth-py&#34;&gt;Source script&lt;/a&gt;&lt;/br&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;Hubei has some statistical aberrations which make the plot goes wild at some places. They may be the result of changes from one counting method to another. For example, at some point they started adding people clinically diagnosed with symptoms of pneumonia (most likely Covid-19) on top of those who tested positive to SARS-Cov-2.&lt;/p&gt;
&lt;p&gt;What we see in the plot is that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Locking down works. For each of the countries, locking down eventually brings the growth significantly down. Italy has been on a smooth decline since the beginning of their lockdown. You may read articles in the press about how they&#39;re finally beating the virus, which is just a way of saying that the rate of growth has decreased under some arbitrary threshold. It has been decreasing from the start.&lt;/li&gt;
&lt;li&gt;It takes time to kill growth. Hubei needed 30 days for the growth to almost come to a stop.&lt;/li&gt;
&lt;li&gt;Even if they don&#39;t start at the same rate of growth, it looks that each country is ultimately going to take around 30 or 40 days to kill growth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why does it take so much time? I have 2 explanations for it.&lt;/p&gt;
&lt;p&gt;Explanation number 1 is the incubation period of Covid-19, which ranges between 5 days and 14 days. This means that the last people who have been contaminated just before the lockdown (which is much of the contaminated people, because of exponential growth) will start going through the disease between 5 days and 14 days &lt;em&gt;in&lt;/em&gt; the lockdown. Once they are sick, the symptoms tend to peak between 2 and 3 days in the illness, which is the moment they reach for medical assistance and get tested. So it is expected that the &lt;em&gt;measured&lt;/em&gt; number of contaminated people could continue growing up to 17 days after the start of the lockdown.&lt;/p&gt;
&lt;p&gt;17 days are still lesser than the 30 days we&#39;re observing here, which brings me to the second explanation: the lockdown is not perfect. Some people cannot work from home and still go to work. People need to buy groceries, and go to the shop. People order deliveries, with packing touched by other people. People get sick for various reasons, so they do to the doctor, where other people are waiting. And so on and so forth.&lt;/p&gt;
&lt;p&gt;The fact that there are contaminations even during the lockdown seems to be corroborated by another metric, which is: once there is no more growth, how many of all the people who have tested positive are still sick? The answer is: most of them. The following graph shows the number of &lt;em&gt;unrecovered&lt;/em&gt; cases of Covid-19 against the total number of cases in Hubei after 30 days of lockdown. That is, once there is almost no more growth.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/covid19/recovery.svg&#34; style=&#34;width:100%; border: 1px solid lightgray;&#34;&gt;&lt;br&gt;
&lt;a href=&#34;https://gist.github.com/foobuzz/c5a18dd8c983b128ee788fe7747a031b#file-recovery-py&#34;&gt;Source script&lt;/a&gt;&lt;/br&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;We see that even when the virus has stopped spreading, a large majority of all Covid-19 cases are still positive, and it takes another 30 days before most of them recover and there is only a small minority which is still positive.&lt;/p&gt;
&lt;p&gt;My initial reaction was that it is no problem to stop the lockdown after the first month, you just have to keep the still-ill locked down until they recover. The problem is that it is well-known that the number of measured cases is way lesser than the number of total cases, because only the worst cases get tested. So we must imagine that this graph only represent a subset of the entire set of Covid-19 cases, and their sizes evolve proportionally. So if you let out people at Day 30, you&#39;re actually letting out people among a sh#tload of people who are positive, and therefore at risk of spreading the virus again.&lt;/p&gt;
&lt;p&gt;You can read the complete Hubei lockdown timeline &lt;a href=&#34;https://en.wikipedia.org/wiki/2020_Hubei_lockdowns#Lockdown_timeline&#34;&gt;here&lt;/a&gt;, from which I extract 3 bullet points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;23 January: lockdown&lt;/li&gt;
&lt;li&gt;6 March: first day with 0 new case&lt;/li&gt;
&lt;li&gt;27 March: lockdown lifted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of the world waited for the last moment to put lockdowns in place, and started experiencing hindsight bias about the fact that it was pretty much announced by China one month before. If this time we stop playing the game of &#34;in our country it&#39;s going to be different than in China&#34;, then the prediction for the duration of the lockdown is: 2 months.&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>Thoughts on agnosticism</title>
			<link href="http://foobuzz.github.io/god"/>
			<id>urn:uuid:d0377a8f-605c-5201-b6bc-8fe9dbe1d42d</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2019-12-23T20:50:28Z</updated>
			<summary type="html">

&lt;p&gt;Can we prove or disprove the existence of god?&lt;/p&gt;
&lt;p&gt;It depends on the exact definition of god, but in many of the traditional religious definitions, god hides himself from proof in order to truly test the faith of believers. In this case, his existence is, by definition, not provable.&lt;/p&gt;
&lt;p&gt;A relevant question would then be: can something whose existence we cannot prove (&#34;we&#34; as humans) have any impact on the world? I would think definitely yes. Our study of the universe is done either in laboratory, either by observations of deep space through tiny pinholes thanks to our telescopes. The entire field of natural science if therefore based on the assumption of regularity in Nature, such that what we discover on observations of limited scope applies everywhere. It is a very reasonable assumption, because it provides us with a framework to study efficiently, and it gives excellent results that can then be converted into actual engineering that works, at least in the scope we&#39;re playing with.&lt;/p&gt;
&lt;p&gt;However, it is vulnerable to irregularities that would hide themselves from us, such as god is traditionally defined. For example, god could chose to fulfill some prayers, but stop altering the normal flow of things as soon as he spots you&#39;re doing statistics to measure whether prayers work or not. An entity capable of observing all the information of the Universe at once (wouldn&#39;t that be... a god?) would definitely detect those irregularities, but we humans are far less powerful than that, and we could clearly get tricked. &lt;/p&gt;
&lt;p&gt;In this case, you might think, well, why not believe in god even if I can&#39;t prove it; I have little to lose, big to win. This is a famous philosophical argument made popular by Pascal, named the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pascal%27s_wager&#34;&gt;Pascal&#39;s wager&lt;/a&gt;. But then, you&#39;re making an assumption, which is the assumption traditionally made in religion: god is good.&lt;/p&gt;
&lt;p&gt;Let me tell the story of an alternative god. This god has created humans as rational animals, who should use logic and the scientific method to improve their understanding of the world. This god carefully hides himself from his creation, such that through this scientific method of them, they can&#39;t uncover him. But to truly test their faithfulness to rationality, he put the seed of mysticism and of superstition into the human brain, and because he&#39;s sort of a meta guy, he specifically put the seed of belief of himself. He wants humans to be rational, so he wants them to resist the temptation of belief. So, in this world, humans naturally develop an intuition for the existence of god, but they&#39;re designed to reject it, because god made it impossible to prove this intuition, and god wants them to be focused on proof. Those who accept the superstition, the believers, are considered deficient, and are sent to hell.&lt;/p&gt;
&lt;p&gt;The reason I made up this alternative god, is to show that whenever you think that you have nothing to lose in believing in god, it is incorrect: you actually risk going to hell if it ever happens that my alternative god is real. You might be skectic of my alternative god, because since I just made it up, it surely isn&#39;t an hypothesis as solid as any of the religious gods, who appeared in holy books thousands of years ago. But this is just a popularity argument, and since you have zero element in favor of any hypothesis anyway, you can&#39;t really argue that any god is more or less likely than any other.&lt;/p&gt;
&lt;p&gt;Maybe you think that the most rational move is therefore neither to believe that god exists, nor to believe that he doesn&#39;t. But even then, I could tell you the story of a god who only sends agnostics to hell (because they&#39;re not brave enough to take a risk, or whatever). Basically, whatever you do, there is possible god that would send you to hell for it. This is what happens with non-scientific assertions (assertions, which, by the way they are formulated, you cannot prove or disprove): there is no optimal move. Such assertions are irrelevant; not because ignoring them is safe, but because there is no insight on what is the safest position.&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>Notes on nuclear energy</title>
			<link href="http://foobuzz.github.io/notes-nuclear"/>
			<id>urn:uuid:12f4bb3d-1dc5-59d9-9717-14906d5ab917</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2019-12-14T16:19:30Z</updated>
			<summary type="html">

&lt;p&gt;If you want to release energy, then you need to give some force the opportunity to work.&lt;/p&gt;
&lt;p&gt;For example, consider a child who is tensing a slingshot. In this state, all forces cancel each other. The force of the child&#39;s arm counters the force of the slingshot&#39;s elastic. There is no energy released out of this system. But as soon as the child releases the elastic, then the tension force of the elastic starts providing some work. And if there is a force that is working, then it releases energy. In this instance, it releases kinetic energy, given to the rock that is being projected.&lt;/p&gt;
&lt;p&gt;There is a force out there which is rather strong: the nuclear force. It is the force which glues together the nucleus of an atom. The nucleus of an atom is made of two types of particles: protons and neutrons (we call them nucleons when we don&#39;t need to make the difference), and they&#39;re all kept tight together by the nuclear force. Now, if you take an atom, you can&#39;t get any energy &lt;em&gt;per se&lt;/em&gt; out of its nucleus, because it is stable. And you can&#39;t get energy out of anything stable. You need some force to work.&lt;/p&gt;
&lt;p&gt;So how you get the nuclear force to work? Well, scientists have made a relevant observation: not all nucleus are as tightly glued as each other (they use the notion of &#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binding_energy&#34;&gt;binding energy&lt;/a&gt;&#34; to measure how glued nucleons are together, which is the energy you would be required to provide in order to unglue the nucleons). Below is a graph of how tightly glued nucleus are depending on how many nucleons they contain (the proper word is not &#34;glued&#34;, but rather &#34;stable&#34;). As you can see, atoms with few nucleons, such as Hydrogen, are not that much stable; the maximum of stability is reached with Iron; and then stability decreases steadily down to Uranium.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Binding_energy_curve_-_common_isotopes.svg/1280px-Binding_energy_curve_-_common_isotopes.svg.png&#34; style=&#34;border: 1px solid black;&#34;&gt;
&lt;figcaption&gt;&lt;strong&gt;Binding energy of nuclides depending of their number of nucleons. This energy is, by definition, the amount of energy required to separate the nucleons of the nucleus.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;So scientists had the following idea: what if we took two low-stability atoms, such as two atoms of Hydrogen, and glued them together to make one atom of Helium, which would be a bit more stable, according to the graph. What would be the point of that? Well, you have to remember that stability comes from the nuclear force. So if you&#39;ve somehow reached a higher level of stability, then it means you have provided the opportunity for the nuclear force to &lt;em&gt;work&lt;/em&gt;. And what happens when a force works? &lt;strong&gt;It releases energy.&lt;/strong&gt; This is nuclear fusion.&lt;/p&gt;
&lt;p&gt;With nuclear fission, the opposite is achieved: we take the biggest nucleus, Uranium, which is not very stable, and we split it into two smaller nucleus (fissile Uranium has 235 nucleons, and will fission into two nucleus of around 100 and 135 nucleons respectively). Each of those two children nucleus have a higher stability, according to the graph, so it means that the nuclear force has had the opportunity to work, and in the process, must have released energy.&lt;/p&gt;
&lt;p&gt;In both nuclear fusion and fission, the gain in energy eventually presents itself in the form of kinetic energy in the particles at play. Such kinetic energy will make those particles impact the bulk material surrounding them. This will lead to the material heating, and, in the case of civil nuclear, this heat is used to boil water and, ultimately, run a turbine.&lt;/p&gt;
&lt;p&gt;But why does the gain in energy presents itself at kinetic energy, and what particles hold this kinetic energy, and from what force?&lt;/p&gt;
&lt;h2&gt;Fusion&lt;/h2&gt;
&lt;p&gt;In the case of Hydrogen fusion, a Hydrogen nucleus with 2 nucleons (deuterium) fusions with an Hydrogen nucleus with 3 nucleons (tritium), to very temporarily become an Helium nucleus with 5 nucleons. The resulting Helium-5 nucleus is in such a configuration that a neutron gets ejected out of it at high speed. The rest of the nucleus is ejected at high speed too because of the recoil. The resulting kinetic energy is far greater than the energy required to perform the fusion in a first place. The emission of a neutron happens almost instantly (Helium-5 has a half-life of 10&lt;sup&gt;-22&lt;/sup&gt; seconds), so the fusion is usually said to produce one neutron and one Helium-4 nucleus, without even mentioning the Helium-5 step.&lt;/p&gt;
&lt;figure style=&#34;text-align: center;&#34;&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Deuterium-tritium_fusion.svg/800px-Deuterium-tritium_fusion.svg.png&#34; style=&#34;border: 1px solid black; width:200px;&#34;&gt;
&lt;figcaption&gt;&lt;strong&gt;Ultimately, the energy of fusion turns up as the kinetic energy due to neutron decay of the unstable Helium 5 nucleus.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;Now, I don&#39;t have a clear understanding of the mechanism at play which ejects this neutron, but the force at play is, again, the nuclear force. What I haven&#39;t said yet about the nuclear force is that if the nucleons get really too close, it starts becoming repulsive. The following digram shows the value of the nuclear force between 2 nucleons depending on their distance. Caution: the value on the y-axis is positive when the force is repulsive, and negative otherwise.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/5/53/ReidForce2.jpg&#34; style=&#34;border: 1px solid black;&#34;&gt;
&lt;figcaption&gt;&lt;strong&gt;Nuclear force gets repulsive at very short range.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;So my limited understanding is this neutron emission is that, after the fusion, the Helium-5 nucleus is in such a configuration, that a neutron becomes too close to its counterparts, crossing the limit where the nuclear force start becoming repulsing, and so gets ejected.&lt;/p&gt;
&lt;h2&gt;Fission&lt;/h2&gt;
&lt;p&gt;In the case of fission, a neutron is shot at an Uranium nucleus. The nucleus grabs the neutron, which puts the nucleus into such a configuration that the nuclear force starts shaping the nucleus into two different clusters of nucleons. This reaches a point where the two clusters are separated by a distance big enough for the electromagnetic repulsion of their protons to be greater than the nuclear force, at which point the nucleus fissions into two children nucleus repulsing each other at high speed.&lt;/p&gt;
&lt;figure style=&#34;text-align: center;&#34;&gt;
&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e0/Stdef2.png&#34; style=&#34;border: 1px solid black; height:200px;&#34;&gt;
&lt;figcaption&gt;&lt;strong&gt;A nucleus having taken a neutron becomes in such a configuration that nucleus start organizing into 2 clusters. In reality, the two clusters don&#39;t usually have the same size.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;The final force at the origin of the kinetic energy is therefore the repulsive electromagnetic force.&lt;/p&gt;</summary>
			
				<category term="science"></category>
			
		</entry>
	
		<entry>
			<title>Simple streaming of videos over the LAN</title>
			<link href="http://foobuzz.github.io/streaming-videos-on-a-server"/>
			<id>urn:uuid:881eb3af-5ea7-5d41-ae3f-24551d949c85</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2019-10-24T18:42:58Z</updated>
			<summary type="html">

&lt;p&gt;My external hard drive is connected to my Raspberry Pi, which itself is connected to my TV via HDMI. I have a bunch of videos on my drive which I usually watch on the TV using &lt;a href=&#34;https://elinux.org/Omxplayer&#34;&gt;&lt;code&gt;omxplayer&lt;/code&gt;&lt;/a&gt;, but sometimes I want to be able to watch them on my laptop. I wanted a simple solution without having to make my Pi a full-fledged &lt;a href=&#34;https://en.wikipedia.org/wiki/Network-attached_storage&#34;&gt;NAS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My first attempt was to launch the built-in simple HTTP server of Python into my videos&#39; directory:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;python3 -m http.server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then visit my Pi&#39;s local IP in my laptop&#39;s browser to get the file listing and let the browser open and read the videos. It works, but it&#39;s impossible to seek at arbitrary times inside the videos. Indeed, the server doesn&#39;t support the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range&#34;&gt;&lt;code&gt;Range&lt;/code&gt; header&lt;/a&gt; that the browser sends when seeking at a specific part of a video.&lt;/p&gt;
&lt;p&gt;I &lt;a href=&#34;https://stackoverflow.com/a/14618010&#34;&gt;found out&lt;/a&gt; that the Python &lt;a href=&#34;https://twistedmatrix.com&#34;&gt;Twisted project&lt;/a&gt; comes with a basic web server that is more powerful than &lt;code&gt;http.server&lt;/code&gt; and does support &lt;code&gt;Range&lt;/code&gt;s. In the end, the solution to my problem was as simple as:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;sudo apt-get install python-twisted-web&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;twistd -no web --path=.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It takes a little more time to start than &lt;code&gt;http.server&lt;/code&gt; but it can seek videos :)&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>Proof that 1 + 1 = 2</title>
			<link href="http://foobuzz.github.io/1-plus-1"/>
			<id>urn:uuid:ca0f4943-f846-56dd-bc46-c3cbae5a7a8c</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2019-09-09T21:38:58Z</updated>
			<summary type="html">

&lt;p&gt;The fact that 1 + 1 = 2 is not an axiom of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Peano_axioms#Arithmetic&#34;&gt;Peano arithmetic&lt;/a&gt;, but it is fairly easy to demonstrate. The Peano axioms for natural integers are all based on the notion of &#34;successor&#34;. The only named integer is zero (0), and then there are &lt;a href=&#34;https://en.wikipedia.org/wiki/Peano_axioms#Formulation&#34;&gt;five axioms&lt;/a&gt; revolving around zero and successors of natural integers.&lt;/p&gt;
&lt;p&gt;The Peano arithmetic introduces further axioms for various operations on integers. It defines two axioms for the addition. For any natural integers &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;S&lt;/em&gt; the notation for the successor of a given integer:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;(1) a + 0 = a&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(2) a + S(b) = S(a + b)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let &lt;em&gt;1 = S(0)&lt;/em&gt; and &lt;em&gt;2 = S(1)&lt;/em&gt;. Then:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1 + 1&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;= 1 + S(0)  (definition of 1)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;= S(1 + 0)  (axiom 2)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;= S(1)      (axiom 1)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;= 2         (definition of 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The intuition behind the mechanics of axiom 2 is that adding &lt;em&gt;c&lt;/em&gt; to &lt;em&gt;a&lt;/em&gt; means taking &lt;em&gt;c&lt;/em&gt; times the successor of &lt;em&gt;a&lt;/em&gt; (that is, &lt;code&gt;S(S(S(S(...(a)))))&lt;/code&gt; with &lt;em&gt;c&lt;/em&gt; &lt;em&gt;S&lt;/em&gt; marks). In more informal terms, &lt;code&gt;a + S(b) = S(a + b)&lt;/code&gt; should be thought as &lt;code&gt;a + c = S(a + (c-1))&lt;/code&gt;. The right operand is &#34;decreased&#34; by prefixing the whole thing with the successor operator. Eventually it will reach zero and the number of time we needed to decrease it to reach zero is kept track by the number of time we marked the &lt;em&gt;S&lt;/em&gt; notation.&lt;/p&gt;</summary>
			
				<category term="science"></category>
			
		</entry>
	
		<entry>
			<title>Recreating the Midnight in Paris opening sequence</title>
			<link href="http://foobuzz.github.io/midnight-in-paris"/>
			<id>urn:uuid:cf6409d6-7511-53d7-ba09-300b8749e29c</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2019-08-04T18:09:53Z</updated>
			<summary type="html">

&lt;p&gt;Below is my recreation of the opening sequence of Woody Allen&#39;s movie &lt;em&gt;Midnight in Paris&lt;/em&gt;. You can find the original one &lt;a href=&#34;https://www.youtube.com/watch?v=JABOZpoBYQE&#34;&gt;here&lt;/a&gt;. I have also a &lt;a href=&#34;https://www.flickr.com/photos/182852020@N03/albums/72157709815555102&#34;&gt;Flickr album&lt;/a&gt; with the 60 pictures, as well as a &lt;a href=&#34;https://www.flickr.com/photos/182852020@N03/albums/72157709816126392&#34;&gt;bonus album&lt;/a&gt; with extra pictures taken during the project.&lt;/p&gt;
&lt;iframe allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/BWY-M_3wfkA&#34; style=&#34;display: block; margin:auto;&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;I have substituted some shots for other ones, mostly because their spot wasn&#39;t available at the time I was taking the picture. I also did not try to imitate the exact framing of the shots in the movie, because I decided it wasn&#39;t the optimal choice given the conditions that had changed between when the movie was shot and when I was taking the shots.&lt;/p&gt;
&lt;p&gt;Below I break down this project in its three phases: location identification, photography, and editing.&lt;/p&gt;
&lt;h2&gt;Locations identification&lt;/h2&gt;
&lt;p&gt;The sequence in question contains 60 shots taken at various places in Paris. The first step was to identify the location of each of the 60 spots where the shot had been filmed in order to go there and take the video. I did not find any authoritative reference on the web that lists those places. The most advanced material I found was &lt;a href=&#34;https://www.thecinetourist.net/an-american-tourist-in-paris.html#&#34;&gt;this article of The Cine-Tourist&lt;/a&gt; which analyses the opening sequence and gives away many of its locations if you&#39;re willing to go through the prose. The most interesting take-away from this article is that the locations of the opening sequence aren&#39;t random, in fact they match the locations of the events that takes place in the rest of the movie.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/assets/articles/monceau.png&#34; style=&#34;border: 1px solid black;&#34;&gt;
&lt;figcaption&gt;&lt;strong&gt;Example of location identification with shot No. 48. &#34;Saule pleureur&#34; means &#34;weeping willow&#34;. The website from the image in the middle is &lt;a href=&#34;http://parismamanetmoi.com/2013/02/03/saules-pleureurs-parisiens/&#34;&gt;http://parismamanetmoi.com/2013/02/03/saules-pleureurs-parisiens/&lt;/a&gt;&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;In order to identify the precise location of the shots, I first identified the general area (that is, the street, or park, or place) on Google Maps, and then tried to recreate the exact angle in Street View. From there I grabbed the coordinates. In order to identify the general area, I used either the aformentionned article, my own relative knowledge of Paris for the most famous places, hints from the shots themselves (some of them have the street name literally written), or asked people around when I was stuck.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/assets/articles/rooftops.png&#34; style=&#34;border: 1px solid black;&#34;&gt;
&lt;figcaption&gt;&lt;strong&gt;Identification of shot No. 31. Circled in green are the &lt;i&gt;Archives Nationales&lt;/i&gt;. &lt;a href=&#34;https://earth.google.com/web/@48.86069794,2.35372001,94.66637416a,52.00513838d,35y,90.92544887h,78.99834568t,0r&#34;&gt;Here is a link&lt;/a&gt; to the Google Earth position (Chrome only).&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/img&gt;&lt;/figure&gt;
&lt;p&gt;By far the most challenging location to find was shot number 31, which is a shot of rooftops. Google, family, or friends could not help me with this one. I eventually spent an evening browsing Google Earth with 3D buildings activated, searching for a dome similar to the one at the top of the shot, and identified that it was a shot of the &lt;em&gt;Archives Nationales&lt;/em&gt;, taken from the &lt;em&gt;Centre Pompidou&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1NyUQUBlArYYu714a-9r5xWLDiZCOQXU0hHTroAVsCkI/edit#gid=0&#34;&gt;Here is a spreadsheet&lt;/a&gt; listing the locations of each of the 60 shots. The map below contains one marker for each of those 60 locations. As you can see, the shots clearly doesn&#39;t cover most of Paris. Almost all of them are from the Right Bank (North of the Seine), for starters. Blue markers are daytime shots; red markers are nighttime shots.&lt;/p&gt;
&lt;iframe height=&#34;480&#34; src=&#34;https://www.google.com/maps/d/embed?mid=1wahbYDHX_P5rV7AZDYfNdEq0lJKOjht7&#34; width=&#34;640&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Using this map, I grouped the locations into &#34;clusters&#34; which are easy to cover on foot. Each cluster can then be linked either by subway, by foot too, or just be photographed another day. So here are the &#34;walks&#34; that I eventually scheduled:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Area&lt;/th&gt;&lt;th&gt;Shots&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Montmartre&lt;/td&gt;&lt;td&gt;5, 19, 9, 18, 4, 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parc Monceau&lt;/td&gt;&lt;td&gt;48, 50, 49&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Champs Elysées&lt;/td&gt;&lt;td&gt;21, 35, 23, 12, 39, 36, 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tour Eiffel&lt;/td&gt;&lt;td&gt;30, 17, 15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concorde&lt;/td&gt;&lt;td&gt;7, 6, 26, 1, 28, 3, 32, 14, 13, 24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Opéra → Louvre&lt;/td&gt;&lt;td&gt;38, 29, 16, 34, 27, 8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Saint Michel / Notre-Dame&lt;/td&gt;&lt;td&gt;20, 37, 47, 46, 42, 41, 40, 43, 44, 10, 45, 25, 11, 22, 33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i&gt;Night Shots&lt;/i&gt;&lt;/td&gt;&lt;td&gt;51-60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Photography&lt;/h2&gt;
&lt;p&gt;I took pictures and videos with a &lt;a href=&#34;https://www.trustedreviews.com/reviews/panasonic-lumix-dmc-fz200&#34;&gt;Panasonic FZ200&lt;/a&gt;. The only other equipment I had was my smartphone with locations on Google Maps and snapshots from the movies to imitate framing. When I started photographing, I immediatly unndertood that I had made a mistake by doing this project in July because 1/ there are way too many people and 2/ there is way too much light.&lt;/p&gt;
&lt;p&gt;Initially I did not intend to take videos to actually recreate the sequence, but only to take pictures to create an equivalent photo album. As I started shooting, I realized that my pictures were way pooreer, photographically speaking, than the lovely shots in the movie, due to the poor light and my lack of equipment and skills. So I decided to take videos to recreate the full sequence, such that even without the photography magic, the project would at least have a interesting and vivid output. My camera, the Panasonic FZ200, comes with native 1080p video. Although the image is not of great quality, it does the job.&lt;/p&gt;
&lt;p&gt;I also realized that constraining myself to the shots of the movie was actually very limiting. I thought that imitating the composition of those shots was an easy thing to do, I just had to &#34;copy&#34;, but because of all the various factors that changes between the movie and the reality (not the same light, not as many people, cars parked in the way, not the same overall &#34;mood&#34;, etc), recreating the exact shots of the movie was not necessarily the best choice for optimal photograhic result. This is why I adapted the framing for many shots. Also, sometimes the exact spot to take the picture was simply not the convenient place to be.&lt;/p&gt;
&lt;p&gt;There are 5 shots out of the 60 that I substituted for other ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shot No. 12 of the Fouquet&#39;s terrace. Since the restaurant has been burned during the &lt;a href=&#34;https://en.wikipedia.org/wiki/Yellow_vests_movement&#34;&gt;yellow vest protests&lt;/a&gt;, there was no terrace at all. I replaced it by the entrance to the metro Cluny-La Sorbonne near Saint Michel. I also modified the point of view of Shot No. 23, of the Fouquet&#39;s entrance, so that it shows the Fouquet&#39;s renovation work.&lt;/li&gt;
&lt;li&gt;Shot No. 20 of a flower shop at &lt;em&gt;rue Edouard Colonne&lt;/em&gt;. The shop is now closed and the whole building facade is covered in scaffholding. I replaced it with a shot of &lt;em&gt;rue Rembrandt&lt;/em&gt; near the &lt;em&gt;Parc Monceau&lt;/em&gt;, a pretty little street with a lot of green foliage.&lt;/li&gt;
&lt;li&gt;Shot No. 27 of the Louvre pyramid, with the camera pointing West. The spot was closed off in preparation of a festival, so I replaced it with a shot of the pyramid with the camera pointed East, that is, towards the &lt;em&gt;Palais du Louvre&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Shot No. 31 of rooftops. It is either taken from the back of the &lt;em&gt;Centre Pompidou&lt;/em&gt; or a rooftop nearby, none of which are publicly available (I admit I did not physically check the point of view from the &lt;a href=&#34;https://restaurantgeorgesparis.com/fr/&#34;&gt;café Georges&lt;/a&gt;, but I&#39;m almost sure the angle is unavailable even from there). I replaced this shot with another shot of rooftops taken from Montmartre.&lt;/li&gt;
&lt;li&gt;Shot No. 50 of a statue in the &lt;em&gt;Parc Monceau&lt;/em&gt;. I waited 1 hour to take it, before abandoning. People sitting on the benches. Then people doing their yoga class. Then children playing around. I replaced it with another statue from the same park at a quieter spot.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;iframe allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NErn9YbZJf0&#34; style=&#34;display: block; margin:auto;&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;strong&gt;When you&#39;re trying to do a photo project but you remember your camera is a &lt;a href=&#34;https://www.xkcd.com/1719/&#34;&gt;superzoom&lt;/a&gt;&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For each shot, I took the picture in Aperture mode, with the lowest aperture available, to limit light and to have a depth of field as long as possible. My camera also has a built-in &#34;HDR mode&#34;, where it rapidly takes multiples shots, each with a different exposure, before blending them together. Since lot of shots contains harsh contrasts (e.g. shaded facades vs. bright sky), HDR mode came in handy, although it behaves badly with movement because of the delay between each exposure (the blending algorithm can then yield weird outputs). The final album contains either the HDR picture if exploitable, the Aperture one otherwise. I took some of the night-time pictures in Manual mode, as in any other mode the camera was trying too hard to get a &#34;normal&#34; exposure, which overblown artificial lights.&lt;/p&gt;
&lt;h2&gt;Editing&lt;/h2&gt;
&lt;p&gt;The first post-treatment that I applied to the videos was to stabilize them. Since I had no tripod, most of the videos contained a fair amount of micro-shaking, as well as some soft macro-movement. I stabilized the videos using ffmpeg and the &lt;code&gt;libvidstab&lt;/code&gt; filter, following &lt;a href=&#34;https://scottlinux.com/2016/09/17/video-stabilization-using-vidstab-and-ffmpeg-on-linux/&#34;&gt;this tutorial&lt;/a&gt;. Here is an example command line to stabilize a video:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;ffmpeg -i /home/valentin/Pictures/Midnight_Sorted/57/P1010379.MP4 -vf vidstabdetect -f null -&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;ffmpeg -i /home/valentin/Pictures/Midnight_Sorted/57/P1010379.MP4 -vf vidstabtransform=smoothing=30:input=transforms.trf /home/valentin/Pictures/Midnight_Sorted/57/P1010379_stab.MP4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This eliminated the micro-shaking but left some smooth overall movement, which I don&#39;t find annoying so it&#39;s okay. One side effect I noticed from stabilization was a cropping of the videos, which was problematic for shot No. 41 of the UGC Danton theater, where part of the emblem &#34;UGC Danton&#34; was cut out of the frame, so I exempted this shot from stabilization. Another side effect was a sort of &#34;distortion&#34; effect on the whole picture, which can be noticed on shot No. 5 of the Moulin Rouge. I did not worked around this, but it is rather subtle and way better than shaking.&lt;/p&gt;
&lt;p&gt;I put the shots together using &lt;a href=&#34;https://www.shotcut.org/&#34;&gt;Shotcut&lt;/a&gt;. Although I followed relatively closely the editing of the movie, my final edit is not a frame-perfect recreation.&lt;/p&gt;</summary>
			
				<category term="movies"></category>
			
		</entry>
	
		<entry>
			<title>Reading notes: July 2019</title>
			<link href="http://foobuzz.github.io/reading-notes-july-2019"/>
			<id>urn:uuid:ec4ea97e-e8fe-5a5b-a905-2cf7ca82e83e</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2019-08-03T17:03:12Z</updated>
			<summary type="html">

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.theguardian.com/cities/2019/feb/05/super-tall-super-skinny-super-expensive-the-pencil-towers-of-new-yorks-super-rich?CMP=share_btn_tw&#34;&gt;The Guardian: Super-tall, super-skinny, super-expensive: the &#39;pencil towers&#39; of New York&#39;s super-rich&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New York City has FAR (Floor Area Ratio) regulations for residential buildings. The FAR is how much living area you&#39;re allowed to have in your building as a function of the parking lot area. So with a FAR of 10 you can make a 10-storey building over the entire surface of the parking lot. However if you only make your building half the size of the parking lot then you&#39;re allowed to make it a 20 storey building. In Manhattan, the FAR value varries according to the specific area.&lt;/p&gt;
&lt;p&gt;Then there are TDR (Transferable Development Rights). If one building doesn&#39;t exploit all of its allowed surface according to its FAR, the owner can sell the remaining surface to an adjacent building, which is then allowed to surpass its own limit with what he has bought from his neighbor.&lt;/p&gt;
&lt;p&gt;Real Estate magnats in NYC are making deals to transfer livable surface from one adjacent building to another, bubbling up to gigantic residential skyscrapers, which also happen to be very thin so as to maximize height according to FAR. The current top example is &lt;a href=&#34;https://en.wikipedia.org/wiki/432_Park_Avenue&#34;&gt;432 Park Avenue&lt;/a&gt; at 425.5 meters. More are being built or scheduled to be built. Since FAR only specifies the allowed livable space, they also add &#34;technical floors&#34; to add some free height. Appartments in those buildings are sold for extreme prices to millionnaires or billionaires, who don&#39;t live in them since it is merely an investment.&lt;/p&gt;
&lt;p&gt;Some people are worried that such tall skyline will cast vast shadows to Central Park. Pro-tall-skinny-buildings counter-argument is that the total amount of allowed height is finite, and what happens is just a specific concentration of height, which might actually be preferable to what would be a uniform height, because skinny shadows move faster throughout the day than bulky shadows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.nytimes.com/interactive/2019/07/16/world/europe/notre-dame.html&#34;&gt;New York Times: Notre-Dame came far closer to collapsing than people knew. This is how it was saved.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The firefighters were called 30 minutes after the fire was detected, because the guard who went to check for the fire went to the wrong building. It is not clear whether it is because the agent who monitored the alarm misunderstood the cryptic output of the alarm UI, or gave the wrong direction, or the guard misunderstood the direction over the radio. The warning system consisted of 160 detectors and required dozens of experts to design over 6 years. Before the firefighers arrived smoke started to be visible from the outside, and the information was on Twitter.&lt;/p&gt;
&lt;p&gt;At the begining, firefighers went up the stairs of the cathedral to fight the fire directly from the attic. They later retreated because it was unstoppable, but made the the observation that the wind was bringing the fire towards the North tower. The tower holds 4 huge bells, each of which are hung on wooden beams. The fire would have set the bells lose, and considering their significant weight, their fall could potentially have damaged the tower to the point of collapse.&lt;/p&gt;
&lt;p&gt;The general supervising the situation declared that the attic was lost, and that efforts should be focused on saving the towers, especially the North one. A team of firefighers were sent on a commando mission (the most dangerous move of the night) to reach the North tower from the South tower, put the fire out, and than come back using the South tower too, which they successfully did because they&#39;re badass as hell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://time.com/5628572/elon-musk-moon-landing/&#34;&gt;Time: Elon Musk Told Us Why He Thinks We Can Land on the Moon in &#39;Less Than 2 Years&#39;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Elon Musk says SpaceX could send a man to the Moon in two years if they wanted to. When asked about sending a man to the ISS, he says it acts like the &lt;a href=&#34;https://en.wikipedia.org/wiki/Zeno%27s_paradoxes#Arrow_paradox&#34;&gt;Arrow paradox&lt;/a&gt;: everytimes they&#39;re half-way launch, they still need to cover the second half.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.cnn.com/cnnnext/dam/assets/180907100732-elon-musk-smokes-marijuana-podcast-1-large-169.jpg&#34; style=&#34;text-align:center;&#34;/&gt;&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>The One Is Two Society</title>
			<link href="http://foobuzz.github.io/one-is-two-society"/>
			<id>urn:uuid:5e75bf9a-6fc2-5e8c-bf0a-938071f5f4d2</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-10-13T07:58:08Z</updated>
			<summary type="html">

&lt;p&gt;If I wanted to waste time and energy, I could create and promote the &#34;One Is Two Society&#34;, an organization defending the idea that mathematics is wrong and that 1 = 2. The main argument would be as follows:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;(1) Let have two equal integers: a = b&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(2) Multiply by a:               a² = ab&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(3) Substract b²:                a² - b² = ab - b²&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(4) Factor both sides:           (a - b)(a + b) = b(a - b)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(5) Divide by (a - b)            a + b = b&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(6) Because a = b:               2b = b&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;(7) Divide by b:                 2 = 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I was advertising my society well enough, I think I would gather a fair number of members. In fact, I would gather anyone for whom the following criteria would be true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Curious enough to follow a mathematical demonstration&lt;/li&gt;
&lt;li&gt;Not good enough at math to spot the mathematical error (division by zero at step 5)&lt;/li&gt;
&lt;li&gt;Paranoiac and narcissist enough to think that it&#39;s possible that a little organization in his own corner must be right against what is teached at school, what is common knowledge, and what is written in every encyclopedia as being knowledge backed up by centuries of maths being based on it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Criteria 1 is relatively easy to check; although math isn&#39;t the cup of tea of all, still many people are curious enough to follow the demonstration, and good enough to understand it. Criteria 2 is the easiest to check; the vast majority of people don&#39;t spot the error. Once the demonstration reaches an absurdity, we know there must be an error, but most of us don&#39;t spot it in a first place, and it&#39;s hard to point out of the exact problem even once we know there is an error.&lt;/p&gt;
&lt;p&gt;Criteria 3, however, is the one that is hard to check. It&#39;s the one criteria that would make my society a marginal movement and not a widespread misunderstanding. Once the demonstration reaches &lt;code&gt;2 = 1&lt;/code&gt;, the vast majority of people think &#34;Ah! This is wrong. Where is the error?&#34;. Only some tiny class of people, fanciful enough, will think &#34;Oh! I&#39;ve been shown that maths are broken! 1 = 2 !!&#34;&lt;/p&gt;
&lt;p&gt;The fact that criteria 3 is the one making the difference is very important, because it means that the existence and relative popularity of my society wouldn&#39;t be a &lt;em&gt;literacy&lt;/em&gt; issue regarding &lt;em&gt;mathematics&lt;/em&gt;, it would be a &lt;em&gt;trust&lt;/em&gt; issue regarding &lt;em&gt;culture&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I believe that the relative popularity of &lt;a href=&#34;https://en.wikipedia.org/wiki/Modern_flat_Earth_societies&#34;&gt;modern flat Earth society&lt;/a&gt; can be explained with the same mechanism. When the flat-earth subject is brought into discussion, I notice that a lot of people consider that flat-earthists must be stupid or very ignorant of science. However if you look at the flat-earth literature, you realize that some of them are quite knowledgeable about the history of science related to Earth, and their fallacies can be hard to dismiss properly. It would be time consuming to properly break every one of their arguments, but we don&#39;t need to do so because we already know from culture that Earth isn&#39;t flat. From the point of view of a single individual, as soon as you remove the trust in culture, acquiring reliable knowledge of the world becomes way more complicated, and cunningly error-prone.&lt;/p&gt;
&lt;h2&gt;Exhibit 1: Bedford Level Experiment&lt;/h2&gt;
&lt;p&gt;One of the major argument from flat-earthers is the Bedford Level Experiment. The idea of this experiment is first to go to a long straight of water (we want a long, level, surface). On this long straight, regularly mount vertical shafts with a red mark always at the exact same height from the surface of the water (we can use boats or buoys to mount them), each shaft relatively far away from each other. Now go some distance away along the straight and look at all the aligned shafts with a telescope.&lt;/p&gt;
&lt;p&gt;If the Earth is truly rounded, then, viewed from the telescope, the series of red marks shoudn&#39;t be aligned vertically. If they are aligned vertically, then it means that the Earth is flat. Given the radius of the Earth that is claimed by science, specific distances to respect between the marks can be calculated so that a vertical misalignment would be clearly visible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://3.bp.blogspot.com/-60Dg8BFYKMU/WIILs56L46I/AAAAAAAARKk/MkBerD16mpo6sm_3Ah_9F4F4wqo5e3jRgCK4B/s1600/bedford-experiment.jpg&#34;/&gt;&lt;/p&gt;
&lt;p&gt;So the flat-earthers found the perfect river to perform this experiment: the &lt;a href=&#34;https://en.wikipedia.org/wiki/Old_Bedford_River&#34;&gt;Old Bedford River&lt;/a&gt;, in England, which contains a perfect 10 km straight. They did the experiment, and guess what, they viewed that all the marks were aligned, therefore proving that Earth is flat.&lt;/p&gt;
&lt;p&gt;Now, confronted with such demonstration, as a simple citizen, you have two ways to react:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can point out that the experimental protocol is invalid, because air refraction along the straight will mess around the marks alignment from the viewpoint of a far-away observer. This is a slippy argument, because it involves science and science is complicated. A flat-earther would probably counter with &#34;Yeah but what is the probability that the &lt;em&gt;all&lt;/em&gt; the marks becomes aligned after being refracted?&#34; and then you would have to do study the subject and do all sorts of calculations and unless you know your stuff you&#39;ll lose the debate.&lt;/li&gt;
&lt;li&gt;You can accept the fact that science and experimentation are delicate, error-prone things that should be carried out by professionnal, and your money is therefore on the worldwide consensus instead of the guys who went on an obscure trip to an England river. This is based on trust of science, not science itself, and you will win the debate with this.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Exhibit 2: The Flat Earth Wiki&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.tfes.org/The_Flat_Earth_Wiki&#34;&gt;The Flat Earth Wiki&lt;/a&gt; is a fascinating piece of misinformation. It exhaustively rebuts each and every argument for a round Earth in a seemingly scientific way, and constitutes as a whole a incredible corpus of fantasy science.&lt;/p&gt;
&lt;p&gt;My favorite article is &lt;a href=&#34;https://wiki.tfes.org/Universal_Acceleration&#34;&gt;Universal Acceleration&lt;/a&gt;. It rebuts the argument that since there is gravity on Earth (we don&#39;t levitate away yo), the planet should naturally arrange itself as a ball around a then-defined center of gravity. But that not how it goes in flat-earth land. In this world, the Earth is a disk, which is constantly accelerating &#34;upwards&#34; through the Universe, giving the illusion of gravity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WrKPhfd.gif&#34;/&gt;&lt;/p&gt;
&lt;p&gt;The worst is that they back it up with some general relatively, rightfully so: in general relatively, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Equivalence_principle&#34;&gt;equivalence principle&lt;/a&gt; states that it&#39;s impossible to make the difference between acceleration and gravity. For example, would you be in an accelerating spaceship, therefore pushed towards the back of the spaceship, any observable effect would be similar to gravity in this spaceship.&lt;/p&gt;
&lt;p&gt;Then you may ask how can something be accelerating constantly, since this means it would gain more and more speed, and one day it will reach and surpass the speed of light, which is impossible. But, hey, &lt;a href=&#34;https://wiki.tfes.org/Universal_Acceleration#Why_doesn.27t_the_Earth.27s_velocity_reach_the_speed_of_light.3F&#34;&gt;they&#39;ve got you here&lt;/a&gt;, with some equation and Lorentz factor and whatnots, and I know that some weird stuff happens near the speed of light, but I&#39;m not knowledgeable enough about it to confirm or disprove their calculations. Yet, again, I don&#39;t need to do so, because I know from culture that it isn&#39;t true, and therefore that their calculations or reasoning &lt;em&gt;must&lt;/em&gt; be wrong. (Anyway if the Earth can be flat, I don&#39;t see why the speed of light couldn&#39;t be surpassed.)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Although in this article I defend the value that there is in trusting science, by no means I want to discourage the understanding of it, quite the contrary. Understanding how it works and why it works is the best way to further solidify trust you can put on it. However, it is a very time consuming process and we don&#39;t always have the interest or energy to do so, hence, in my opinion, the need to have a guideline to follow that one must be able to trust.&lt;/p&gt;
&lt;p&gt;On a related note, there is a &lt;a href=&#34;https://www.quora.com/How-can-I-debate-climate-change-with-a-skeptic-without-resorting-to-emotion-and-hyperbole/answer/Richard-Muller-3&#34;&gt;Quora answer by physicist Richard Muller&lt;/a&gt; where he explains that global warming skeptics also are well equiped with ammunitions about the subject (certainly in a way more reasonable and less far-fetched way than flat-eathers, the subject being more subtle), and that you shouldn&#39;t get involved in a debate with them unless you know your stuff very well.&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>The Meaning of It All: Thoughts of a Citizen Scientist</title>
			<link href="http://foobuzz.github.io/meaning-of-it-all"/>
			<id>urn:uuid:8ee6ca76-8fc0-5c84-b255-1bd7505ad2a2</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-09-29T07:26:58Z</updated>
			<summary type="html">

&lt;p&gt;I&#39;ve been reading &lt;em&gt;The Meaning of It All&lt;/em&gt; from &lt;a href=&#34;https://en.wikipedia.org/wiki/Richard_Feynman&#34;&gt;Richard Feynman&lt;/a&gt;. It&#39;s a collection of transcripts of lectures given by Feynman at the University of Washington, Seattle, in 1963. In those lectures, Feynman discusses the relationship between science and society in an informal way.&lt;/p&gt;
&lt;p&gt;I will simply quote two excerpts from the lectures, about skepticism, which struck me as particularly interesting. The first one is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why do we grapple with problems? We are only in the beginning. We have plenty of time to solve the problems. The only way that we will make a mistake is that in the impetuous youth of humanity we will decide we know the answer. This is it. No one else can think of anything else. And we will jam. We will confine man to the limited imagination of today&#39;s human beings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Feynman opposes dogmatic explanations to the unknown. What I like very much in this argument is that what appears to be most of a concern to Feynman isn&#39;t so much that such dogmatic explanations would likely be unreliable and incorrect, but most importantly that they will be boring, because limited to the concepts that we can conceive at humanity&#39;s current state of knowledge.&lt;/p&gt;
&lt;p&gt;A famous quote from Feynman is &#34;I think nature&#39;s imagination is so much greater than man&#39;s, she&#39;s never going to let us relax.&#34; The peculiarities of Nature is a leitmotiv throughout all of Feynman&#39;s literature, and I think this point of view explains the enthusiasm and sense of wonder he conveys so well when talking about physics.&lt;/p&gt;
&lt;p&gt;The second excerpt is about the death of his wife:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I met a girl at about thirteen or fourteen whom I loved very much, and we took about thirteen years to get married. It&#39;s not my present wife, as you will see. And she got tuberculosis and had it, actually, for several years. And when she got tuberculosis I gave her a clock which had nice big numbers that turned over rather than ones with a dial, and she liked it. The day she got sick I gave it to her, and she kept it by the side of her bed for four, five, six years while she got sicker and sicker. And ultimately she died. She died at 9:22 in the evening. And the clock stopped at 9:22 in the evening and never went again. Fortunately, I noticed some part of the anecdote I have to tell you. After five years the clock gets kind of weak in the knees. Every once in a while I had to fix it, so the wheels were loose. And secondly, the nurse who had to write on the death certificate the time of death, because the light was low in the room, took the clock and turned it up a little bit to see the numbers a little bit better and put it down. If I hadn&#39;t noticed that, again I would be in some trouble. So one must be very careful in such anecdotes to remember all the conditions, and even the ones that you don&#39;t notice may be the explanation of the mystery.&lt;/p&gt;
&lt;p&gt;So, in short, you can&#39;t prove anything by one occurrence, or two occurrences, and so on. Everything has to be checked out very carefully. Otherwise you become one of these people who believe all kinds of crazy stuff and doesn&#39;t understand the world they&#39;re in. Nobody understands the world they&#39;re in, but some people are better off at it than others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What I like about this one is that Feynman doesn&#39;t try to proclaim being some sort of infallible rationale being, as it is often the case in the skepticism community, whose members often end up being quite arrogant to others. It&#39;s a very personal example where he illustrates how one can be tempted into reading &#34;signs&#34; on events which have a pretty logical explanatio, and how tricky it can be to actually find this explanation. I find it to be simply and humbly told.&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>Let's not forget about SNI</title>
			<link href="http://foobuzz.github.io/doh-sni"/>
			<id>urn:uuid:c2924597-a575-511b-8d03-46bad70e032a</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-08-11T15:07:15Z</updated>
			<summary type="html">

&lt;p&gt;Mozilla &lt;a href=&#34;https://blog.nightly.mozilla.org/2018/06/01/improving-dns-privacy-in-firefox/&#34;&gt;is launching&lt;/a&gt; one of their &#34;shield studies&#34; (experimental features they push on Firefox Nightly or some low percentage of regular Firefox&#39;s users) which consists in using DNS over HTTPS with Cloudflare&#39;s DNS (1.1.1.1) by default.&lt;/p&gt;
&lt;p&gt;As for anything over HTTPS, DNS over HTTPS (DoH) brings two guaranties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encryption: nobody can spy on the domain name being resolved between you and the resolver&lt;/li&gt;
&lt;li&gt;Authenticity: the result of the DNS query has not been altered in transit between the resolver and you&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The reason Mozilla uses Cloudflare as the default provider is firstly because in order for DoH to work, the resolver must support it, which isn&#39;t the case for many default ISP&#39;s own resolvers (used by default by most users), and secondly because they think ISPs cannot be trusted whereas Cloudflare should be: they link &lt;a href=&#34;https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/&#34;&gt;this page&lt;/a&gt;, by stating that it constitutes a &#34;very strong privacy agreement&#34;, which seems legit since there literally is the word &#34;promise&#34; in it. Forgive my skepticism, but I find this part of Mozilla&#39;s argumentation rather clumsy. A &lt;a href=&#34;https://blog.ungleich.ch/en-us/cms/blog/2018/08/04/mozillas-new-dns-resolution-is-dangerous/&#34;&gt;recent blog post&lt;/a&gt; shares my doubts.&lt;/p&gt;
&lt;p&gt;What everybody seems to forget about, however, is that in any case ISPs can still spy on the domains their users connect to. When a browser wants to start an HTTPS connection with a server, first the IP of the domain is resolved (using DNS, or DoH, as it happens), then the browser asks the server for its certificate (some data which proves that the server really is the one it says it is) using the resolved IP to route the request. However, since multiple domains can be hosted behind the same IP address, and a certificate only validates one domain, the browser must send the domain alongside the IP, so that the server can know what certificate to answer with. All of this passes through the user&#39;s ISP in clear.&lt;/p&gt;
&lt;p&gt;This is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Server_Name_Indication&#34;&gt;Server Name Indication&lt;/a&gt; (SNI), and you can read more about it in this &lt;a href=&#34;https://security.stackexchange.com/a/86741&#34;&gt;very good StackOverflow answer&lt;/a&gt;. As you may guess, some users &lt;a href=&#34;https://www.reddit.com/r/firefox/comments/890tnv/configure_dns_over_https_in_firefox/dwoqkop/&#34;&gt;on Reddit&lt;/a&gt; already made the remark, as well as &lt;a href=&#34;https://news.ycombinator.com/item?id=16166657&#34;&gt;on Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In conclusion, even if ISPs would be considered less trusted than a centralized provider, using a centralized DNS provider doesn&#39;t quite solve the problem since the domain are still sent in clear to the ISP. Although extracting the domains from TLS handshakes might be technically more complicated than just looking at DNS logs, if we&#39;re assuming malicious ISPs in a first place, there is no reason they wouldn&#39;t do it.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>Timing a simple Python command-line tool</title>
			<link href="http://foobuzz.github.io/python-perf"/>
			<id>urn:uuid:2aa730f6-5a17-5887-af58-d46501661cb2</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-08-05T12:12:00Z</updated>
			<summary type="html">

&lt;p&gt;I programmed a little &lt;a href=&#34;https://github.com/foobuzz/todo/&#34;&gt;todolist tool&lt;/a&gt; for the command line, and I&#39;m not entirely satisfied with its &#34;performance&#34;. What bothers me is that I can notice a tiny delay between the moment I hit the &lt;code&gt;todo&lt;/code&gt; command and the moment the output is written to the standard output. So I analysed how much time it took, and where the time was lost. My initial intuition was that most of the time was due to querying a SQlite database, but I was very wrong.&lt;/p&gt;
&lt;p&gt;Note that any performance number given in this article comes from an entry-level Intel Pentium-powered computer. The program is faster on my newer laptop. All the measurements are about using the bare &lt;code&gt;todo&lt;/code&gt; command which simply prints the list of pending tasks&lt;/p&gt;
&lt;h2&gt;Total time&lt;/h2&gt;
&lt;p&gt;To time the program, we can use the UNIX&#39;s &lt;code&gt;time&lt;/code&gt; program:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;$ &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; todo
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
real    0m0.097s
user    0m0.078s
sys 0m0.016s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It takes 97ms for the &lt;code&gt;todo&lt;/code&gt; command to execute, hence the very little, but noticeable, delay. As a comparison, &lt;code&gt;cat&lt;/code&gt;-ing a ~200 lines file takes about 6ms. So 97ms to print a bunch of tasks is really slow in absolute terms.&lt;/p&gt;
&lt;h2&gt;Script time&lt;/h2&gt;
&lt;p&gt;To investigate further, we need to use the &lt;code&gt;cProfile&lt;/code&gt; Python module, which will break down the time taken by each function call and each module import. &lt;code&gt;cProfile&lt;/code&gt; can be used as a stand-alone executable thanks to the &lt;code&gt;-m&lt;/code&gt; Python interpreter&#39;s flag. We&#39;re sorting the function calls by cumulative time (meaning if a function is called multiple times then all those times are summed together) descending:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;$ python -m cProfile -s cumtime ./todo.py

     &lt;span class=&#34;m&#34;&gt;34229&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; calls &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;33095&lt;/span&gt; primitive calls&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; in &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;.050 seconds

 Ordered by: cumulative &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;

 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important information here is that cProfile tells us that the code has been executed in &lt;code&gt;0.050 seconds&lt;/code&gt;. We are missing 47ms to be consistent with the 97ms total time. Well, surprise, those 47ms are actually the time the Python interpreter takes to start up, before even starting executing the script. This can be verified by timing the interpreter while it executes the &lt;em&gt;empty program&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;$ &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; python -c &lt;span class=&#34;s1&#34;&gt;&#39;&#39;&lt;/span&gt;
real    0m0.045s
user    0m0.028s
sys 0m0.012s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;45ms. Checks out with a little margin of error.&lt;/p&gt;
&lt;p&gt;That is very bad. It means that almost 50% of the total time it takes for the program to run is due to Python starting up, which is a contextual aspect out of my control.&lt;/p&gt;
&lt;p&gt;Let&#39;s analyse the other 50%.&lt;/p&gt;
&lt;h2&gt;Main time&lt;/h2&gt;
&lt;p&gt;I now look at the listing of function calls, sorted by cumulative time, descending (I&#39;ve removed lines containing Python internal stuff):&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt; ncalls  tottime  percall  cumtime  percall filename:lineno(function)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.050    0.050 todo.py:3(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.028    0.028 todocore.py:120(main)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.021    0.022 todocore.py:36(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.012    0.012 docopt.py:493(docopt)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;     35    0.000    0.000    0.010    0.000 re.py:277(_compile)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.010    0.010 todo.py:527(feedback_todo)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;     29    0.000    0.000    0.010    0.000 todo.py:676(safe_print)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.010    0.010 subprocess.py:356(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;     22    0.000    0.000    0.010    0.000 sre_compile.py:563(compile)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;     23    0.000    0.000    0.009    0.000 re.py:221(compile)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.008    0.008 docopt.py:40(fix)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      2    0.000    0.000    0.007    0.003 todo.py:595(get_basic_task_string)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      2    0.000    0.000    0.007    0.003 todo.py:612(get_task_string_components)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.006    0.006 configparser.py:119(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      2    0.000    0.000    0.006    0.003 todo.py:683(get_datetime)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;   1660    0.001    0.000    0.006    0.000 docopt.py:34(__eq__)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;   42/1    0.001    0.000    0.006    0.006 docopt.py:45(fix_identities)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;     22    0.000    0.000    0.006    0.000 sre_parse.py:750(parse)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;  53/22    0.000    0.000    0.006    0.000 sre_parse.py:363(_parse_sub)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.004    0.004 dbapi2.py:23(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;      1    0.000    0.000    0.002    0.002 datetime.py:5(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;  [...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A bit a guidance here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;cumtime&lt;/code&gt; is the column we&#39;re interested in&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;filename:lineo(function)&lt;/code&gt; is the column giving us the performance culprits. In this last column, module imports are marked with the conventional name &lt;code&gt;&amp;lt;module&amp;gt;&lt;/code&gt;. A module import is simply the source code from this module being executed from top to bottom (with the side-effect of its top-level variables being binded as attributes of the object the module is being imported as)&lt;/li&gt;
&lt;li&gt;The first line is always the execution of the overall script (no different than importing it: execution from top to bottom) and therefore takes the entire time measured&lt;/li&gt;
&lt;li&gt;The only thing that &lt;code&gt;todo.py&lt;/code&gt; does is importing &lt;code&gt;todocore.py&lt;/code&gt;, and executing its &lt;code&gt;main&lt;/code&gt; function. The only thing that &lt;code&gt;todocore.py&lt;/code&gt; does is importing libraries and defining functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The important information here is that the &lt;code&gt;main&lt;/code&gt; function takes 28ms to execute. We are missing 22ms to be consistent with the overall 50ms execution time. Those 22ms are in the importation of &lt;code&gt;todocore.py&lt;/code&gt;, which is not satisfying, because &lt;code&gt;todocore.py&lt;/code&gt; does nothing. It imports libraries and defines functions. Well, turns out that in Python, importing libraries isn&#39;t nothing at all.&lt;/p&gt;
&lt;p&gt;If we grep the previous listing with &lt;code&gt;&amp;lt;module&amp;gt;&lt;/code&gt; to filter imports only, then we end up with:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;    1    0.000    0.000    0.021    0.022 todocore.py:36(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;    1    0.000    0.000    0.010    0.010 subprocess.py:356(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;    1    0.000    0.000    0.006    0.006 configparser.py:119(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;    1    0.000    0.000    0.004    0.004 dbapi2.py:23(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;    1    0.000    0.000    0.002    0.002 datetime.py:5(&amp;lt;module&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line is the root import of &lt;code&gt;todocore.py&lt;/code&gt; (22 ms) and the remaining lines are modules from the standard library, whose import&#39;s performances together sum up to the root 22 ms.&lt;/p&gt;
&lt;p&gt;So, 75% of the execution time has nothing to do with my program. The first 50% is the interpreter starting up, and then 25% is due to importing stuff from the standard library. Any optimization that I can do on my code will be bounded under ~25% of the overall execution, that is 28 ms.&lt;/p&gt;
&lt;p&gt;In fact, I found that imports can be somewhat optimized. In my case, there is one import that is different than the others: &lt;code&gt;subprocess&lt;/code&gt; is only actually used for a very specific use-case which is to open a text editor when the user wants to edit a task. In Python, you don&#39;t necessarily have to do imports at the top of the script, you can do them inside a function. This means that I could avoid to systematically import &lt;code&gt;subprocess&lt;/code&gt;, and only import it when necessary instead. This made me win 10 ms.&lt;/p&gt;
&lt;h2&gt;Business Logic time&lt;/h2&gt;
&lt;p&gt;Near the top of the listing, there is an important function call that takes quite some time:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;    1    0.000    0.000    0.012    0.012 docopt.py:493(docopt)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;docopt&lt;/code&gt; is the function that parses the command-line arguments. It takes 12 ms out of 28 ms total in &lt;code&gt;main&lt;/code&gt;. The command-line in question being: &lt;code&gt;todo&lt;/code&gt;. In absolute terms, such performance is quite ridiculous.&lt;/p&gt;
&lt;p&gt;So, finally, after the interpreter starting up, after the imports being done, after the command-line being parsed, my code, at last, executes in 16 ms.&lt;/p&gt;
&lt;p&gt;The point of &lt;a href=&#34;https://github.com/docopt/docopt&#34;&gt;docopt&lt;/a&gt; is that you define the documentation of your command-line interface, and it automatically generates a parser for it (the opposite of e.g. the standard &lt;code&gt;argparse&lt;/code&gt; that generates a documentation from a parser you build with its API). I studied a bit the performance of docopt and realized that a big performance hit was to parse the documentation text and build the parser from that. Once the parser is built, parsing the command-line is fast. This is sad, because the internal Python object representing the parser could be literally hard-coded in the source code, instead of being generated once again from the text everytime the program is invoked.&lt;/p&gt;
&lt;p&gt;I though I would win some time by using the standard &lt;code&gt;argparse&lt;/code&gt; since it builds a parser programmatically and doesn&#39;t have to parse text, but after experimenting I found out that I was wrong. With &lt;code&gt;argparse&lt;/code&gt;, you add a command that your parser is able to parse with the &lt;code&gt;add_argument&lt;/code&gt; method, and this method took 1 ms to execute. So since my program has more than 12 commands, it was slower than docopt&#39;s 12 ms.&lt;/p&gt;
&lt;p&gt;Looks like parsing command lines is hard. How the hell does git even work out.&lt;/p&gt;
&lt;p&gt;I didn&#39;t investigated much further into the business logic, because it&#39;s all broken down in little pieces of a few milliseconds or less that together sum up to the 16 ms. There is the notable 7 ms contribution of the function &lt;code&gt;get_task_string_components&lt;/code&gt;, which, I found out, was so slow because some tasks in todo&#39;s output contain a deadline alongside their label, and Python is slow to convert an internal datetime object to a string representation when using the &lt;code&gt;strftime&lt;/code&gt; function and a date format. You can make it an order of magnitude faster by doing it yourself with basic string formatting.&lt;/p&gt;
&lt;p&gt;I searched for the &lt;code&gt;fetch_all&lt;/code&gt; function, which is the function from the sqlite3 library that actually performs the query on the sqlite database. This was my initial intuition for the bottleneck. It was deep down the listing, with a cumtime of &#34;0.000&#34;, which means it executes under half of a millisecond.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a toy analysis on my toy program, but I get valuable lessons from it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can very wrong about the bottleneck. You should measure.&lt;/li&gt;
&lt;li&gt;If you want it to be snappy, you should use a compiled language&lt;/li&gt;
&lt;li&gt;If you really want to be serious about optimization, then you&#39;ll most likely need to abandon standard stuff and implement yourself the stack of some specific paths all the way to the bottom&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;No. 3 makes me wonder: when you do a Google Search, from your browser all the way to Google hardware, what is the percentage of it that is standard, and what is the percentage of it that is custom-made?&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>How to encrypt messages on Linux</title>
			<link href="http://foobuzz.github.io/encrypting-strings"/>
			<id>urn:uuid:4863295b-d8e6-5414-8e25-4a5168f88b5b</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-04-09T20:03:16Z</updated>
			<summary type="html">

&lt;p&gt;Disable Bash history:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;unset HISTFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Encrypt:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo &#39;your string here&#39; | gpg -c | base64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decrypt:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo &#39;encrypted here&#39; | base64 -d | gpg -d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both commands will open a graphical prompt for the password.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>Do not use query string parameters for cache busting</title>
			<link href="http://foobuzz.github.io/cache-bust"/>
			<id>urn:uuid:0939ffb3-646d-5508-9fa7-037247b8669a</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-03-25T15:52:11Z</updated>
			<summary type="html">

&lt;p&gt;When you want to refresh some static resource that might have been cached by caches you don&#39;t have control over, you have to change the URL of the resource so that those caches won&#39;t serve the obsolete version, a practice known as &lt;em&gt;cache busting&lt;/em&gt;. One way to bust cache is to use a version number in a query string parameter when referencing the resource.&lt;/p&gt;
&lt;p&gt;For example, if your HTML uses &lt;code&gt;theme.css&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;stylesheet&#34;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;text/css&#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;theme.css&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and that, for some reason, you lose control over cached versions of the stylesheet (e.g. the stylesheet is served with the HTTP &lt;code&gt;Cache-Control: public&lt;/code&gt; header along with an aggressive &lt;code&gt;max-age&lt;/code&gt; that will make caches all over the wire cache it for a long time), then you can always &#34;bust&#34; the cache by serving this new link:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;stylesheet&#34;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;text/css&#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;theme.css?v=2&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This changes the URL of the stylesheet, meaning caches won&#39;t serve the old version. Other variants include renaming the file (&lt;code&gt;theme.v2.css&lt;/code&gt;) or renaming the path of the file (&lt;code&gt;/v2/theme.css&lt;/code&gt;). However those variants are a bit more complicated to implement because they require to rename the files before deploying, whereas the query string method only requires to update the reference in the HTML, since static servers simply ignore query string parameters.&lt;/p&gt;
&lt;p&gt;You shouldn&#39;t, however, use the query string method, for the following reason: if at the moment you&#39;re serving &lt;code&gt;theme.css?v=2&lt;/code&gt; anyone on the Internet issues a GET request to &lt;code&gt;theme.css?v=3&lt;/code&gt; then caches will associate the v3 to the content of the v2. When you will want to deploy a new version and will update the query string parameter, you&#39;ll see that the resource doesn&#39;t update. A malicious client could be even more vicious and query something like &lt;code&gt;theme.css?v=6&lt;/code&gt; when you&#39;re at &lt;code&gt;v=3&lt;/code&gt; to let you see how well the system works until a few days when, updating from &lt;code&gt;v=5&lt;/code&gt;, you try to deploy &lt;code&gt;v=6&lt;/code&gt; and witness the resource going back in time to its state as it was at &lt;code&gt;v=3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using a version number in the filename is much preferable, for the simple reason that if someone requests &lt;code&gt;theme.v2.css&lt;/code&gt; when you&#39;re serving &lt;code&gt;theme.v1.css&lt;/code&gt;, the server will respond with a 404 error and no content, which is of course not a cacheable response.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>Nessun Dorma in Rogue Nation</title>
			<link href="http://foobuzz.github.io/rogue-nation"/>
			<id>urn:uuid:072cddac-d218-56fb-b66b-d76709b3bd48</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-03-14T19:39:37Z</updated>
			<summary type="html">

&lt;p&gt;In &lt;em&gt;Mission Impossible 5: Rogue Nation&lt;/em&gt;, one of the main action scenes takes place at an opera in Vienna, during a representation of the opera &lt;em&gt;Turandot&lt;/em&gt; from composer Puccini. This scenes features one the most famous theme of this opera, &lt;a href=&#34;https://en.wikipedia.org/wiki/Nessun_dorma&#34;&gt;Nessun Dorma&lt;/a&gt;. It&#39;s a very famous theme that probably evokes something even for those (like me) who doesn&#39;t listen much to classical music.&lt;/p&gt;
&lt;p&gt;At the end of the movie, during an emotional moment, the same theme can be heard in the soundtrack of the movie itself, although timidly. Here are two YouTube links with the corresponding timestamps so that you can compare:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/rTFUM4Uh_6Y?t=1m6s&#34;&gt;Pavarotti - Nessun Dorma (1:06 in)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/lNQu3t0nan8?t=45s&#34;&gt;Rogue Nation Soundtrack-Track 17-Finale and Curtain Call (45 seconds in)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I find this is a really nice touch from the film soundtrack composer Joe Kraemer.&lt;/p&gt;</summary>
			
				<category term="movies"></category>
			
		</entry>
	
		<entry>
			<title>2018 Oscars Predictions</title>
			<link href="http://foobuzz.github.io/oscars2018"/>
			<id>urn:uuid:cac4edf9-d26f-5794-9fea-e4a70dcbd1c4</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-02-25T10:59:58Z</updated>
			<summary type="html">

&lt;p&gt;Here are my predictions for the winners of the 2018 Academy Awards, whose ceremony will take place next Sunday.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Picture&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Lady Bird&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Director&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Christopher Nolan (Dunkirk)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Actor (leading)&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Gary Oldman (Darkest Hour)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Actress (leading)&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Frances McDormand (Three Billboards*)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Actor (supporting)&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Sam Rockwell (Three Billboards*)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Actress (supporting)&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Allison Janney (I, Tonya)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Original Screenplay&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Three Billboards*&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Adapted Screenplay&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Call Me by Your Name&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Original Score&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Phantom Thread&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Visual Effects&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Blade Runner 2049&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Cinematography&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Blade Runner 2049&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Best Animated Picture&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Coco&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; &lt;em&gt;Three Billboards Outside Ebbing, Missouri&lt;/em&gt;&lt;/p&gt;</summary>
			
				<category term="movies"></category>
			
		</entry>
	
		<entry>
			<title>Git branches and slashes</title>
			<link href="http://foobuzz.github.io/git-slashes"/>
			<id>urn:uuid:c1051410-9ece-53a6-8eb9-c7a98c9edf3d</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-02-11T11:55:53Z</updated>
			<summary type="html">

&lt;p&gt;I&#39;ve found out that using slashes to name git branches in a hierarchy fashion is limited to only one level:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;$ git checkout -b feature/public-api
Switched to a new branch &lt;span class=&#34;s1&#34;&gt;&#39;feature/public-api&#39;&lt;/span&gt;
$ git checkout -b feature/public-api/oauth2
fatal: cannot lock ref &lt;span class=&#34;s1&#34;&gt;&#39;refs/heads/feature/public-api/oauth2&#39;&lt;/span&gt;: &lt;span class=&#34;s1&#34;&gt;&#39;refs/heads/feature/public-api&#39;&lt;/span&gt; exists&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; cannot create &lt;span class=&#34;s1&#34;&gt;&#39;refs/heads/feature/public-api/oauth2&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The reason for this is that a git branch is simply a text file in the &lt;code&gt;.git/branches&lt;/code&gt; directory, containing the hash of the commit at the tip of the branch. When a branch&#39;s name contains a slash, git creates a subdirectory to store this file in. So the hash of the branch &lt;code&gt;feature/public-api&lt;/code&gt; is stored at &lt;code&gt;.git/branches/feature/public-api&lt;/code&gt;. If you try to add one more level to that, then git will try to create the &lt;code&gt;.git/branches/feature/public-api&lt;/code&gt; directory, which is impossible, because there&#39;s already a file with this name.&lt;/p&gt;
&lt;p&gt;It&#39;s yet another &lt;a href=&#34;https://en.wikipedia.org/wiki/Leaky_abstraction&#34;&gt;leaky abstraction&lt;/a&gt; from git, once again for the purposes of performance and simplicity of implementation, which I can understand.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>The Social Network and "We need to expand"</title>
			<link href="http://foobuzz.github.io/the-social-network"/>
			<id>urn:uuid:85949a66-3539-556d-b9ff-8fd0ff986c04</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2018-01-28T20:31:19Z</updated>
			<summary type="html">

&lt;p&gt;I recently watched &lt;em&gt;The Social Network&lt;/em&gt; yet another time. I noticed something in the film that I hadn&#39;t in my previous viewing.&lt;/p&gt;
&lt;p&gt;There is a scene in the movie where Mark Zuckerberg is in a bar and notices that his ex-girlfriend Erica Albright is having a drink with her friends. He goes to her and ask her for a few minutes in private so that they can talk. Erica declines; she basically is still angry about the mean things he has written about her on his blog after they broke up at the beginning of the movie. Mark repeatedly asks for a few minutes of private discussion, in spite of the rebuttals. He eventually abandons and joins his friend Eduardo, who thinks he has done the good thing of apologizing to her (which Mark didn&#39;t). Mark, seemingly still frustrated of the scene with Erica, only says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We need to expand&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my previous viewings, I took this line as yet another random example of Mark switching subjects rapidly, making hard to track what he is thinking about. In my most recent viewing, however, I realized that the reason he suddenly wants to expand is because he has realized that it&#39;s impossible for him to talk to Erica in real life, but if Facebook becomes big enough, Erica will eventually become a user of it, and that will provide him with a way of reaching out to her through a medium he&#39;s comfortable with. He wants Facebook to expand because he wants it to become so big it&#39;s the default way of reaching out to someone, which is a long shot at bypassing his own communication problems in real life.&lt;/p&gt;
&lt;p&gt;At the end of the movie, when Facebook has effectively became this big, Mark loads Erica&#39;s profile, which, as planned, exists, and sends her a friend request.&lt;/p&gt;
&lt;p&gt;This reading of this line gives two important pieces of insight about Mark&#39;s state of mind during the movie:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How visionary he is. It must take some grand vision of his own project to see the possibility of it becoming this big in scope and popularity.&lt;/li&gt;
&lt;li&gt;How concerned he is about his relationship with Erica. If this whole interpretation is correct, one of the reason he built Facebook was to talk to her. This is also hinted at in the dance-club scene where Sean Parker explains that the original reason he started Napster was to impress a girl. Mark then asks him if he sometimes still thinks about this girl, revealing that he, himself, sometimes thinks about Erica.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&#39;s something weird in considering Facebook as a better way than real life to reach out privately to someone. First because social networks are known to be a place where people don&#39;t show their true selves, and second because the data collection from the company itself makes it not so much of a private space. When Mark abandons trying to talk to Erica, she says &#34;and good luck with your... video game.&#34; Whatever he&#39;s trying to build, and no matter how addictive and popular it is, it&#39;s going to be artificial and won&#39;t stand up to reality.&lt;/p&gt;</summary>
			
				<category term="movies"></category>
			
		</entry>
	
		<entry>
			<title>Image orientation in the web</title>
			<link href="http://foobuzz.github.io/exif-web"/>
			<id>urn:uuid:9be99faf-759d-5c3d-b842-e370985ac242</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-10-27T22:00:00Z</updated>
			<summary type="html">

&lt;p&gt;I&#39;m building a web gallery made for self-hosting. When I tested the first prototype of my gallery with my personal pictures, I immediately noticed that something was wrong with all the pictures in portrait format: their orientation was wrong. It was odd, because any other mean of watching the pictures, such as my camera and my image viewer on Linux, rendered the correct orientation.&lt;/p&gt;
&lt;p&gt;The reason the images were wrongly orientated is because my camera uses Exif data in order to encode the actual orientation of the image. Exif (Exchangeable image file format) is a collection of metadata such as GPS location, date and time, etc, about the picture that was taken, that is contained in the file, alongside the actual image data. The image is always stored in &lt;em&gt;landscape&lt;/em&gt; mode, and the orientation is solely encoded in the Exif data.&lt;/p&gt;
&lt;p&gt;This is not new nor bizarre. In the old days, camera did not know whether a picture was taken in landscape orientation or in portrait orientation (or upside-down) and people had to manually rotate their images on their computer. Then came cameras with orientation detection, which were able to tell how they were orientated while taking the picture. However, instead of actually rotating the image (that is, the content), such cameras simply indicated the orientation via the Exif orientation tag. All modern cameras do that, and most modern software knows how to read Exif data in order to display the proper orientation. Except browsers.&lt;/p&gt;
&lt;p&gt;Actually, browsers know too. If you directly open an image in a modern browser, the orientation is correct. It&#39;s only when the image is &lt;em&gt;embedded&lt;/em&gt; in a web page (via &lt;code&gt;img&lt;/code&gt;) that the orientation might be wrong. Fortunately, there is a way to tell the browser to use Exif data to display the correct orientation, thanks to the CSS &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/image-orientation&#34;&gt;&lt;code&gt;image-orientation&lt;/code&gt;&lt;/a&gt; property:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;c&#34;&gt;image-orientation: from-image; /* Use EXIF data from the image */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, as of today, this is still an experimental standard, and it only works in Firefox. &lt;a href=&#34;http://caniuse.com/#search=image-orientation&#34;&gt;No joke&lt;/a&gt;. iOS Safari is a special case, as it doesn&#39;t support the property, but doesn&#39;t need to as it honors Exif by default. Overall, &lt;strong&gt;there is currently no reliable pure HTML/CSS solution to properly orientate pictures in a web page according to Exif data.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if we accept the lack of support for &lt;code&gt;image-orientation&lt;/code&gt;, its specification itself is bizarre. By default, Exif orientation is ignored. Shouldn&#39;t &lt;code&gt;from-image&lt;/code&gt; be the default? To understand the current state of specification and of support, I&#39;ve searched and read the Firefox bug tracker, the Chromium bug tracker and the W3C mailing list. More precisely, I&#39;ve found the following threads quite interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=298619&#34;&gt;Bug 298619&lt;/a&gt; on Bugzilla: &lt;em&gt;(exif) should consider using exif orientation flag when displaying JPEG images&lt;/em&gt;, reported in June 2005&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=56845&#34;&gt;Issue 56845&lt;/a&gt; in the Chromium bug tracker: &lt;em&gt;EXIF orientation is ignored&lt;/em&gt;, reported in September 2010&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.w3.org/Archives/Public/www-style/2011Dec/0001.html&#34;&gt;This thread&lt;/a&gt; in the W3C mailing list: &lt;em&gt;[css3-images] honoring EXIF orientation from images&lt;/em&gt;, started in November 2011&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason Firefox bug report is so well ahead of Chromium&#39;s one is because the Chromium project started in 2008 while Firefox had already a solid community in 2005. In fact when the Chromium bug was reported in 2010, Firefox hadn&#39;t made much progress on the bug since the third answer to the bug was posted in 2009 and was just trying to attract more attention to it.&lt;/p&gt;
&lt;p&gt;Three main points can be extracted from these discussions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nobody had planned to implement the standard.&lt;/strong&gt; As can be seen in the mailing list above, the W3C started worrying about Exif in 2011, after browsers started worrying about it for very practical reasons. Browsers had no plan to implement the standard. They flat-out ignored it until Exif became mainstream enough in order to cause &#34;bugs&#34;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The alert was raised by smartphones and email.&lt;/strong&gt; The Exif-related bugs started to appear in emails because of photos sent directly out of smartphones. The iPhone started using the Exif standard quite early on, and people started sharing pictures by email directly with their phone. Since the &#34;default&#34; way people hold their phone is vertical, it means that many pictures exchanged by mail suddenly depended on Exif. For this reason, the Bugzilla bug tracker mostly worried about Thunderbird while the Chromium bug tracker mostly worried about Gmail.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everybody feared breaking the web.&lt;/strong&gt; A straightforward support for Exif orientation by default was considered out of question by all parties (browsers and W3C) because they thought it would break the web. The idea is the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Someone took a picture. The picture carries Exif data. Photographer opened the picture with a software application that doesn&#39;t understand Exif data and saw the picture badly oriented. Photographer manually rotated the picture so that it looked good. Picture is now inconsistent with Exif data. If the browser suddenly starts honoring Exif data by default, picture is badly oriented again.&lt;/p&gt;
&lt;p&gt;As you can see, the scenario is based on the idea that the web contains a lot of pictures whose actual orientation is &lt;em&gt;inconsistent&lt;/em&gt; with their Exif orientation. In such case, a support for Exif orientation can break sites that worked very well until the support was installed. However, there was no data to support such claim. Some people in the threads pointed out that the web might actually not contain so many such pictures and that &lt;em&gt;not supporting Exif orientation might be causing more breakage than supporting it&lt;/em&gt;, but this opinion was mostly ignored.&lt;/p&gt;
&lt;p&gt;As the fear of breaking the web related only to images embedded in pages, most browsers implemented partial support for Exif orientation: it worked when a picture was directly opened as a file, but not when it was displayed using &lt;code&gt;img&lt;/code&gt;. The answer from the W3C to this compatibility problem was to allow developers to opt-in to Exif orientation via &lt;code&gt;image-orientation: from-image;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With hindsight, it seems that many contributors in those threads weren&#39;t aware of how widespread the support for Exif was among cameras and among other types of photo viewers. As I said, they basically waited for the standard to become mainstream enough to cause bugs, and even then some of them were still questioning the relevancy of the standard.&lt;/p&gt;
&lt;p&gt;I&#39;ve honestly no idea whether supporting Exif by default would cause more damage on the web than the damage the lack of support is currently causing, but the fact is that today, browsers can cause bad surprises to web developers and seem to be quite late on the Exif game. Apparently Apple didn&#39;t wonder much about legacy when they honored Exif by default on their iPhones apps, maybe browsers should follow the lead.&lt;/p&gt;
&lt;p&gt;As of today, the only way for a site such as my photo gallery project to store and display pictures properly is to rotate the picture according to the Exif orientation tag upon acquiring it (server-side), get rid of the tag, and then display the picture without any additional CSS. The web is basically living in denial of the Exif orientation standard, while every other piece of software is dealing with it.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>Displaying colors in the terminal</title>
			<link href="http://foobuzz.github.io/termicolor"/>
			<id>urn:uuid:eeab19e0-b5fc-5561-a019-58a60f77f8fd</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-07-03T15:09:44Z</updated>
			<summary type="html">

&lt;p&gt;The next version of &lt;a href=&#34;https://github.com/foobuzz/todo/&#34;&gt;my terminal-based ToDo application&lt;/a&gt; will include colors. This article is a synthesis of what I learned from implementing this feature.&lt;/p&gt;
&lt;p&gt;In the terminal, color is coded via escape codes. Colors are just a specific feature of many existing &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;ANSI escape codes&lt;/a&gt; that enable various actions and formatting for the terminal. An ANSI escape code is a sequence of ASCII characters in the following form:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;ESC[n1;n2;...L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code&gt;ESC&lt;/code&gt; is the ESCape ASCII character (#27), &lt;code&gt;L&lt;/code&gt; is a letter indicating what kind of formatting to turn on, and &lt;code&gt;n1&lt;/code&gt;, &lt;code&gt;n2&lt;/code&gt;,... are parameters for the given action/formatting. For example, the letter &lt;code&gt;A&lt;/code&gt; (resp. &lt;code&gt;B&lt;/code&gt;) is the code for moving the cursor up (resp. down), and its only parameter indicates how many cells the cursor should be moved. To get a demo, you can open a terminal and type:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo -e &#34;\e[5B&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The prompt for your next command should appear down the first one with a few spare lines. The &lt;code&gt;-e&lt;/code&gt; flag allow the interpretation of backslash escape, the &lt;code&gt;\e&lt;/code&gt; escape corresponding to the ESC character. The quotes are necessary for the whole ANSI escape code to be interpreted.&lt;/p&gt;
&lt;p&gt;All graphical-related codes come with the letter &lt;code&gt;m&lt;/code&gt;, with the parameter(s) indicating what kind of formatting to apply. Since such escape code turns &#34;on&#34; the associated formatting for all text following, there&#39;s the special parameter &lt;code&gt;0&lt;/code&gt; (escape code &lt;code&gt;ESC[0m&lt;/code&gt;) which resets everything back to normal. Bash also resets everything when a command has terminated, so if you test escape codes with &lt;code&gt;echo&lt;/code&gt; as in the previous example, you probably won&#39;t have to use the reset escape code manually.&lt;/p&gt;
&lt;p&gt;I wish the first example I could give would be parameter &lt;code&gt;5&lt;/code&gt; which enables blinking, but apparently it&#39;s not supported anymore by most terminals :-( (much like the HTML &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; element isn&#39;t supported anymore by browsers. Maybe &lt;code&gt;ESC[5m&lt;/code&gt; was &lt;a href=&#34;http://www.montulli.org/theoriginofthe%3Cblink%3Etag&#34;&gt;implemented by an engineer being drunk&lt;/a&gt; too.)&lt;/p&gt;
&lt;p&gt;So, I&#39;ll directly get to colors. There&#39;s 9 different parameters reserved for foreground colors (color of the text). Parameters 30 through 37 encode the 8 primary colors: black, red, green, yellow, blue, magenta, cyan, white. So, for a green hello world, you would type:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo -e &#34;\e[32mHello, world!&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These colors correspond to the colors you obtain when you &#34;turn on&#34; the components of the RGB coordinates. For example, black is (0, 0, 0), red is (R, 0, 0), magenta is (R, 0, B), etc. Since there are 3 components there are 2^3 = 8 primary colors. For some reason escape codes [30-37] render dark flavors of the colors. For example, red is only RGB(205, 0, 0)&lt;sup&gt;[1]&lt;/sup&gt;. Yellow is the most obvious one, you can try it yourself:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo -e &#34;\e[33mSupposed to be yellow!&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It turns out that if you mix colors with bold (parameter number 1), colors are pushed to their full intensity:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo -e &#34;\e[1;33mActually yellow!&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then there&#39;s the parameter number 38. This one awaits other parameters after itself. Either one, either three. In the case of three additional parameters, those parameters indicates the RGB coordinates of the color. So-called &#34;true colors&#34; are only supported by some advanced terminal emulators, but not by xterm&lt;sup&gt;[2]&lt;/sup&gt;. You can try it out with yellow again:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;echo -e &#34;\e[38;0;255;255mActually yellow!&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the case of only one additional parameter, this parameter should be a number between 0 and 255 (included) corresponding to a color in the 256-colors palette. Now, what is &#34;the 256-colors palette&#34;. Well, while &lt;a href=&#34;https://en.wikipedia.org/wiki/8-bit_color&#34;&gt;there isn&#39;t one unique standard&lt;/a&gt; to store colors in only one byte, &lt;a href=&#34;https://en.wikipedia.org/wiki/Xterm&#34;&gt;xterm&lt;/a&gt; comes with its specific palette which you can find &lt;a href=&#34;http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html&#34;&gt;here&lt;/a&gt;. It seems that 256 colors are supported quite widely.&lt;/p&gt;
&lt;p&gt;This is how this palette work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Codes in the range [0;7] are the 8 primary colors in dark mode (same as produced by the parameters 30 through 37 previously seen)&lt;/li&gt;
&lt;li&gt;Codes in the range [8;15] are the bright version of the 8 primary colors (same as produced by parameters 30 through 37 mixed with bold)&lt;/li&gt;
&lt;li&gt;Codes in the range [16;231] are all the other colorful colors (isn&#39;t that a nice term to designate non gray-level colors). Code 16 is (0, 0, 0) and then coordinates are incremented with regular steps. The first step is a 95 increment, then there are 4 other steps which are 40 increment. So it goes this way:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;codehilite&#34;&gt;
&lt;pre&gt;
&lt;code&gt;
    16  (0, 0, 0)
    17  (0, 0, 95)
    18  (0, 0, 135)
    19  (0, 0, 175)
    20  (0, 0, 215)
    21  (0, 0, 255)
    22  (0, 95, 0)
    23  (0, 95, 95)
    24  (0, 95, 135)
    ...
    231 (255, 255, 255)
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Codes in [232;255] are gray levels (R = G = B). It starts at (8, 8, 8) and increments by steps of 10, arriving at (238, 238, 238) after 23 steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, there&#39;s parameter number 39 that sets the foreground color to its default. It can be used as a foreground-color-specific reset.&lt;/p&gt;
&lt;p&gt;Parameters 40 through 49 define the same behavior, but for background color.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&#34;&gt;RGB values for the 8 primary colors in different environments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://gist.github.com/XVilka/8346728#now-supporting-truecolour&#34;&gt;List of terminal emulators supporting true colors&lt;/a&gt;&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>equitext</title>
			<link href="http://foobuzz.github.io/equitext-blog"/>
			<id>urn:uuid:02d649fa-76fe-5dd9-b6b1-b7f870efcd96</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-03-28T15:42:32Z</updated>
			<summary type="html">

&lt;p&gt;I&#39;ve never been satisfied with the vulnerability of substitution ciphers being the frequencies of characters in texts. My main concern is that it depends on the statistics of the language the message is written in. While languages such as English or French (and most natural languages I guess) sure have distinctive frequency distributions, we can imagine a language where letters appear approximately the same amount of time in written texts. In such case, a frequency analysis isn&#39;t feasible, at least on single letters.&lt;/p&gt;
&lt;p&gt;While I&#39;m no expert in cryptography, I think that this wouldn&#39;t mean that a substitution cipher isn&#39;t broken and I believe plenty of other attacks would still be possible. Brute force, to begin with. The 26 letters of the alphabet offer 26! possible substitution keys. That&#39;s 12 orders of magnitude less than 2^128 yet 128 bit keys are considered weak by today&#39;s standards.&lt;/p&gt;
&lt;p&gt;Anyway, out of curiosity I cogitated about a method that would take a text and somehow transform it in order to produce another text in which every character appears the same amount of time. I ended up with a text-to-text encoding for which I&#39;ve written an implementation in Python in a module called &lt;em&gt;equitext&lt;/em&gt;. Here&#39;s a demo:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;equitext&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;A histogram is a graphical representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable (quantitative variable) and was first introduced by Karl Pearson.&#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;histogram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.145&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.09&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===============================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.063&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.059&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.059&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===========================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.054&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.05&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.032&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.032&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.027&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=============&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.027&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===========&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.023&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=========&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.018&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=========&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.018&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;======&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.014&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;======&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.014&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;======&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.014&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;====&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.009&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;====&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.009&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;====&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.009&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&#39; ImobKAfgh)levscPwtp.(ydarnqui mrqolb(fevItu.npgiwyasAdch)KP sdc.pqrAnmihtaovfuKegw)lbIP(y huynbqo(iswlfIr.eP)gmtAapvKcd oKyahgsmwe)ntfuIip.PlrvqAd(bc (tawq.vAcplugI)mfsndyoirbPeKh( aeifnrPvtdhqwImgpylu.cb)AKos(.PwtsIboufmipKeAahv gn)yqldrc grPKIvil(dyA)s.hcpuqtbmaeofwn oKs(c)AgP.uhevIlqarmtpwnfydbi vwmhKqlrbf()ietopysPc.IudngAa&#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;histogram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;u&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;P&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;========================================================================&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.033&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equitext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&#39;A histogram is a graphical representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable (quantitative variable) and was first introduced by Karl Pearson.&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The encoded text is about 1.44 more lengthly than the original, although this depends on the size of the alphabet of the original text, that is, the number of unique characters it contains. 1.44 is the number for a message containing only letters of the alphabet. I explain this in the next part.&lt;/p&gt;
&lt;p&gt;Two weeks ago I published &lt;a href=&#34;https://www.reddit.com/r/codes/comments/4af4uc/try_this/&#34;&gt;an encrypted message&lt;/a&gt; on Reddit on the /r/codes subreddit. The message has been first encoded using equitext then encrypted by a substitution whose key is a permutation of the text&#39;s alphabet chosen at random. The post haven&#39;t get much attention, but someone nevertheless figured out interesting properties.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;In a first time we&#39;ll assume that the text to encode is only made of letters of the alphabet, although the encoding works with any Unicode string.&lt;/p&gt;
&lt;p&gt;The text is splitted in chunks of 18 letters (magic number explained in a few lines). Let C be a given chunk. C is one of the many possible combinations of 18 letters. We can define an index on such &lt;em&gt;combinations&lt;/em&gt;. For example, &#39;aaa...a&#39; would be combination number 0, &#39;aaa...b&#39; would be combination number 1, and so on, all the way up to &#39;zzz...z&#39; which would be combination number 26^18-1. Having such an index, we can say that C is chunk number N.&lt;/p&gt;
&lt;p&gt;Meanwhile, we can also define an index on &lt;em&gt;permutations&lt;/em&gt; of the alphabet. For example, the regular &#39;abcde...yz&#39; would be permutation number 0, then &#39;abcde...zy&#39; would be permutation number 1, and so on, all the way up to &#39;zyxw...ba&#39; which would be permutation number 26!-1. Having such an index, we can take its Nth element, where N is the combination index of chunk C. We have then encoded a chunk to a permutation. We are sure that there are at least N permutations because 26^18 &amp;lt;= 26! Actually 18 is the greatest n such that 26^n &amp;lt;= 26!&lt;/p&gt;
&lt;p&gt;The encoded text being a sequence of permutations of the alphabet, every letter has the same number of occurrences in it. That&#39;s all.&lt;/p&gt;
&lt;p&gt;Since each chunk of 18 letters is encoded to a permutation (26 letters), the text grows by a factor 26/18 = 1.44&lt;/p&gt;
&lt;h2&gt;Efficient indexing&lt;/h2&gt;
&lt;p&gt;Finding the index of a given chunk is equivalent to a conversion from base 26 to base 10 where the number in base 26 is represented using letters of the alphabet. Encoding in one direction to the other is a straightforward base-to-base conversion.&lt;/p&gt;
&lt;p&gt;Finding the permutation corresponding to a given index is a bit more involved. It&#39;s done using something called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lehmer_code&#34;&gt;Lehmer code&lt;/a&gt;. In the following paragraphs I try to give a friendly explanation of how it works. I begin by explaining how to find the index of a given permutation, then explain how to find the permutation of a given index.&lt;/p&gt;
&lt;p&gt;There are 26! permutations. We can partition the set of permutations in 26 subsets. The first subset contains all permutations begining with &#39;a&#39;, the second one contains all permutations begining with &#39;b&#39;, and so on. It&#39;s trivial that all these subsets have the same size of 26! / 26 = 25! We can then decide that permutations belonging to the first set (the &#34;a...&#34; set) all have their index between 0 and 25!. The permutations belonging to the &#34;b...&#34; set all have their index between 25! and 2×25!, and so on, all the way up to the &#34;z...&#34; set whose permutations all have their index between 25×25! and 26!. Note that in these bounds given as examples, the upper bound is exclusive.&lt;/p&gt;
&lt;p&gt;Once we&#39;ve identified to what set a permutation belongs to, we perform the same process inside this set, except that we&#39;ve removed the previous letter from the available letters. For example, inside the &#34;b...&#34; set, there would be the &#34;ba...&#34; set, with indexes between 25! and 25!+24!, then the &#34;bc...&#34; set with indexes between 25!+24! and 25!+2×24! (&lt;em&gt;note that we&#39;ve jumped from a to c since b is already consumed&lt;/em&gt;). We iterate over the letters of the permutation and go to the right subset at each iteration according to the letter we read. The final set is associated to only one possible index, which is the index of the permutation.&lt;/p&gt;
&lt;p&gt;As you can see, finding the index of a given permutation is actually a simple computation. Let&#39;s dumb things down even more by considering that there are only three letters &#39;a&#39;, &#39;b&#39; and &#39;c&#39; in the [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] order and we want the index of the &#39;bca&#39; permutation. This index is:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1*2! + 1*1! + 0*0! = 2 + 1 + 0 = 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;We take the ordinal of &#39;b&#39; in [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] which is 1. We get the first term &lt;code&gt;1*2!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We take the ordinal of &#39;c&#39; in [&#39;a&#39;, &#39;c&#39;] (&lt;em&gt;we&#39;ve removed &#39;b&#39; from the list&lt;/em&gt;) which is 1. We get the second term &lt;code&gt;1*1!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We take the ordinal of &#39;a&#39; in [&#39;a&#39;] (&lt;em&gt;we&#39;ve removed &#39;c&#39; from the list&lt;/em&gt;) which is 0. We get the final term &lt;code&gt;0*0!&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The factorial number system&lt;/h2&gt;
&lt;p&gt;What&#39;s interesting here is that we have the decomposition of &lt;strong&gt;3&lt;/strong&gt; in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Factorial_number_system&#34;&gt;factorial number system&lt;/a&gt;. The factorial number system is a system to write numbers where digits are coefficients of increasing factorial numbers instead of increasing powers. 3 is written 110 in &#34;factorial base&#34; because 3 = 1×2! + 1×1! + 0×0!&lt;/p&gt;
&lt;p&gt;So how do you find the &#34;factorial base&#34; digits of an integer given in decimal base? Because that&#39;s gonna help us convert an integer to a permutation. Well, let&#39;s take 42. It&#39;s 13000 in factorial base. That&#39;s:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1*4! + 3*3! + 0*2! + 0*1! + 0*0!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&#39;s write that explicitly:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1*4*3*2*1 + 3*3*2*1 + 0*2*1 + 0*1 + 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can factor 1 from the first 4 terms:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1 * (1*4*3*2 + 3*3*2 + 0*2 + 0) + 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the inner-most group, we can factor 2 on the first 3 terms:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1 * (2 * (1*4*3 + 3*3 + 0) + 0) + 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside th inner-most group, we can factor 3 on the first 2 terms:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1 * (2 * (3 * (1*4 + 3) + 0) + 0) + 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember that this number is 42. From the way we&#39;ve written it, it is now easy to understand how you can get its factoradic digits: if you divide 42 by 1 you end up with a remainder of 0 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;2 * (3 * (1*4 + 3) + 0) + 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you divide this by 2, you end up with a remainder of 0 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;3 * (1*4 + 3) + 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you divide this by 3, you end up with a remainder of 0 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1*4 + 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you divide this by 4, you end up with a remainder of 3 and a quotient of:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;err&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you devide this by 5, you end up with a remainder of 1 and a quotient of 0.&lt;/p&gt;
&lt;p&gt;You stop there, and look at the remainders that you&#39;ve accumulated: 0, 0, 0, 3 and 1. That&#39;s 3100 in reverse.&lt;/p&gt;
&lt;p&gt;A convertion to &#34;base factorial&#34; is very similar to a convertion to a regular base: you recursively divide the quotient by the base until you reach 0 and the digits in the destination base are the remainders in reverse order. Instead that here, instead of &#34;dividing by the base&#34;, you divide by increasing integers: divide by 1, then by 2, then by 3 and so forth.&lt;/p&gt;
&lt;p&gt;Once we have the digits of an index in the factorial number system, it&#39;s easy to get its corresponding permutation. For example, let&#39;s take 3 (110) again with the [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;] alphabet. You pop the letter with ordinal 1 from the alphabet: &#39;b&#39;. The alphabet is now [&#39;a&#39;, &#39;c&#39;]. You pop the letter with ordinal 1 from the alphabet: &#39;c&#39;. The alphabet is now [&#39;a&#39;]. You pop the letter with ordinal 0: &#39;a&#39;. The permutation is indeed &#39;bca&#39;.&lt;/p&gt;
&lt;h2&gt;Generalization&lt;/h2&gt;
&lt;p&gt;Equitext is trivially extended to any alphabet. The alphabet specific to the text (that is, the set of characters that the text uses) is extracted from the text thanks to a preliminary pass. It is then ordered using the Unicode code point of each of its characters. The length of chunks of text to be encoded to permutations is deduced from the size N of the alphabet. It&#39;s the greatest n such that N^n &amp;lt;= N!&lt;/p&gt;
&lt;p&gt;The text might require to be padded in order for its length to be divisible by the length of a chunk. The text is padded by repeting the character of the alphabet whose ordinal indicates the length of the pad. The length of the pad can&#39;t be greater than the size of the alphabet because as a pad it has a lesser length than a chunk which itself has a lesser length than the size of the alphabet (otherwise N^n would be greater than N!), so we&#39;ll always have enough characters in the alphabet to encode the length of the pad using only one character.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To install equitext (requires Python 3): &lt;code&gt;pip3 install equitext&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code: &lt;a href=&#34;https://github.com/foobuzz/equitext&#34;&gt;https://github.com/foobuzz/equitext&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message encrypted with a simple substitution that has been preliminary encoded with equitext: &lt;a href=&#34;https://www.reddit.com/r/codes/comments/4af4uc/try_this/&#34;&gt;https://www.reddit.com/r/codes/comments/4af4uc/try_this/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
			
				<category term="science"></category>
			
		</entry>
	
		<entry>
			<title>Big Bang</title>
			<link href="http://foobuzz.github.io/bigbang"/>
			<id>urn:uuid:ac5e48d2-191d-5842-86ef-9bd950c7832a</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-02-27T12:20:03Z</updated>
			<summary type="html">

&lt;p&gt;&lt;img alt=&#34;Cover of the book&#34; src=&#34;http://i.imgur.com/ZgzbZ8x.jpg&#34; style=&#34;width:140px;float:left;margin-right:15px;&#34;&gt;
I&#39;ve read &lt;em&gt;Big Bang&lt;/em&gt; by Simon Singh. It&#39;s a big piece of literature, about 460 pages written in a tiny font, and I was quite impressed when it was given to me at Christmas, since I&#39;m not a big book reader. However, it was so interesting that I had no trouble finishing it. The author does a wonderful job at telling the long story that leads to the Big Bang theory as it is today (as it was in 2004, actually, the year the book was released).&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;At some moments he doesn&#39;t hesitate to venture into the technical side of things yet he keeps it simple and accessible to anyone with basic middle school education. The way the story is written and its details suggest that the author has been studying a massive amount of documentation for the writing, and the bibliography at the end of the book is a proof of that.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Big Bang&lt;/em&gt; confirms my feeling that a historical depiction of how something was built is the best way to understand how it works. One of the first class that I took in my engineering school was about the working of a CPU. The professor based his course on how processors were built, historically. He started with the basic, early proof-of-concepts, and then explained how components were gradually added, and for what purpose. Of my three years of school, this was definitively the most interesting course. Such a chronological structure leads to a great understanding of the matter and also makes the overall course way more interesting than a raw description.&lt;/p&gt;
&lt;figure&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/G8cbIWMv0rI&#34; width=&#34;420&#34;&gt;&lt;/iframe&gt;
&lt;figcaption&gt;&lt;strong&gt;Carl Sagan explains how Eratosthenes deduced the circumference of the Earth. This is the kind of explanations and stories the book contains, this one in particular is given at the beginning of the book.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;The book does the same thing with the Big Bang, this theory that I knew about but never managed to understand even superficially (I mean, other than &#34;there was some sort of explosion and since then the Universe is expanding&#34;). It explains why the idea emerged in the first place, what were the alternative theories, what observations favored the Big Bang theory rather than another one, etc. It&#39;s a novel and as such, it never forgets to draw up portraits of the scientists involved in the process, the concrete experiments that they were doing, as well as little anecdotes scattered here and there. I loved the little cliffhangers that the author leaves at the end of chapters, giving a hint on how someone is going to discover some amazing thing in the next chapter. This makes it look like a thriller.&lt;/p&gt;
&lt;p&gt;When reading &lt;em&gt;Big Bang&lt;/em&gt; I realized how science makes sense, and how people criticizing it in favor of alternative beliefs just lack knowledge. Things like the Big Bang (before reading the book) or quantum mechanics are so obscure for someone like me who only has a training on classical mechanics that the only way I would think them true is by having confidence in science. And while I always had 100% confidence in it (&lt;em&gt;it works, bitches&lt;/em&gt;), there&#39;s no such thing as an understanding of why it&#39;s justified. And that&#39;s what this book brings. It brings an explanation of how much sense scientific theories make, how solid they are. The usage of the word &lt;em&gt;theory&lt;/em&gt; doesn&#39;t mean that scientists have made an enigmatic bet that their hypothesis might somewhat be true. It means that even when observing how well their hypothesis works, they stay wise and careful in front of the peculiarities of Nature.&lt;/p&gt;
&lt;p&gt;Nevertheless, the book gives a less idealistic vision of scientists that I imagined. I always pictured scientists as perfectly partial and unbiased people, and forgot that they were humans too. &lt;em&gt;Big Bang&lt;/em&gt; shows how scientists can be seduced by a theory not only because of how faithful it is to reality but also because of its beauty or how it corresponds to their &#34;intuition&#34; of how Nature behave (or, worse, how it &lt;em&gt;should&lt;/em&gt; behave). While the simplicity of a theory is really important, which, in a sense, makes the beauty matter not irrelevant, the book shows that some scientists are prone to kill the simplicity of a theory by applying patches to it to make it both compatible with observation and their personal beliefs of how it should work.&lt;/p&gt;
&lt;p&gt;The best example is probably Ptolemy which added epicycles to the orbits of planets so that they could continue to orbit around the Earth and the epicycle thing would explain their visible retrogradations in the sky. Another shocking example is when the dynamic aspect of the Universe was a consequence of Einstein&#39;s general relativity, but Einstein liked a static Universe better, so he added some constant (the cosmological constant) in the equations to make it static. Friedman and Lemaître chose to really study the consequences of the original, patch-less theory, and ended up elaborating the first version of the Big Bang theory.&lt;/p&gt;
&lt;figure&gt;
&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/EYPapE-3FRw&#34; width=&#34;420&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;figcaption&gt;&lt;strong&gt;The great Richard Feynman explains how science works&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The problem is that once you&#39;ve made your point and defended it, it&#39;s hard to change your mind. The more you defend your theory, the harder it is to admit that you were wrong all this time. And it&#39;s really sad when someone seems to no longer base his or her opinion on the more recent data, but on the fact that they&#39;re just too deeply engaged to their view at this point. To a certain extend, the book gave me the impression that this phenomenon had a significant impact on the battle between the defenders of the Big Bang theory and the defenders of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Steady_State_theory&#34;&gt;Steady State theory&lt;/a&gt;. The latter was a new theory that emerged after the Big Bang theory and modeled a static universe instead of an expanding one. It was way more elaborated that the cosmological constant patch. At some point in History, it even explained observations that the Big Bang didn&#39;t.&lt;/p&gt;
&lt;p&gt;At some point in the book, it feels like defenders of each theory are no longer defending their side because it best describes reality, but because they want to be right in front of the other side. Some of their arguments were no longer reasonable but different kinds of sophism instead. Actually, the kind-of-childish term &#34;Big Bang&#34; was first used by Fred Hoyle (defender of the Steady State theory) in order to make fool of the theory which involved some kind of big explosion. Defenders of the Big Bang though it was a nice term, so they adopted it. What takes the cake is that the same Hoyle was the co-author of a paper which explained how heavy elements are created inside stars*, which, at the time, was a better argument for the Big Bang than for the Steady State. The man definitely didn&#39;t know how to defend its theory properly, but fortunately that&#39;s for the good of knowledge.&lt;/p&gt;
&lt;p&gt;*The whole team was: Margaret Burbidge, Geoffrey Burbidge, William Fowler, and Fred Hoyle. Hence the nickname of their monumental paper: &lt;a href=&#34;https://en.wikipedia.org/wiki/B2FH_paper&#34;&gt;B2FH&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img alt=&#34;The first six primary mirror segments being prepped for final cryogenic acceptance testing.&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/James_Webb_Primary_Mirror.jpg/1024px-James_Webb_Primary_Mirror.jpg&#34;/&gt;
&lt;figcaption&gt;&lt;strong&gt;The only thing more badass than this picture is its caption &lt;a href=&#34;https://en.wikipedia.org/wiki/James_Webb_Space_Telescope&#34;&gt;on Wikipedia&lt;/a&gt;: &lt;i&gt;The first six primary mirror segments being prepped for final cryogenic acceptance testing.&lt;/i&gt;&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, if there is one thing that I should remember from this book, it&#39;s that &lt;em&gt;telescopes&lt;/em&gt; are the ultimate referees when it comes to know the Universe. It&#39;s like Feynman said in the video: you can develop the theory you want, to can marketize the theory as you want, you can think of all the arguments you want, you can wish and hope what you want. At the end of day, someone&#39;s going to build a telescope bigger than ever, and its observations will decide of the future of your theory without mercy.&lt;/p&gt;
&lt;p&gt;I&#39;m really looking forward to the launch of the James-Webb Space Telescope in 2018. Those things are knowledge fuel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: 10/10 would read again&lt;/strong&gt;&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>The music I listen to</title>
			<link href="http://foobuzz.github.io/foobar2000"/>
			<id>urn:uuid:1e8cbdbe-becb-5641-b034-725f6ed44f0e</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2016-01-18T22:36:44Z</updated>
			<summary type="html">

&lt;p&gt;When I switched to Linux last summer, the only software non compatible with Linux that I couldn&#39;t do without was &lt;a href=&#34;https://www.foobar2000.org/&#34;&gt;foobar2000&lt;/a&gt;. I make it work using Wine. There are several reasons I consider this audio player and library manager to be superior to many others. To begin, its GUI is highly customizable via the so-called &#34;Layout Editing Mode&#34;. There are a fair number of useful widgets that you can choose from and place on the screen, using a system of vertical and horizontal splits that you can add recursively. &lt;/p&gt;
&lt;p&gt;Another good feature are the &#34;Global Hotkeys&#34;, which make it possible to map keyboard shortcuts to various commands (pause, next song, change volume, switch the playlist order from random to default, etc), and these shortcuts work even if the player hasn&#39;t the focus. It&#39;s particularly useful when playing video games while listening to music.&lt;/p&gt;
&lt;p&gt;Finally, plugins can be installed, some of which are powerful. My favorite is &#34;Playback Statistics&#34; which keeps track of the time a song has been added to the library, the first time and last time it has been played, and its play count.&lt;/p&gt;
&lt;p&gt;Using this plugin, I like to compute my own little charts and see statistics about the music I listen to. However, exporting the data to a programmatically exploitable format wasn&#39;t as easy as I thought.&lt;/p&gt;
&lt;h2&gt;The ID mystery&lt;/h2&gt;
&lt;p&gt;Playback Statistics (PS) has a feature that allow one to &#34;export data&#34; (resp. &#34;import data&#34;). The intent of this feature is to make it possible to share statistics across different foobar2000 installations. The exported file is an XML file containing one node per song in the library with an attribute for each piece of data. Here&#39;s an example of a node corresponding to one song:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Entry&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;ID=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;eef3112353c1512d&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Count=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;5&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;FirstPlayed=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;130818970132330604&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;LastPlayed=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;130913311506349590&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Added=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;130739450382613924&#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The timestamps for the last three attributes are in the Microsoft &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms724284%28v=vs.85%29.aspx&#34;&gt;FILETIME format&lt;/a&gt;. It&#39;s the number of 100-nanoseconds since January 1 1601. &lt;a href=&#34;https://blogs.msdn.microsoft.com/oldnewthing/20090306-00/?p=18913/&#34;&gt;Don&#39;t ask me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that the song is identified by an ID and nobody knows how it&#39;s computed from the song. The &lt;a href=&#34;http://wiki.hydrogenaud.io/index.php?title=Foobar2000:Components/Playback_Statistics_v3.x_%28foo_playcount%29&#34;&gt;PS documentation&lt;/a&gt; implies that the ID is computed from the following song&#39;s metadata: artist, title, album, disc number, track number. However, from &lt;a href=&#34;https://github.com/tfriedel/foobar2000-export/issues/1&#34;&gt;GitHub&lt;/a&gt; to &lt;a href=&#34;https://hydrogenaud.io/index.php/topic,103977.msg853596.html#msg853596&#34;&gt;Hydrogen Audio&lt;/a&gt;, nobody succeeded in guessing how the ID is computed from a song.&lt;/p&gt;
&lt;p&gt;I tried to break the mysterious hash myself without success. I did two successive exports separated by a specific song&#39;s listening session. In the two XML files, I spotted the only element that had a PlayCount increment and deduced that it was the song I&#39;d listened to. Note that the order of the songs aren&#39;t always the same, so I couldn&#39;t perform a simple diff and had to actually parse the XML to spot the difference. Having linked one song to its ID, I then tried to brute-force the ID. I tried all the combinations of the metadata said to be used in the documentation, with various separators between the fields, then encoded with various character encodings, then hashed with the most famous hash functions. At the heart of this 4 for-loops imbrication, I finally tested if the mysterious ID was a substring of the obtained hash. This resulted in zero match. I figured that the author could have used a more complicated hashing process. He could even have used a custom salt somewhere in the process. This was hopeless.&lt;/p&gt;
&lt;p&gt;The next logical step was probably either to contact the plugin&#39;s author or to try to decompile the plugin&#39;s dll. But this is when I stumbled upon this &lt;a href=&#34;https://www.hydrogenaud.io/forums/index.php?showtopic=97456&#34;&gt;Hydrogen Audio thread&lt;/a&gt; where a method to link each song of the library to its ID was exposed. This method relies on another plugin, &#34;Text Tools&#34;. This plugin enables the user to export text information about the songs in the library, accessing the songs&#39; metadata. Foobar2000 exposes metadata in the form of variables surrounded by the &lt;code&gt;%&lt;/code&gt; symbol. For example, &lt;code&gt;%title%&lt;/code&gt; gives the song&#39;s title. Fair enough, the PS plugin exposes its own variables (play count, first played, etc) using this format. For example, &lt;code&gt;%play_count%&lt;/code&gt; gives the song&#39;s play count. Wonderful! Using only Text Tools I was then able to export all relevant information about the library!&lt;/p&gt;
&lt;h2&gt;The Music Diary&lt;/h2&gt;
&lt;p&gt;On the Figure 1 (you can right-click on it and click to &#34;Show Image&#34; to see the full-size version), each point represents a tracked song from my library. A tracked song is a song that I listened to at least one time since I&#39;ve installed the Playback Statistics plugin. The plugin increments the play count of a song when the player plays at least one straight minute of it. This leads to misleadings numbers. For example, one of the track I&#39;ve listened the most to is The Fourth Movement of Beethoven&#39;s Fifth Symphony, with a Play Count (PC) of 102. However, this track is about 10 minutes long and I know that I&#39;ve mostly listened only to the last 3 minutes of it. (What an epic finale!)&lt;/p&gt;
&lt;figure&gt;
&lt;img alt=&#34;Graph representing the Play Count on the Y-axis and the first time played in the X-axis&#34; src=&#34;/assets/articles/music-diary.png&#34;/&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The X-axis represents the first time I&#39;ve listened to a song. The Y-axis represents the Play Count of the song as of the writing of this article. It&#39;s not a surprise that the left of the graph, starting a little before June 2013, is flooded with many songs. That&#39;s all the songs I was casually listening to suddenly starting being tracked by the plugin. However, you can obverse the same phenomenon one year later in June 2014, which contains a high concentration of new songs too. That&#39;s because I like to explore new music during the summer holidays. The effect lose strength in the summer of 2015, which I assume is because I was doing an internship and didn&#39;t have as much time as I had during previous summers.&lt;/p&gt;
&lt;p&gt;An interesting phenomenon takes place between September 2013 and February 2014. As you can see, I haven&#39;t discovered many songs in this period. However, the few I did I listened to them a lot of times! Well, this period was when I moved outside my parents&#39; to study in a new city and I didn&#39;t have an Internet connexion in my new apartment. I remember exploring a bit of music at my school&#39;s computers and listening to them a lot in my apartment as I didn&#39;t have much to do.&lt;/p&gt;
&lt;p&gt;I have a few ultra popular songs that I listen to massively. &lt;a href=&#34;https://www.youtube.com/watch?v=zgsDf73rm_0&#34;&gt;Breaking Through by Audiomachine&lt;/a&gt; holds the record with a stratospheric 153 PC. Songs with the highest PC tends to be older, having been listened for the first time around 2013. This makes sense, since the older a song is, the more time I have to listen to it repetitively and increment its PC. My favorite songs that I discovered recently are &lt;a href=&#34;https://www.youtube.com/watch?v=MYSVMgRr6pw&#34;&gt;Take me To Church by Hozier&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=HtPL2YhK6h0&#34;&gt;Take a Look Around by Limp Bizkit&lt;/a&gt;. The former is recent and I discovered it when it became popular worldwide. The latter dates back from 2000 and I just became fond of it when I discovered it last summer. I played it in loop while playing &lt;a href=&#34;http://www.urbanterror.info/home/&#34;&gt;&lt;em&gt;Urban Terror&lt;/em&gt;&lt;/a&gt;, which certainly contributed to its high PC.&lt;/p&gt;
&lt;p&gt;You can see vertical ribs, for example at the beginning of last December or at the beginning of March 2015. That&#39;s when I discover an album. I listen to the whole album in one go. Then I listen to each track individually according to my preferences. Each track then evolves on the album&#39;s vertical line.&lt;/p&gt;
&lt;p&gt;Finally, you can see how serious I am each year before my finals, during a little period around the end of April and the beginning of May, where I don&#39;t listen to any new song, except for &lt;a href=&#34;https://www.youtube.com/watch?v=BPbSCENrY4g&#34;&gt;Audiomachine&#39;s Millennium&lt;/a&gt; in May 2015. Indeed, I remember discovering it at the end of &lt;a href=&#34;https://www.youtube.com/watch?v=1DiMjOWlbmM&#34;&gt;this movies montage&lt;/a&gt; during a procrastinating session.&lt;/p&gt;
&lt;h2&gt;The Fluff Principle&lt;/h2&gt;
&lt;p&gt;The Fluff Principle is a term invented by &lt;a href=&#34;https://en.wikipedia.org/wiki/Paul_Graham_%28computer_programmer%29&#34;&gt;Paul Graham&lt;/a&gt; in a &lt;a href=&#34;http://www.paulgraham.com/hackernews.html&#34;&gt;February 2009 article&lt;/a&gt;. The Hacker News creator gives the following definition:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;on a user-voted news site, the links that are easiest to judge will take over unless you take specific measures to prevent it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He explains that one type of fluff is short content. It&#39;s faster to consume a joke or a picture than an in-depth article. Therefore, at equal quality, the former will gain more upvotes per unit of time than the latter.&lt;/p&gt;
&lt;p&gt;Well, the Fluff Principle also holds for my music statistics. It&#39;s faster to listen to a short song than to a long one. Therefore, at equal quality, short songs will gain more PC by unit of time than long ones. For example, my top one song, Audiomachine&#39;s Breaking Through (153 PC), is only 1:18 long. I know that I&#39;ve listened to another song, &lt;a href=&#34;https://www.youtube.com/watch?v=SNuwOYQPr-s&#34;&gt;Seven Angels by Avantasia&lt;/a&gt; a crazy amount of time, each time the whole thing. However, this song is 14:17, so it&#39;s not quite a surprise that its PC is only 31. Now if I want to know how much time I&#39;ve been listening to each song, that is, the total amount of time I was listening while the song was playing, I have to multiple the PC by the song&#39;s duration. &lt;em&gt;Breaking Through&lt;/em&gt; hits 153×(1×60+18) = 11,934 seconds. &lt;em&gt;Seven Angels&lt;/em&gt; hits 37×(14×60+17) = 31,709 seconds. Wow! I&#39;ve listened to &lt;em&gt;Seven Angels&lt;/em&gt; way more than to &lt;em&gt;Breaking Through&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Following this observation, we can define the Normalized Play Count (NPC) as the following: NPC(song) = PC(song)×Duration(song)/AD where AD is the Average Duration of a tracked song. This way, for songs which have a duration close to the average duration, their NPC will be approximately equal to their PC. The NPC plays an important role for particularly short songs, for which it diminishes their importance, and for long songs, for which it increases the importance.&lt;/p&gt;
&lt;p&gt;The table on Figure 2 shows the top 20 songs in my library sorted by their NPC, in the reverse order. This table contains several anomalies that are due to the fact that the PS plugin increments the PC of a song only when 1 minute of it is played. Anomalies are very long tracks whose duration tends to give them a high NPC when in reality I listened only to a part of them. The anomalies are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 1:&lt;/strong&gt; It&#39;s 20 minutes long, but I know I almost never listen beyond the 10 minutes mark.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 2:&lt;/strong&gt; It&#39;s 10 minutes long, but I almost always listen to its finale, that is the last 3-4 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 6:&lt;/strong&gt; Final song of the album. I usually only listen to the first 3-4 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ranked 9:&lt;/strong&gt; I never listen to the Quasimodo Suite, which is quite lengthy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Rank&lt;/th&gt;&lt;th&gt;Artist&lt;/th&gt;&lt;th&gt;Title&lt;/th&gt;&lt;th&gt;NPC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Piano Concerto No.5: Mvt. I&lt;/td&gt;&lt;td&gt;384.107&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Symphony No.5 - IV Allegro&lt;/td&gt;&lt;td&gt;320.7867&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Dvorak&lt;/td&gt;&lt;td&gt;Symphony No. 9: II. Largo&lt;/td&gt;&lt;td&gt;143.867&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Avantasia&lt;/td&gt;&lt;td&gt;The Seven Angels&lt;/td&gt;&lt;td&gt;109.836&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;&lt;td&gt;M83&lt;/td&gt;&lt;td&gt;Raconte-Moi Une Histoire&lt;/td&gt;&lt;td&gt;97.736&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Awolnation&lt;/td&gt;&lt;td&gt;Knights of Shame&lt;/td&gt;&lt;td&gt;96.200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Audiomachine&lt;/td&gt;&lt;td&gt;Rising Dawn&lt;/td&gt;&lt;td&gt;95.217&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Zack Hemsey&lt;/td&gt;&lt;td&gt;Vengeance&lt;/td&gt;&lt;td&gt;90.881&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;&lt;td&gt;Santa Esmeralda&lt;/td&gt;&lt;td&gt;The House of the Rising Sun + Quasimodo Suite&lt;/td&gt;&lt;td&gt;85.195&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;&lt;td&gt;Limp Bizkit&lt;/td&gt;&lt;td&gt;Take a Look Around&lt;/td&gt;&lt;td&gt;83.250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;&lt;td&gt;Mahler&lt;/td&gt;&lt;td&gt;Symphony No. 1 - Mvt. IV&lt;/td&gt;&lt;td&gt;81.503&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Symphony No.5 - II Adante con moto&lt;/td&gt;&lt;td&gt;80.673&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;&lt;td&gt;Macklemore &amp;amp; Ryan Lewis&lt;/td&gt;&lt;td&gt;Wing$&lt;/td&gt;&lt;td&gt;80.525&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;&lt;td&gt;Hozier&lt;/td&gt;&lt;td&gt;Take Me to Church&lt;/td&gt;&lt;td&gt;79.947&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;&lt;td&gt;Hans Zimmer&lt;/td&gt;&lt;td&gt;Mombasa&lt;/td&gt;&lt;td&gt;78.914&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;&lt;td&gt;Edwyn Collins&lt;/td&gt;&lt;td&gt;A Girl Like You&lt;/td&gt;&lt;td&gt;78.295&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Moonlight Sonata - Third Movement&lt;/td&gt;&lt;td&gt;78.282&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Piano Concerto No.5: Mvt. II&lt;/td&gt;&lt;td&gt;75.685&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;&lt;td&gt;M83&lt;/td&gt;&lt;td&gt;Wait&lt;/td&gt;&lt;td&gt;73.653&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;&lt;td&gt;Beethoven&lt;/td&gt;&lt;td&gt;Piano Concerto No.5: Mvt. III&lt;/td&gt;&lt;td&gt;72.167&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figcaption&gt;&lt;strong&gt;Figure 2&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>The np problem, Reddit edition</title>
			<link href="http://foobuzz.github.io/reddit-np"/>
			<id>urn:uuid:3f739db6-2d48-52ab-bcd9-5486b3019903</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2015-12-04T23:00:00Z</updated>
			<summary type="html">

&lt;p&gt;Have you ever been redirected to a so-called read-only version of Reddit? That&#39;s a thing. For example, check out &lt;a href=&#34;https://np.reddit.com/r/books&#34;&gt;np.reddit.com/r/books&lt;/a&gt;. No voting arrows, no button to comment even when logged in, and a little message at the top of the subreddit: &#34;You have been linked to a read-only version of this subreddit. Please respect the community by not voting.&#34; All because the little &lt;code&gt;np&lt;/code&gt; (&#34;No Participation&#34;) subdomain was used. Now if you try the same thing with /r/askreddit: &lt;a href=&#34;np.reddit.com/r/askreddit&#34;&gt;np.reddit.com/r/askreddit&lt;/a&gt;, everything is absolutely normal, no difference with the regular Reddit. Quite strange, isn&#39;t it. It doesn&#39;t stop there. For example, &lt;a href=&#34;https://sf.reddit.com/r/teenagers/&#34;&gt;sf.reddit.com/r/teenagers&lt;/a&gt; displays only the self-post of the subreddit, because of the &lt;code&gt;sf&lt;/code&gt; (SelF-posts) subdomain. But that only works for /r/teenagers. So, what the well?&lt;/p&gt;
&lt;h2&gt;How Reddit subdomains work&lt;/h2&gt;
&lt;p&gt;One good thing about reddit is that it&#39;s open-source. So one can inspect &lt;a href=&#34;https://github.com/reddit/reddit/blob/master/r2/r2/config/middleware.py#L201-L239&#34;&gt;the code related to subdomains handling&lt;/a&gt; to understand how it works. I did read the code, and this is what I discovered.&lt;/p&gt;
&lt;p&gt;Reddit accepts subdomains that indicates the language with which the site should be displayed. What&#39;s interesting is that Reddit doesn&#39;t have a predefined list of strings that are accepted as a language subdomain, but uses a regular expression instead: &lt;code&gt;\A\w\w(-\w\w)?\Z&lt;/code&gt;. So, basically, any sequence of two alphanumerical characters, optionally followed by a dash and another such sequence is accepted. For example, &lt;code&gt;zz&lt;/code&gt; or &lt;code&gt;an-42&lt;/code&gt; are valid language subdomains, even though they correspond to no language code in the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO 639-1 specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What does Reddit do with such code? Well, for some real languages such as French (&lt;code&gt;fr&lt;/code&gt;) or Japanese (&lt;code&gt;ja&lt;/code&gt;), the web interface is actually translated into the language. For the more esoteric codes that I invented in the paragraph above, it does nothing to the interface. However, for any given code, it performs one thing: in the HTML of the web page, it sets the value of the &lt;code&gt;lang&lt;/code&gt; attribute of the &lt;code&gt;html&lt;/code&gt; root tag to the code provided. So, when you browse to &lt;a href=&#34;https://an-42.reddit.com/&#34;&gt;an-42.reddit.com&lt;/a&gt;, the HTML source of the page starts with:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;http://www.w3.org/1999/xhtml&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;an-42&#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xml:lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;an-42&#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Using and abusing CSS&lt;/h2&gt;
&lt;p&gt;On Reddit, despite doing the hard and benevolent work of maintaining subreddits, moderators have only access to quite rudimentary tools. Actually the improvement of moderator tools is always brought to the table when the admins risk themselves into asking the community for feedback. This issue was critical when last summer reddit let go the employee in charge of the relations between the moderators of /r/IamA and the celebrities doing interviews, all without warning the moderators, generating a &lt;a href=&#34;http://www.dailydot.com/news/reddit-revolt-blackout-2015-ama-victoria/&#34;&gt;massive reddit-wide drama&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, it&#39;s a matter of fact that there are no moderator tools to customize the user experience depending on the subdomain used, nor tools to add custom modules or text areas anywhere in the subreddit page. However, the moderators have access to one thing: they can edit the CSS stylesheet used to render the subreddit. And that&#39;s the key to everything. CSS is like editing in film-making; no matter what material you have, you can transform it into whatever you want. CSS is power.&lt;/p&gt;
&lt;p&gt;The basic idea is that if you prefix some CSS rules with the &lt;code&gt;body:lang(np)&lt;/code&gt; selector, the rule will only apply to pages whose &lt;code&gt;html&lt;/code&gt; tag have their &lt;code&gt;lang&lt;/code&gt; attribute set to &lt;code&gt;np&lt;/code&gt;. So, as a Reddit moderator, you can effectively define rules for specific subdomains. You can then use the power of CSS to fully customize the page for this subdomain. You can, especially, make things disappear using the &lt;code&gt;display: none&lt;/code&gt; property:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;usertext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sidebox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;submit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;commentingAs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;markdownEditor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; 
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&#34;return reply(this)&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;],&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;helplink&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;important&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, you can make new things appear using the &lt;code&gt;content&lt;/code&gt; CSS property coupled with the &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; selector:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;siteTable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;before&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&#34;You have been linked to a read-only version of this subreddit. Please respect the community by not voting.&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;800&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;F6E69F&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;305&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;solid&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orange&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;small&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A drawback of adding content using this method is that the inserted text is not selectable. This can be frustrating from a user-experience point of view.&lt;/p&gt;
&lt;p&gt;The code snippets provided above come from the actual stylesheet provided by the /r/NoParticipation subreddit, which is dedicated to instruct moderators on how to &#34;install&#34; the &#34;No Participation mode&#34; on their own subreddits. In the next part, I explain how such a subreddit was born and why moderators would want to add a &#34;No Participation mode&#34; to their subreddit.&lt;/p&gt;
&lt;h2&gt;Combating cross-subreddit contamination with the No Participation mode&lt;/h2&gt;
&lt;p&gt;There are such things known as the &lt;em&gt;meta&lt;/em&gt; subreddits. On such subreddits, users share links and comment about what happen on Reddit. For example, /r/BestOf is for comments which are awesome in some way and which constitutes the &#34;best of&#34; Reddit. /r/ThreadKillers is for comments which answer a question or a request in such a comprehensive way that any additional comment from other users is not necessary. /r/DepthHub is for comments which answer a question in depth. /r/SubredditDrama is for following flame-wars going on Reddit.&lt;/p&gt;
&lt;p&gt;The subreddits these meta-subreddits link to sometimes are little subreddits or even &lt;em&gt;niche&lt;/em&gt; subreddits, for example dedicated to specific hobbies. The problem is that meta-subreddits&#39; users, instead of just being spectators of what&#39;s happening on Reddit, would sometimes go on and enter the show, voting on comments of the thread linked, posting comments themselves and so on. On top of disrupting the normal flow of upvotes and downvotes and disrespect the explicit and implicit submission guidelines of the subreddits they were showing up in, users would sometimes perform &lt;em&gt;vote brigading&lt;/em&gt;, that is, massively downvoting a opinion they disagree with so that it would be buried in the abyss of the comments and become invisible.&lt;/p&gt;
&lt;p&gt;To combat this problem, redditor /u/KortoloB had an idea. He figured out the technical elements explained in the previous part and wrote a &#34;no participation&#34; stylesheet dedicated to the &lt;code&gt;np&lt;/code&gt; subdomain. This is the stylesheet which contain the snippets presented in the previous part. He created the subreddit &lt;a href=&#34;https://www.reddit.com/r/noparticipation&#34;&gt;/r/NoParticipation&lt;/a&gt; to host and support his idea. He abstracted the technical working of the stylesheet into what he calls the &lt;em&gt;No Participation mode&lt;/em&gt; and wrote instruction on how to install the No Participation mode on one&#39;s subreddit (basically instructing to copy and paste the stylesheet).&lt;/p&gt;
&lt;p&gt;To make /u/KortoloB&#39;s idea work reddit-wide, there were two additional conditions: that regular subreddits install the No Participation Mode, and that the meta subreddits&#39; submissions point to the No Participation mode of other subreddits. I don&#39;t know the exact time-line of events, but as of today, the NP mode is deployed on a lot of subreddits and the system works pretty well. &lt;a href=&#34;https://www.reddit.com/r/NoParticipation/wiki/userlist&#34;&gt;This page&lt;/a&gt; lists all the subreddits that have No Participation installed, as well as meta-subreddits that instruct users to only post links pointing to the NP version of a subreddit, some of them requiring it (i.e. removing posts that don&#39;t respect the rule).&lt;/p&gt;
&lt;h2&gt;Reaction of the community and of the reddit staff&lt;/h2&gt;
&lt;p&gt;My impression as a regular redditor is that the No Participation thing caused and is still causing a lot of confusion in the Reddit community.&lt;/p&gt;
&lt;p&gt;Most redditors know that moderators tools a quite limited and seeing voting arrows disappearing depending on the subdomain in the URL gives them the impression that the No Participation mode must be some kind of official Reddit feature. Furthermore, to even more discourage users to participate in the No Participation mode, some moderators launched the rumor that removing the &lt;code&gt;np&lt;/code&gt; subdomain and reloading the page to participate would result in them being banned. However, moderators have no way to detect such behavior and admins have nothing to do with the No Participation mode. Technically, you don&#39;t even have to reload the page to participate, but just to disable the styles defined by the moderators. Since Reddit delivers the moderator stylesheet as a separate CSS file upon a client request, it&#39;s fairly easy with any browser&#39;s development tools to disable only the moderators styles.&lt;/p&gt;
&lt;p&gt;When confused users would ask in several threads what the hell the No Participation mode was, some would answer by only giving a few bullet points about what this mode changed, in a tone that would validate the false idea that it&#39;s an official reddit feature. Some other would accurately explain that it&#39;s nothing more than a hack from the moderators that exploit the &lt;code&gt;np&lt;/code&gt; language subdomain. Some would let think that moderators have a direct tool to customize a subreddit depending on the language, not clarifying that elements of the page are still there but just hidden. Fortunately, some other would accurately explain that it&#39;s a CSS hack.&lt;/p&gt;
&lt;p&gt;A rumor that became popular is that the &lt;code&gt;np&lt;/code&gt; language subdomain is for the Nepalese version of Reddit. In fact, the Nepalese language code is &lt;code&gt;ne&lt;/code&gt;, not &lt;code&gt;np&lt;/code&gt; (the &lt;em&gt;location&lt;/em&gt; code of Nepal is &lt;code&gt;NP&lt;/code&gt;, but Reddit&#39;s subdomain are not made for locations code). Furthermore, as explained in the first part of this article, Reddit accept any combination of two letters as the language subdomain. &lt;code&gt;np&lt;/code&gt; corresponds to no language according to the ISO standard.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://www.reddit.com/r/blog/comments/2c63wg/how_reddit_works&#34;&gt;2014 thread&lt;/a&gt; about the Reddit official blogpost &lt;em&gt;How reddit works&lt;/em&gt;, when a user asked about the No Participation mode, the admin /u/cupcake1713 &lt;a href=&#34;https://www.reddit.com/r/blog/comments/2c63wg/how_reddit_works/cjcbsda?context=1&#34;&gt;clarified&lt;/a&gt; that it wasn&#39;t actually something from the Reddit staff and called it a &#34;crappy CSS hack&#34; (and stroke the &#34;crappy&#34; out later, probably by remorse after No Participation creator answered to her comment and said being a little bit affected that his idea was denigrated so much by the admins). She also pointed out that the admins realized quite recently (relatively to the date of her comment) that the NP stylesheet was hiding the &#34;report&#34; button on submissions (a button to report abuse), that this was a &#34;huge problem&#34; and that if the staff would have spotted this problem sooner they would have stop the spread of this thing. The no participation stylesheet is since fixed and doesn&#39;t hide the report button.&lt;/p&gt;
&lt;p&gt;Since then, other subreddits have customized other subdomains for other purposes (cf. &lt;code&gt;sf&lt;/code&gt; on /r/teenagers for showing only self-posts). Last summer, admins said that they&#39;ll deploy better moderation tools by 2016. My bet is that it won&#39;t include any non-participation related stuff. It&#39;s too easy to override and it probably wouldn&#39;t scale well. I just want moderators to be able to add custom text boxes in the page without CSS so that the text is selectable. There&#39;s something deeply wrong with non-selectable text.&lt;/p&gt;</summary>
			
				<category term="random"></category>
			
		</entry>
	
		<entry>
			<title>Datetime in Python</title>
			<link href="http://foobuzz.github.io/datetime-python"/>
			<id>urn:uuid:230550b3-4c8e-5f32-8c51-fd3701edf457</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2015-11-25T23:00:00Z</updated>
			<summary type="html">

&lt;p&gt;Last Friday I spent two hours fighting with the datetime class from Python&#39;s datetime module. I originally thought that a datetime object represented a single point in time, which is not always the case. I sum up with a few bullets points what I learned about this module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In its simplest form, a datetime object is just a date and a time as you would write it down on a piece of paper. It&#39;s a year, a month, a day, and, optionally, an hour, a minute, a second and some microseconds (the &#39;time&#39; part of &#39;datetime&#39;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, in this simplest form, a datetime object does not represent a given point in time because it depends on the timezone in which you consider your date and time. It&#39;s up to interpretation. Such datetime objects are called &lt;em&gt;naive&lt;/em&gt;. You can make a datetime object &lt;em&gt;aware&lt;/em&gt; by giving to it the timezone that should be used to interpret this date and time. An &lt;em&gt;aware&lt;/em&gt; datetime object does represent a given point in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The optionnal timezone carried by a datetime object is given by the &lt;code&gt;tzinfo&lt;/code&gt; attribute, whose value is of type &lt;code&gt;tzinfo&lt;/code&gt;. The tzinfo class is an abstract base class, meaning you can&#39;t directly instanciate a tzinfo object. You must instanciate a subclass of tzinfo, such as &lt;code&gt;timezone&lt;/code&gt;. But to construct a timezone object, you must give it a &lt;code&gt;timedelta&lt;/code&gt; object. The timedelta class represents a difference between two datetimes. When used to construct a timezone, it indicates the offset in relation to UTC. For example, &lt;code&gt;timezone(timedelta(hours=2))&lt;/code&gt; is a valid tzinfo object which represents the timezone UTC+2. &lt;code&gt;timezone.utc&lt;/code&gt; is a shortcut for &lt;code&gt;timezone(timedelta(0))&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most methods which return a datetime object return a &lt;em&gt;naive&lt;/em&gt; object. The method &lt;code&gt;now&lt;/code&gt; returns the local and naive date and time; the method &lt;code&gt;utcnow&lt;/code&gt; returns the UTC naive date and time. Since Python 3.2, the &lt;code&gt;strptime&lt;/code&gt; method can produce an aware datetime object from a string. The string must contain the timezone in the &lt;code&gt;+HHMM&lt;/code&gt; or &lt;code&gt;-HHMM&lt;/code&gt; format (for example &lt;code&gt;+0200&lt;/code&gt; for UTC+2), and the placeholder to use is &lt;code&gt;%z&lt;/code&gt; to capture the timezone part.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practical example&lt;/h2&gt;
&lt;p&gt;Let&#39;s say you&#39;ve acquired such a string representating a date and a time: &lt;code&gt;Mon Nov 23 20:06:13 CET 2015&lt;/code&gt;. It&#39;s actually the default output&#39;s format of the &lt;code&gt;date&lt;/code&gt; command in bash. Let&#39;s say you want to write a Python script that tells you the exact time difference between the moment the script is executed and the date and time represented by this string.&lt;/p&gt;
&lt;p&gt;We&#39;re in bad luck here because Python won&#39;t be able to tell us to what timezone &lt;code&gt;CET&lt;/code&gt; corresponds to. Remember, it can only parse timezones if they&#39;re in the form &lt;code&gt;+HHMM&lt;/code&gt;. So we need to do some basic research. It turns out that CET stands for Central European Time and is UTC+1.&lt;/p&gt;
&lt;p&gt;Now that we have such knowledge, a solution is to replace &lt;code&gt;CET&lt;/code&gt; by &lt;code&gt;+0100&lt;/code&gt; in the string then let Python produces an aware datetime object.&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;DATETIME_STRING&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;Mon Nov 23 20:06:13 CET 2015&#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DATETIME_STRING&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&#39;CET&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;+0100&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strptime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%a&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; %b &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; %H:%M:%S %z %Y&#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we need the current time. There are two functions to get the current time: &lt;code&gt;now&lt;/code&gt; or &lt;code&gt;utcnow&lt;/code&gt;. The problem with &lt;code&gt;now&lt;/code&gt; is that it returns the current local time. So we would need to figure out what is the local timezone, which isn&#39;t straightforward (more on that later). &lt;code&gt;utcnow&lt;/code&gt; returns the UTC time, so we know the timezone by definition. Note that even if we know the timezone, &lt;code&gt;utcnow&lt;/code&gt; still returns a &lt;em&gt;naive&lt;/em&gt; object, so we&#39;ll have to manually set the timezone to UTC:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcnow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tzinfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Getting an aware datetime object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now subtract the two datetime objects to obtain a timedelta object, which has the fancy &lt;code&gt;seconds&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dt&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delta&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Prints the timespan in seconds between dt and now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Getting the local timezone&lt;/h2&gt;
&lt;p&gt;In the last part, another strategy would have been to use the &lt;code&gt;now&lt;/code&gt; to obtain the local time and then set the local timezone to the datetime object obtained. But getting the local timezone isn&#39;t easy. I haven&#39;t found any function in the documentation doing that, and posts on the subject on StackOverflow advice using the &lt;code&gt;tzlocal&lt;/code&gt; module, which isn&#39;t present in the standard library.&lt;/p&gt;
&lt;p&gt;It&#39;s still possible with the vanilla datetime module.&lt;/p&gt;
&lt;p&gt;First, a solution that would work sometimes:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcnow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seconds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;local_timezone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we get the timezone as the difference between &lt;code&gt;now&lt;/code&gt; and &lt;code&gt;utcnow&lt;/code&gt;. But since the two functions are not executed at the exact same time, the difference doesn&#39;t produce a timedelta object with a whole number of minutes, which is the condition for a timedelta to be used to construct a timezone. We get a whole number of minutes by rounding the number of seconds divided by 60. Then we construct a timezone thanks to a new timedelta.&lt;/p&gt;
&lt;p&gt;Now imagine that this code runs on a &lt;em&gt;very&lt;/em&gt; slow computer and more than a minute is gone between the execution of the two functions, and you&#39;ve got a corrupted timezone. So, it doesn&#39;t really work.&lt;/p&gt;
&lt;p&gt;To make it work we can use a timestamp. Python can parse POSIX timestamp into datetime objects. We can use &lt;code&gt;fromtimestamp&lt;/code&gt; to get the local datetime from a timestamp and &lt;code&gt;utcfromtimestamp&lt;/code&gt; to get the UTC datetime from the same timestamp, then substract the two, which, this time, will represent the exact same instant:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;n&#34;&gt;TIMESTAMP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dt_utc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utcfromtimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;dt_local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dt_local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dt_utc&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;local_timezone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;diff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well, to be perfectly honnest, I&#39;m still not absolutely convinced that this would work 100% of the time. Depending on the implementation of the &lt;code&gt;fromtimestamps&lt;/code&gt; methods, there may exist edge cases causing trouble some times. I don&#39;t know. At the end of the day, the true way to get the timezone is to look at the operating system&#39;s specific configuration file containing such information, which is set by the user when it installs the operating system. This is what the &lt;code&gt;tzlocal&lt;/code&gt; module does by the way. Python probably does it too when it does anything UTC.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
		<entry>
			<title>Why Firefox was losing track of my history</title>
			<link href="http://foobuzz.github.io/firestory"/>
			<id>urn:uuid:7643553c-80e9-58ac-9f95-27bc1b22562c</id>
			<author>
				<name>Valentin</name>
			</author>
			<updated>2015-06-30T22:00:00Z</updated>
			<summary type="html">

&lt;p&gt;A few months ago I encrypted my Firefox profile. It contains my history, bookmarks and most importantly, authentification cookies that I keep for websites I find more conveniant to stay logged in. Those are things I prefer to be encrypted for obvious privacy and security reasons.&lt;/p&gt;
&lt;p&gt;The process of encrypting a Firefox profile goes as follow: first, you need to know where the profile is located in the disk. On Windows, it&#39;s a directory which sits at {User direcory}\AppData\Roaming\Mozilla\Firefox\Profiles\{the profile directory}. Then you need to use an encryption software such as TrueCrypt to put this directory in an encrypted container. Once you have this container, this is how a software like TrueCrypt works: when you open a container with it, it&#39;ll query you with the password and if you enter the correct one it&#39;ll &lt;em&gt;mount&lt;/em&gt; the container as if it was an external storage device. On Windows, this makes a new disk appear (you know like C: or D: or whatever) and all the content of the container becomes available at this disk. TrueCrypt lets you choose the letter of the disk on which you want to mount the container.&lt;/p&gt;
&lt;p&gt;In this case, the content of the container is a Firefox profile, so you have to tell Firefox how to access it once it&#39;s mounted. This can be done using the &lt;a href=&#34;https://support.mozilla.org/en-US/kb/profile-manager-create-and-remove-firefox-profiles&#34;&gt;Firefox profile manager&lt;/a&gt;. In fact Firefox let&#39;s you create an arbitrary number of profiles. A profile has a name, and a &lt;em&gt;path&lt;/em&gt; indicating where the actual profile directory is on the computer. Here, the strategy is to choose a letter by convention, which will be the letter of the drive onto which we&#39;re always going to mount the Firefox profile container. For example, we can take R:\ (I prefer letters at the end of the alphabets because Windows uses letters at the begining at the alphabet to automatically mount external devices). So we&#39;re gonna create a Firefox profile and set its path to R:\&lt;/p&gt;
&lt;p&gt;When all this set up is ready, when you want to browse Firefox, first you mount the profile container to R:\ and then you open Firefox with the corresponding profile. When you finish browsing, you close Firefox and you dismount the container. That is a dull process, so you can, like me, write some little batch script that&#39;ll make it almost transparent: it just asks me the password when I click on the Firefox icon and does the job of mounting before opening Firefox and dismounting when I close Firefox.&lt;/p&gt;
&lt;p&gt;This was not intented to be a tutorial on how to encrypt a Firefox profile, but just an introduction to the rest of this article. &lt;a href=&#34;https://nirklars.wordpress.com/2012/10/25/encrypt-firefox-thunderbird-profile-truecrypt/&#34;&gt;This is a step-by-step guide on how to encrypt a Firefox profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you create a container, you need to indicate the size of the container. Before encryption, my profile weighted around 230 MB, so I figured that 500 MB was enough for the container. Well, in fact, Firefox had a little surprise for me.&lt;/p&gt;
&lt;p&gt;A few weeks after I had set up my encrypted profile, I noticed that Firefox was losing old history. I never delete my history. It goes (went) all the way to more than six months, actually all the way to when I started my computer for the first time. I was first alerted by auto-completion fails. Having a massive history lets Firefox performs some very helpful and comprehensive auto-completion magic in the address bar; but this time it wasn&#39;t even able to auto-complete &#34;reddit.com/r/askr&#34;. What the hell was going on. Then I discovered in the Library window that there was nothing more than &#34;This month&#34;. I was &lt;em&gt;mad&lt;/em&gt;. My data had disappeared.&lt;/p&gt;
&lt;p&gt;After some googling I found out why.&lt;/p&gt;
&lt;p&gt;It turns out that by default, Firefox delete old history based on some expiration criterias. &lt;a href=&#34;https://mxr.mozilla.org/mozilla-central/source/toolkit/components/places/nsPlacesExpiration.js&#34;&gt;This is the source code&lt;/a&gt; of the program doing this slanderous job.&lt;/p&gt;
&lt;p&gt;Look at this:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;// This percentage of disk size is used to protect against calculating a too&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// large database size on disks with tiny quota or available space.&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DATABASE_TO_DISK_PERC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is not much space available on the disk, the history database can&#39;t take up more than 2% of this available space. My container has a size of 500 MB, but about 230 MB are already taken by other stuff (bookmarks, thumbnails, extensions, etc), so there&#39;s 270 MB actually available. So, the maximum size of the database was 5.4 MB. That&#39;s not much.&lt;/p&gt;
&lt;p&gt;Then there&#39;s this:&lt;/p&gt;
&lt;div class=&#34;codehilite&#34;&gt;&lt;pre class=&#34;source&#34;&gt;&lt;code&gt;&lt;span class=&#34;c1&#34;&gt;// This is the average size in bytes of an URI entry in the database.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Magic numbers are determined through analysis of the distribution of a ratio&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// between number of unique URIs and database size among our users.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Based on these values we evaluate how many unique URIs we can handle before&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// starting expiring some.&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URIENTRY_AVG_SIZE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firefox computes the maximum number of URIs it can hold in the database thanks to an average URI size, whose value is set to 1.6 KB. With 5.4 MB available, it means that you can store up to 3375 URIs. I don&#39;t know about you, but for me, that&#39;s about 15 days of browsing the web.&lt;/p&gt;
&lt;p&gt;So, this is why my history was only available for 2 weeks.&lt;/p&gt;
&lt;p&gt;The solution to this problem was quite easy. Actually all this hardware calculation for the maximum number of URIs is used only if the maximum size isn&#39;t set by the user. There&#39;s no regular settings menu to set this preference, I had to go in &lt;code&gt;about:config&lt;/code&gt;. According to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_Expiration&#34;&gt;this&lt;/a&gt;, there should be 2 keys relative to the limit of URIs: &lt;code&gt;places.history.expiration.max_pages&lt;/code&gt; which can be set by the user to his convenience and &lt;code&gt;places.history.expiration.transient_current_max_pages&lt;/code&gt;, a read-only copy of the previous key destined to other components which would want to access this information. When I finally searched for the keys, only the read-only one was there (and its value was 3274, close but not equal to my estimation above, that&#39;s because I rounded the numbers). According to &lt;a href=&#34;http://www.tomshardware.co.uk/answers/id-2088014/firefox-configuration-issue.html&#34;&gt;this forum post&lt;/a&gt;, I simply could create a brand new key called &lt;code&gt;places.history.expiration.max_pages&lt;/code&gt; and do my business with it. Which I did, setting its value to one fucking million. I was glad to see that its twin key immediatly updated itself with the new value, indicating that it worked.&lt;/p&gt;</summary>
			
				<category term="tech"></category>
			
		</entry>
	
</feed>